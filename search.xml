<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Web（二）</title>
      <link href="/2020/03/12/web-er/"/>
      <url>/2020/03/12/web-er/</url>
      
        <content type="html"><![CDATA[<h1 id="Web（二）"><a href="#Web（二）" class="headerlink" title="Web（二）"></a>Web（二）</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>​    目的：简要的复习web前端知识</p><p>​    主参考链接：<a href="https://www.w3school.com.cn/" target="_blank" rel="noopener">https://www.w3school.com.cn/</a></p><h2 id="1-JQuery"><a href="#1-JQuery" class="headerlink" title="1.JQuery"></a>1.JQuery</h2><h3 id="1-1概述"><a href="#1-1概述" class="headerlink" title="1.1概述"></a>1.1概述</h3><ul><li><strong>概念</strong>： 一个<code>JavaScript</code>框架。简化JS开发。</li></ul><ul><li><p>jQuery是一个快速、简洁的<code>JavaScript</code>框架，是继 <code>Prototype</code> 之后又一个优秀的 <code>JavaScript</code> 代码库（或<code>JavaScript</code> 框架）。jQuery 设计的宗旨    是“<code>write Less，Do More</code>”，即倡导写更少的代码，做更多的事情。它封装 <code>JavaScript</code> 常用的功能代码，提供一种简便的 <code>JavaScript</code> 设计模式，优化 HTML 文档操作、事件处理、动画设计和 Ajax 交互。</p></li><li><p>JavaScript 框架：<strong>本质上就是一些js文件，封装了js的原生代码而已</strong>。</p></li></ul><h3 id="1-2快速入门"><a href="#1-2快速入门" class="headerlink" title="1.2快速入门"></a>1.2快速入门</h3><ul><li><p><strong>基础使用</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> div1 <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#div1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>div1<span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p><strong>JQuery 对象和 JS 对象区别与转换</strong></p><p>参考链接：<a href="https://blog.csdn.net/web_yzm/article/details/82251559" target="_blank" rel="noopener">https://blog.csdn.net/web_yzm/article/details/82251559</a></p></li></ul><blockquote><p>JavaScript，下文可能简称 js </p></blockquote><ul><li>JavaScript 提供多个内建对象，比如 String、Date、Array 等等。<ul><li>对象只是带有属性和方法的特殊数据类型。</li><li>通过js获取的DOM对象就是 js 对象</li><li>当浏览器支持js的dom接口(api)时，这里狭义的dom对象是以js对象的形式出现的，也就是一个js对象</li></ul></li></ul><blockquote><p>JQuery</p></blockquote><ul><li>JQuery 对象在<strong>操作时</strong>，更加方便。</li><li>JQuery 对象和js对象<strong>方法不通用</strong>的.<ul><li>jQuery 对象不能使用 DOM 对象的方法和属性</li><li>DOM 对象不能使用 jQuery 对象的方法和属性</li></ul></li><li>jQuery 对象其实是一个 <code>JavaScrip</code> 的数组。</li><li>jQuery 对象是通过 jQuery 包装的 DOM 对象后产生的。</li></ul><blockquote><p>两者相互转换</p></blockquote><ul><li><code>jq -- &gt; js</code> : <code>jq对象[索引]</code> 或者 <code>jq对象.get(索引)</code></li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> doc2<span class="token operator">=</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#idDoc2"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> doc2<span class="token operator">=</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#idDoc2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li><code>js -- &gt; jq</code> : <code>$(js对象)</code></li></ul><h3 id="1-3选择器"><a href="#1-3选择器" class="headerlink" title="1.3选择器"></a>1.3选择器</h3><h4 id="1-3-1基本操作学习"><a href="#1-3-1基本操作学习" class="headerlink" title="1.3.1基本操作学习"></a>1.3.1基本操作学习</h4><ol><li><p>事件绑定</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//1.获取b1按钮</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#b1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>入口函数</p><pre class=" language-javascript"><code class="language-javascript"> <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li><code>window.onload</code>  和 <code>$(function)</code> 区别<ul><li><code>window.onload</code> 只能定义一次,如果定义多次，<strong>后边的会将前边的覆盖掉</strong></li><li><code>$(function)</code>可以定义多次的。</li></ul></li></ul></li><li><p>样式控制：css</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// $("#div1").css("background-color","red");</span>              <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#div1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"backgroundColor"</span><span class="token punctuation">,</span><span class="token string">"pink"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ol><h4 id="1-3-2选择器分类"><a href="#1-3-2选择器分类" class="headerlink" title="1.3.2选择器分类"></a>1.3.2选择器分类</h4><blockquote><p><strong>基本选择器</strong></p></blockquote><ol><li>标签选择器（元素选择器）<pre><code>     * 语法： `$("html标签名")` 获得所有匹配标签名称的元素</code></pre></li><li>id选择器 <ul><li>语法： <code>$("#id的属性值")</code> 获得与指定id属性值匹配的元素</li></ul></li><li>类选择器<ul><li>语法： <code>$(".class的属性值")</code> 获得与指定的class属性值匹配的元素</li></ul></li><li>并集选择器：<ul><li>语法： <code>$("选择器1,选择器2....")</code> 获取多个选择器选中的所有元素</li></ul></li></ol><blockquote><p><strong>层级选择器</strong></p></blockquote><ol><li>后代选择器<ul><li>语法： <code>$("A B ")</code> 选择A元素内部的所有 B 元素（全部后代）        </li></ul></li><li>子选择器<ul><li>语法： <code>$("A &gt; B")</code> 选择A元素内部的所有B子元素（一代）</li></ul></li></ol><blockquote><p><strong>属性选择器</strong></p></blockquote><ol><li><p>属性名称选择器 </p><ul><li>语法： <code>$("A[属性名]")</code> 包含指定属性的选择器</li></ul></li><li><p>属性选择器</p><ul><li><p>语法： <code>$("A[属性名='值']")</code> 包含指定属性等于指定值的选择器</p><p>如： 属性 title 值等于 test 的 div 元素背景色为 粉红色</p></li></ul></li></ol><pre class=" language-js"><code class="language-js">        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div[title='test']"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"backgroundColor"</span><span class="token punctuation">,</span><span class="token string">"pink"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ol start="3"><li><p>复合属性选择器</p><ul><li>语法： <code>$("A[属性名='值'][]...")</code> 包含<strong>多个属性条件</strong>的选择器</li><li>如：选取有属性 id 的 div 元素，然后在结果中选取属性 title 值含有<code>es</code>的 div 元素背景色为粉红色</li></ul></li></ol><pre class=" language-js"><code class="language-js">    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div[id][title*='es']"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"backgroundColor"</span><span class="token punctuation">,</span><span class="token string">"pink"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        </code></pre><blockquote><p><strong>过滤选择器</strong></p></blockquote><ol><li><p>首元素选择器 </p><ul><li>语法： <code>:firs</code>t 获得选择的元素中的第一个元素</li><li>如: 改变第一个 div 元素的背景色为 粉红色</li></ul></li></ol><pre class=" language-js"><code class="language-js">  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div:first"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"backgroundColor"</span><span class="token punctuation">,</span><span class="token string">"pink"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ol start="2"><li><p>尾元素选择器 </p><ul><li>语法：<code>:last</code> 获得选择的元素中的最后一个元素</li></ul></li><li><p>非元素选择器</p><ul><li>语法： <code>:not(selector)</code> 不包括指定内容的元素</li><li>如： 改变class不为 one 的所有 div 元素的背景色为 粉红色</li></ul></li></ol><pre class=" language-js"><code class="language-js">  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div:not(.one)"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"backgroundColor"</span><span class="token punctuation">,</span><span class="token string">"pink"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ol start="4"><li><p>偶数选择器</p><ul><li>语法： <code>:even</code> 偶数，从 0 开始计数</li></ul></li><li><p>奇数选择器</p><ul><li>语法： <code>:odd</code> 奇数，从 0 开始计数</li></ul></li><li><p>等于索引选择器</p><ul><li>语法： <code>:eq(index)</code> 指定索引元素</li></ul></li><li><p>大于索引选择器 </p><ul><li>语法： <code>:gt(index)</code> 大于指定索引元素</li></ul></li><li><p>小于索引选择器 </p><ul><li>语法： <code>:lt(index)</code> 小于指定索引元素</li></ul></li><li><p>标题选择器</p><ul><li>语法： <code>:header</code> 获得标题（h1~h6）元素，固定写法</li></ul></li></ol><blockquote><p><strong>表单过滤选择器</strong></p></blockquote><ol><li><p>可用元素选择器 </p><ul><li>语法： <code>:enabled</code> 获得可用元素</li></ul></li><li><p>不可用元素选择器 </p><ul><li>语法： <code>:disabled</code> 获得不可用元素</li></ul></li><li><p>选中选择器 </p><ul><li><p>语法： <code>:checked</code> 获得单选/复选框选中的元素</p></li><li><p>如：利用 jQuery 对象的 length 属性获取复选框选中的个数</p></li></ul></li></ol><pre class=" language-js"><code class="language-js"> <span class="token function">alert</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"input[type='checkbox']:checked"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ol start="4"><li><p>选中选择器 </p><ul><li>语法： <code>:selected</code> 获得下拉框选中的元素</li></ul></li></ol><h3 id="1-4DOM操作"><a href="#1-4DOM操作" class="headerlink" title="1.4DOM操作"></a>1.4DOM操作</h3><h4 id="1-4-1内容操作"><a href="#1-4-1内容操作" class="headerlink" title="1.4.1内容操作"></a>1.4.1内容操作</h4><ol><li><p><code>html()</code>: 获取/设置元素的<strong>标签体</strong>内容  </p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>test<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>这是段落中的<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">></span></span>粗体<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">></span></span>文本。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></code></pre><pre class=" language-javascript"><code class="language-javascript">    <span class="token comment" spellcheck="true">//结果：这是段落中的粗体文本</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"Text: "</span> <span class="token operator">+</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#test"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//结果：这是段落中的&lt;b>粗体&lt;/b>文本</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"HTML: "</span> <span class="token operator">+</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#test"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p><code>text()</code>: 获取/设置元素的标签体<strong>纯文本</strong>内容  </p></li><li><p><code>val()</code>： 获取/设置元素的 value 属性值</p></li></ol><h4 id="1-4-2属性操作"><a href="#1-4-2属性操作" class="headerlink" title="1.4.2属性操作"></a>1.4.2属性操作</h4><blockquote><p>通用属性操作</p></blockquote><ol><li><p><code>attr()</code>: 获取/设置元素的属性。可用函数来设置值。</p></li><li><p><code>removeAttr()</code>:删除属性</p></li><li><p><code>prop()</code>:获取/设置元素的属性</p></li><li><p><code>removeProp()</code>:删除属性</p><ul><li><strong>attr和prop区别？</strong><ul><li>如果操作的是元素的<strong>固有属性</strong>，则建议使用 <code>prop</code></li><li>如果操作的是元素<strong>自定义的属性</strong>，则建议使用 <code>attr</code></li></ul></li></ul></li></ol><pre class=" language-javascript"><code class="language-javascript">               <span class="token comment" spellcheck="true">//获取北京节点的name属性值</span>            <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#bj"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//设置北京节点的name属性的值为dabeijing</span>            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#bj"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"dabeijing"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//新增北京节点的discription属性 ，属性值是didu</span>            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#bj"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"discription"</span><span class="token punctuation">,</span><span class="token string">"didu"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//删除北京节点的name属性并检验name属性是否存在</span>            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#bj"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">removeAttr</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//获得hobby的的选中状态</span>            <span class="token keyword">var</span> checked <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#hobby"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">prop</span><span class="token punctuation">(</span><span class="token string">"checked"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">alert</span><span class="token punctuation">(</span>checked<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//var checked = $("#hobby").attr("checked"); //获取不到，弹出undefined</span></code></pre><blockquote><p>对 class 属性操作（ 操作 CSS）</p></blockquote><ol><li><p><code>addClass()</code>:添加class属性值。需提前写好对应的 <code>.class</code>选择器，方可看到效果。</p></li><li><p><code>removeClass()</code>:删除class属性值</p></li><li><p><code>toggleClass()</code>:<strong>切换</strong>class属性</p><ul><li><code>toggleClass("one")</code>: 判断如果元素对象上<strong>存在</strong><code>class="one"</code>，则将属性值one<strong>删除掉</strong>。  如果元素对象上<strong>不存在</strong><code>class="one"</code>，<strong>则添加</strong></li></ul></li><li><p><code>css()</code>:设置或返回样式属性</p></li></ol><h4 id="1-4-3CRUD操作"><a href="#1-4-3CRUD操作" class="headerlink" title="1.4.3CRUD操作"></a>1.4.3CRUD操作</h4><ol><li><p><code>append()</code>:<strong>父元素将子元素追加到末尾</strong></p><ul><li><code>对象1.append(对象2)</code>:将<strong>对象2</strong>添加到对象1元素<strong>内部</strong>，并且在<strong>末尾</strong></li></ul></li><li><p><code>prepend()</code>:<strong>父元素将子元素追加到开头</strong></p><ul><li><code>对象1.prepend(对象2)</code>:将<strong>对象2</strong>添加到对象1元素<strong>内部</strong>，并且在<strong>开头</strong></li></ul></li><li><p><code>appendTo()</code>:</p><ul><li><code>对象1.appendTo(对象2)</code>:将<strong>对象1</strong>添加到对象2<strong>内部</strong>，并且在末尾</li></ul></li><li><p><code>prependTo()</code>：</p><ul><li><code>对象1.prependTo(对象2)</code>:将<strong>对象1</strong>添加到对象2<strong>内部</strong>，并且在开头</li></ul></li><li><p><code>after()</code>:<strong>添加元素到元素后边</strong>    </p><ul><li><code>对象1.after(对象2)</code>： 将<strong>对象2</strong>添加到对象1后边。对象1和对象2是<strong>兄弟关系</strong></li></ul></li><li><p><code>before()</code>:<strong>添加元素到元素前边</strong></p><ul><li><code>对象1.before(对象2)</code>： 将<strong>对象2</strong>添加到对象1前边。对象1和对象2是<strong>兄弟关系</strong></li></ul></li><li><p><code>insertAfter()</code></p><ul><li><code>对象1.insertAfter(对象2)</code>：将对象1添加到对象2后边。对象1和对象2是兄弟关系</li></ul></li><li><p><code>insertBefore()</code></p><ul><li><code>对象1.insertBefore(对象2)</code>： 将对象1添加到对象2前边。对象1和对象2是兄弟关系</li></ul><pre class=" language-html"><code class="language-html">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>city<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bj<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>beijing<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>北京<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tj<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tianjin<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>天津<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cq<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>chongqing<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>重庆<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span></code></pre></li></ol><pre><code>        &lt;ul id="love"&gt;            &lt;li id="fk" name="fankong"&gt;反恐&lt;/li&gt;           &lt;li id="xj" name="xingji"&gt;星际&lt;/li&gt;       &lt;/ul&gt;</code></pre><pre><code>  ```js                // &lt;input type="button" value="将反恐放置到city的后面"  id="b1"/&gt;               $("#b1").click(function () {                   //append                   //$("#city").append($("#fk"));                   //appendTo                   $("#fk").appendTo($("#city"));               });               // &lt;input type="button" value="将反恐插入到天津前面"  id="b4"/&gt;               $("#b4").click(function () {                   //before                   //$("#tj").before($("#fk"));                   //insertBefore                   $("#fk").insertBefore($("#tj"));               });</code></pre><ol start="9"><li><p><code>remove()</code>:<strong>移除元素</strong></p><ul><li><code>对象.remove()</code>: 删除被选元素及其子元素。</li></ul></li><li><p><code>empty()</code>:<strong>清空元素的所有后代元素。</strong></p><ul><li><code>对象.empty()</code>: 将对象的后代元素全部清空，但是<strong>保留当前对象以及其属性节点</strong></li></ul></li></ol><h3 id="1-5动画"><a href="#1-5动画" class="headerlink" title="1.5动画"></a>1.5动画</h3><blockquote><p><strong>默认显示和隐藏方式</strong></p></blockquote><ul><li><p><code>show([speed,[easing],[fn]])</code>  ：<strong>显示</strong></p></li><li><p>参数：</p><ol><li><p><code>speed</code>：动画的速度。三个预定义的值(<code>slow</code>,<code>normal</code>, <code>fast</code>)或表示动画时长的毫秒数值(如：1000)</p></li><li><p><code>easing</code>：用来指定切换效果，默认是”swing”，可用参数”linear”</p><ul><li><p><code>swing</code>：动画执行时效果是 先慢，中间快，最后又慢</p></li><li><p><code>linear</code>：动画执行时速度是匀速的 </p></li></ul></li><li><p><code>fn</code>：在动画完成时执行的函数，每个元素执行一次。</p></li></ol></li><li><p><code>hide([speed,[easing],[fn]])</code>  ： <strong>隐藏</strong></p></li><li><p><code>toggle([speed],[easing],[fn])</code> ：<strong>显示被隐藏的元素，并隐藏已显示的元素</strong></p><blockquote><p><strong>滑动显示和隐藏方式</strong></p></blockquote></li><li><p><code>slideDown([speed],[easing],[fn])</code> ：<strong>向下滑动</strong></p></li><li><p><code>slideUp([speed,[easing],[fn]])</code> ：<strong>向上滑动</strong></p></li><li><p><code>slideToggle([speed],[easing],[fn])</code> ：<strong>在 slideDown() 与 slideUp() 方法之间进行切换。</strong></p></li></ul><blockquote><p><strong>淡入淡出显示和隐藏方式</strong></p></blockquote><ul><li><code>fadeIn([speed],[easing],[fn])</code> ：<strong>淡入已隐藏的元素。</strong></li><li><code>fadeOut([speed],[easing],[fn])</code>： <strong>淡出可见元素。</strong></li><li><code>fadeToggle([speed,[easing],[fn]])</code> ：<strong>在 fadeIn() 与 fadeOut() 方法之间进行切换。</strong></li></ul><pre class=" language-javascript"><code class="language-javascript">        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#showDiv"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fadeOut</span><span class="token punctuation">(</span><span class="token string">"slow"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//淡出</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#showDiv"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slideDown</span><span class="token punctuation">(</span><span class="token string">"slow"</span><span class="token punctuation">,</span><span class="token string">"swing"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"显示了..."</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#showDiv"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toggle</span><span class="token punctuation">(</span><span class="token string">"slow"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="1-6遍历"><a href="#1-6遍历" class="headerlink" title="1.6遍历"></a>1.6遍历</h3><h4 id="1-61-js-的遍历方式"><a href="#1-61-js-的遍历方式" class="headerlink" title="1.61 js 的遍历方式"></a>1.61 <strong>js 的遍历方式</strong></h4><ul><li><code>for(初始化值;循环结束条件;步长)</code></li></ul><h4 id="1-62-jq-的遍历方式"><a href="#1-62-jq-的遍历方式" class="headerlink" title="1.62 jq 的遍历方式"></a>1.62 <strong>jq 的遍历方式</strong></h4><blockquote><p><code>jq对象.each(callback)</code></p></blockquote><ul><li><p><code>jquery对象.each(function(index,element){});</code></p><ul><li><code>index</code> : 就是元素在集合中的索引</li><li><code>element</code>：就是集合中的每一个元素对象</li></ul><ul><li><code>this</code>：集合中的每一个元素对象</li></ul></li></ul><pre class=" language-js"><code class="language-js">            <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">var</span> citys <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#city li"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                       citys<span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>index<span class="token punctuation">,</span>element<span class="token punctuation">)</span> <span class="token punctuation">{</span>                     <span class="token comment" spellcheck="true">//3.1 获取li对象 第一种方式 this</span>                    <span class="token comment" spellcheck="true">//alert(this.innerHTML);//js对象，效果相同</span>                    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//jq对象,方法更多                </span>                    <span class="token comment" spellcheck="true">//3.2 获取li对象 第二种方式 在回调函数中定义参数</span>                    <span class="token comment" spellcheck="true">// index（索引） element（元素对象）</span>                    <span class="token comment" spellcheck="true">//alert(index+":"+element.innerHTML);//js对象</span>                    <span class="token function">alert</span><span class="token punctuation">(</span>index<span class="token operator">+</span><span class="token string">":"</span><span class="token operator">+</span><span class="token function">$</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//jq对象 </span>                   <span class="token comment" spellcheck="true">//判断如果是上海，则结束循环</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"上海"</span> <span class="token operator">===</span> <span class="token function">$</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">//如果当前function返回为false，则结束循环(break)。</span>                        <span class="token comment" spellcheck="true">//如果返回为true，则结束本次循环，继续下次循环(continue)</span>                        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token function">alert</span><span class="token punctuation">(</span>index<span class="token operator">+</span><span class="token string">":"</span><span class="token operator">+</span><span class="token function">$</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li><strong>回调函数返回值</strong>：<ul><li><code>true</code> : 如果当前function返回为 false ，则<strong>结束循环 (break)</strong>。<ul><li><code>false</code>: 如果当前function返回为 true，则<strong>结束本次循环，继续下次循环 (continue)</strong>。</li></ul></li></ul></li></ul><blockquote><p><code>$.each(object, [callback])</code></p></blockquote><pre class=" language-js"><code class="language-js">$<span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span>citys<span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p><code>for..of</code> :  jquery 3.0 版本之后提供的方式</p></blockquote><ul><li><code>for(元素对象 of 容器对象)</code></li></ul><pre class=" language-js"><code class="language-js">         <span class="token keyword">for</span><span class="token punctuation">(</span>li <span class="token keyword">of</span> citys<span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span></code></pre><h3 id="1-7事件的绑定"><a href="#1-7事件的绑定" class="headerlink" title="1.7事件的绑定"></a>1.7事件的绑定</h3><ol><li><p><strong>jquery 标准的绑定方式</strong></p><ul><li><p><code>jq对象.事件方法(回调函数)；</code></p><ul><li><p>注：如果调用事件方法，不传递回调函数，则会<strong>触发浏览器默认行为</strong>。</p><blockquote><p>如：<code>表单对象.submit()</code>;  //让表单提交</p><p><code>对象.focus()</code>; //获得焦点</p></blockquote></li></ul></li></ul></li></ol><pre class=" language-js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#name"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"我被点击了..."</span><span class="token punctuation">)</span>           <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ol start="2"><li><strong>on 绑定事件/ off解除绑定</strong><ul><li><code>jq对象.on("事件名称",回调函数)</code></li><li><code>jq对象.off("事件名称")</code></li><li>如果off方法不传递任何参数，则将组件上的<strong>所有事件全部解绑</strong></li></ul></li></ol><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//1.使用on给按钮绑定单击事件  click</span>                 <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#btn"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                     <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"我被点击了。。。"</span><span class="token punctuation">)</span>                 <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>     </code></pre><ol start="3"><li><p><strong>事件切换：toggle</strong></p><ul><li><p><code>jq对象.toggle(fn1,fn2...)</code></p></li><li><p>当单击jq对象对应的组件后，会执行<code>fn1</code>.第二次点击会执行<code>fn2</code>…..</p></li></ul></li></ol><blockquote><p> 注意：1.9版本 <code>.toggle()</code> 方法删除, <code>jQuery Migrate</code>（迁移）插件可以恢复此功能。</p></blockquote><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../js/jquery-migrate-1.0.0.js<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><pre class=" language-javascript"><code class="language-javascript">    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#btn"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toggle</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token comment" spellcheck="true">//改变div背景色backgroundColor 颜色为 green</span>               <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#myDiv"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"backgroundColor"</span><span class="token punctuation">,</span><span class="token string">"green"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token comment" spellcheck="true">//改变div背景色backgroundColor 颜色为 pink</span>               <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#myDiv"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"backgroundColor"</span><span class="token punctuation">,</span><span class="token string">"pink"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="1-8增强JQuery的功能"><a href="#1-8增强JQuery的功能" class="headerlink" title="1.8增强JQuery的功能"></a>1.8增强JQuery的功能</h3><blockquote><p>插件：增强JQuery的功能</p></blockquote><ul><li><strong>实现方式</strong>：</li></ul><ol><li><p><code>$.fn.extend(object)</code> </p><ul><li><p>增强通过 JQuery 获取的对象的功能  </p></li><li><p>所有的 jq 对象都可以调用该方法；使用 <code>$("#id")</code></p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//1.定义jqeury的对象插件</span>      $<span class="token punctuation">.</span>fn<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">//定义了一个check()方法。所有的jq对象都可以调用该方法</span>          check<span class="token punctuation">:</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token comment" spellcheck="true">//让复选框选中</span>              <span class="token comment" spellcheck="true">//this:调用该方法的jq对象</span>              <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">prop</span><span class="token punctuation">(</span><span class="token string">"checked"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 获取按钮</span>          <span class="token comment" spellcheck="true">//$("#btn-check").check();</span>          <span class="token comment" spellcheck="true">//复选框对象.check();</span>          <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#btn-check"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token comment" spellcheck="true">//获取复选框对象</span>              <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"input[type='checkbox']"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">check</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul></li></ol><ol start="2"><li><p><code>$.extend(object)</code></p><ul><li><p>增强 JQeury 对象自身的功能 </p></li><li><p>全局, 使用<code>$</code> /<code>jQuery</code></p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//对全局方法扩展2个方法，扩展min方法：求2个值的最小值；扩展max方法：求2个值最大值</span>      $<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span>          max<span class="token punctuation">:</span><span class="token keyword">function</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token comment" spellcheck="true">//返回两数中的较大值</span>              <span class="token keyword">return</span> a <span class="token operator">>=</span> b <span class="token operator">?</span> a<span class="token punctuation">:</span>b<span class="token punctuation">;</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          min<span class="token punctuation">:</span><span class="token keyword">function</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token comment" spellcheck="true">//返回两数中的较小值</span>              <span class="token keyword">return</span> a <span class="token operator">&lt;=</span> b <span class="token operator">?</span> a<span class="token punctuation">:</span>b<span class="token punctuation">;</span>          <span class="token punctuation">}</span>                  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//调用全局方法</span>      <span class="token keyword">var</span> max <span class="token operator">=</span> $<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//alert(max);</span>      <span class="token keyword">var</span> min <span class="token operator">=</span> $<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">alert</span><span class="token punctuation">(</span>min<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul></li></ol><h2 id="2-AJAX"><a href="#2-AJAX" class="headerlink" title="2.AJAX"></a>2.AJAX</h2><h3 id="2-1概述"><a href="#2-1概述" class="headerlink" title="2.1概述"></a>2.1概述</h3><ul><li><p><strong>概念</strong>： <code>ASynchronous JavaScript And XML</code>    异步的 <code>JavaScript</code>  和 <code>XML</code></p></li><li><p><strong>异步和同步</strong>：客户端和服务器端相互通信的基础上</p><ul><li>同步：客户端必须等待服务器端的响应。在等待的期间客户端不能做其他操作。<ul><li>异步：客户端不需要等待服务器端的响应。在服务器处理请求的过程中，客户端可以进行其他的操作。</li></ul></li></ul></li><li><p><code>Ajax</code> 是一种在无需重新加载整个网页的情况下，能够<strong>更新部分网页的技术</strong>。 </p></li><li><p>通过在后台与服务器进行少量数据交换，<code>Ajax</code> 可以使网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。</p></li><li><p>传统的网页（不使用 <code>Ajax</code>）如果需要更新内容，必须重载整个网页页面。提升用户的体验。</p></li></ul><h3 id="2-2实现方式"><a href="#2-2实现方式" class="headerlink" title="2.2实现方式"></a>2.2实现方式</h3><h4 id="2-2-1原生JS（了解）"><a href="#2-2-1原生JS（了解）" class="headerlink" title="2.2.1原生JS（了解）"></a>2.2.1原生JS（了解）</h4><pre class=" language-javascript"><code class="language-javascript">             <span class="token comment" spellcheck="true">//1.创建核心对象</span>                <span class="token keyword">var</span> xmlhttp<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>XMLHttpRequest<span class="token punctuation">)</span>                <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// code for IE7+, Firefox, Chrome, Opera, Safari</span>                    xmlhttp<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span>                <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// code for IE6, IE5</span>                    xmlhttp<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ActiveXObject</span><span class="token punctuation">(</span><span class="token string">"Microsoft.XMLHTTP"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">//2. 建立连接</span>                <span class="token comment" spellcheck="true">/*                    参数：                        1. 请求方式：GET、POST                            * get方式，请求参数在URL后边拼接。send方法为空参                            * post方式，请求参数在send方法中定义                        2. 请求的URL：                        3. 同步或异步请求：true（异步）或 false（同步）                 */</span>                xmlhttp<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">,</span><span class="token string">"ajaxServlet?username=tom"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//3.发送请求</span>                xmlhttp<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//4.接受并处理来自服务器的响应结果</span>                <span class="token comment" spellcheck="true">//获取方式 ：xmlhttp.responseText</span>                <span class="token comment" spellcheck="true">//什么时候获取？当服务器响应成功后再获取</span>                <span class="token comment" spellcheck="true">//当xmlhttp对象的就绪状态改变时，触发事件onreadystatechange。</span>                xmlhttp<span class="token punctuation">.</span>onreadystatechange<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//判断readyState就绪状态是否为4，判断status响应状态码是否为200</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>xmlhttp<span class="token punctuation">.</span>readyState<span class="token operator">==</span><span class="token number">4</span> <span class="token operator">&amp;&amp;</span> xmlhttp<span class="token punctuation">.</span>status<span class="token operator">==</span><span class="token number">200</span><span class="token punctuation">)</span>                    <span class="token punctuation">{</span>                       <span class="token comment" spellcheck="true">//获取服务器的响应结果</span>                        <span class="token keyword">var</span> responseText <span class="token operator">=</span> xmlhttp<span class="token punctuation">.</span>responseText<span class="token punctuation">;</span>                        <span class="token function">alert</span><span class="token punctuation">(</span>responseText<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span></code></pre><h4 id="2-2-2JQuery方式"><a href="#2-2-2JQuery方式" class="headerlink" title="2.2.2JQuery方式"></a>2.2.2JQuery方式</h4><ol><li><p><code>$.ajax()</code>    </p><pre><code>     * 语法：`$.ajax({键值对});` ```javascript         //定义方法             function  fun() {                 //使用$.ajax()发送异步请求                 $.ajax({                     url:"ajaxServlet1111" , // 请求路径                     type:"POST" , //请求方式                     //data: "username=jack&amp;age=23",//请求参数                     data:{"username":"jack","age":23},                     success:function (data) {                         alert(data);                     },//响应成功后的回调函数                     error:function () {                         alert("出错啦...")                     },//表示如果请求响应出现错误，会执行的回调函数                     dataType:"text"//设置接受到的响应数据的格式                 });             } ```</code></pre></li><li><p><code>$.get()</code>：发送 get 请求</p><ul><li><p>语法：<code>$.get(url, [data], [callback], [type])</code></p></li><li><p>参数：</p><ul><li>url：请求路径</li><li>data：请求参数</li><li>callback：回调函数</li><li>type：响应结果的类型</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//定义方法</span>      <span class="token keyword">function</span>  <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          $<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"ajaxServlet"</span><span class="token punctuation">,</span><span class="token punctuation">{</span>username<span class="token punctuation">:</span><span class="token string">"rose"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token function">alert</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">"text"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span></code></pre></li></ul></li><li><p><code>$.post()</code>：发送post请求</p><ul><li><p>语法：<code>$.post(url, [data], [callback], [type])</code></p></li><li><p>参数：</p><pre><code>      * url：请求路径</code></pre><ul><li>data：请求参数</li><li>callback：回调函数<ul><li>type：响应结果的类型</li></ul></li></ul><pre class=" language-javascript"><code class="language-javascript">     <span class="token comment" spellcheck="true">//定义方法</span>      <span class="token keyword">function</span>  <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          $<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"ajaxServlet"</span><span class="token punctuation">,</span><span class="token punctuation">{</span>username<span class="token punctuation">:</span><span class="token string">"rose"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token function">alert</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">"text"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span></code></pre></li></ul></li></ol><h2 id="3-JSON"><a href="#3-JSON" class="headerlink" title="3.JSON"></a>3.JSON</h2><h3 id="3-1概述"><a href="#3-1概述" class="headerlink" title="3.1概述"></a>3.1概述</h3><ul><li><p>概念： <code>JavaScript Object Notation</code>        <code>JavaScript</code> 对象表示法</p><p><code>var p = {"name":"张三","age":23,"gender":"男"};</code></p><ul><li>json 现在多用于<strong>存储和交换文本信息</strong>的语法</li><li>进行<strong>数据的传输</strong></li><li>JSON 比 XML 更小、更快，更易解析。</li></ul></li></ul><h3 id="3-2基本语法"><a href="#3-2基本语法" class="headerlink" title="3.2基本语法"></a>3.2基本语法</h3><h4 id="3-2-1基本规则"><a href="#3-2-1基本规则" class="headerlink" title="3.2.1基本规则"></a>3.2.1基本规则</h4><ul><li><p>数据在名称/值对中：json 数据是由<strong>键值对</strong>构成的</p><ul><li><p>键用<strong>引号(单双都行</strong>)引起来，也可以不使用引号</p></li><li><p>值得<strong>取值类型</strong>：</p><ol><li>数字（整数或浮点数）</li><li>字符串（在双引号中）</li><li>逻辑值（true 或 false）            </li><li>数组（在<strong>方括号</strong>中）    <code>{"persons":[{},{}]}</code></li><li>对象（在<strong>花括号</strong>中） <code>{"address":{"province"："陕西"....}}</code></li><li>null</li></ol></li></ul></li><li><p>数据由逗号分隔：多个键值对由  <code>,</code> 分隔</p></li><li><p>花括号保存对象：使用<code>{}</code>定义 json 格式</p></li><li><p>方括号保存数组：<code>[]</code></p></li></ul><h4 id="3-2-2获取数据"><a href="#3-2-2获取数据" class="headerlink" title="3.2.2获取数据"></a>3.2.2获取数据</h4><ol><li><p><code>json对象.键名</code></p></li><li><p><code>json对象["键名"]</code></p></li><li><p><code>数组对象[索引]</code></p></li><li><p>遍历：</p><ul><li>需注意遍历时 对象的选择。</li></ul></li></ol><pre class=" language-javascript"><code class="language-javascript">         <span class="token comment" spellcheck="true">//1.定义基本格式</span>        <span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"张三"</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token string">'gender'</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> ps <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"张三"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token string">"gender"</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"李四"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">24</span><span class="token punctuation">,</span> <span class="token string">"gender"</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"王五"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token string">"gender"</span><span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取person对象中所有的键和值</span>        <span class="token comment" spellcheck="true">//for in 循环</span>       <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> key <span class="token keyword">in</span> person<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//这样的方式获取不行。因为相当于  person."name"</span>            <span class="token comment" spellcheck="true">//alert(key + ":" + person.key);</span>           <span class="token comment" spellcheck="true">//person.key无法取到值，显示undefined</span>            <span class="token function">alert</span><span class="token punctuation">(</span>key<span class="token operator">+</span><span class="token string">":"</span><span class="token operator">+</span>person<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>       <span class="token comment" spellcheck="true">//获取ps中的所有值</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> ps<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">var</span> p <span class="token operator">=</span> ps<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> key <span class="token keyword">in</span> p<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">alert</span><span class="token punctuation">(</span>key<span class="token operator">+</span><span class="token string">":"</span><span class="token operator">+</span>p<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span></code></pre><h4 id="3-2-3相互转化"><a href="#3-2-3相互转化" class="headerlink" title="3.2.3相互转化"></a>3.2.3相互转化</h4><blockquote><p><strong>JSON 转为 Java 对象</strong></p></blockquote><ul><li><p>导入 <code>jackson</code> 的相关jar包</p></li><li><p>创建 <code>Jackson</code> 核心对象 <code>ObjectMapper</code></p></li><li><p>调用 <code>ObjectMapper</code> 的相关方法进行转换                                                              </p><ul><li><code>readValue(json字符串数据,Class)</code></li></ul></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test5</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">//1.初始化JSON字符串</span>        String json <span class="token operator">=</span> <span class="token string">"{\"gender\":\"男\",\"name\":\"张三\",\"age\":23}"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2.创建ObjectMapper对象</span>        ObjectMapper mapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3.转换为Java对象 Person对象</span>        Person person <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">readValue</span><span class="token punctuation">(</span>json<span class="token punctuation">,</span> Person<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><blockquote><p><strong>Java 对象转换 JSON</strong></p></blockquote><ul><li><p>调用ObjectMapper的相关方法进行转换</p></li><li><p><strong>转换方法</strong>：</p><ul><li><code>writeValue(参数1，obj):</code></li></ul></li><li><p>File：将obj对象转换为JSON字符串，并保存到指定的文件中</p><ul><li>Writer：将obj对象转换为JSON字符串，并将json数据填充到字符输出流中</li><li>OutputStream：将obj对象转换为JSON字符串，并将json数据填充到字节输出流中<ul><li><code>writeValueAsString(obj)</code>: 将对象转为 json 字符串</li></ul></li></ul></li><li><p><strong>注解</strong>：</p><ol><li><code>@JsonIgnore</code>：<strong>排除</strong>属性。</li><li><code>@JsonFormat</code>：属性值得<strong>格式化</strong><ul><li><code>@JsonFormat(pattern = "yyyy-MM-dd")</code>            </li></ul></li></ol></li><li><p><strong>复杂java对象转换</strong></p><ol><li><code>List</code>：数组，方式相同</li><li><code>Map</code>：方式相同</li></ol><pre class=" language-java"><code class="language-java">     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test4</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1.创建map对象</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"gender"</span><span class="token punctuation">,</span><span class="token string">"男"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2.转换</span>        ObjectMapper mapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String json <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//{"name":"张三","age":23,"gender":"男"}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//{"gender":"男","name":"张三","age":23}</span>    <span class="token punctuation">}</span></code></pre></li></ul><h2 id="4-ES5、6新特性"><a href="#4-ES5、6新特性" class="headerlink" title="4.ES5、6新特性"></a>4.ES5、6新特性</h2><p>我们这里只把一些常用的进行学习，更详细的大家参考：<a href="http://es6.ruanyifeng.com/?search=reduce&amp;x=0&amp;y=0#README" target="_blank" rel="noopener">阮一峰的ES6教程</a></p><h3 id="4-1-let与const"><a href="#4-1-let与const" class="headerlink" title="4.1 let与const"></a>4.1 let与const</h3><ul><li><code>var</code> : <code>var</code>有一个问题，就是定义的变量有时会莫名奇妙的成为<strong>全局变量</strong>。</li><li><code>let</code> : 声明一个变量，不会越界，只在<code>let</code>命令所在的代码块内有效。</li><li><code>const</code>：声明一个常量，不能被修改。</li></ul><h3 id="4-2-字符串拓展"><a href="#4-2-字符串拓展" class="headerlink" title="4.2.字符串拓展"></a>4.2.字符串拓展</h3><blockquote><p>新的API</p></blockquote><p>ES6为字符串扩展了几个新的API：</p><ul><li><code>includes()</code>：返回布尔值，表示是否找到了参数字符串。</li><li><code>startsWith()</code>：返回布尔值，表示参数字符串是否在原字符串的头部。</li><li><code>endsWith()</code>：返回布尔值，表示参数字符串是否在原字符串的尾部。</li></ul><blockquote><p>字符串模板</p></blockquote><p>ES6中提供了  `  来作为字符串模板标记。我们可以这么玩：</p><p><img src="https://raw.githubusercontent.com/black210/images/master/demo/202003/11/164857-292471.png" alt="字符串模板"></p><ul><li>在两个 ` 之间的部分都会被作为字符串的值，不管你任意换行，甚至加入 js 脚本</li></ul><h3 id="4-3-解构表达式"><a href="#4-3-解构表达式" class="headerlink" title="4.3.解构表达式"></a>4.3.解构表达式</h3><ul><li>数组：<code>let [x,y,z]=arr</code></li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> <span class="token punctuation">[</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// x，y，z将与arr中的每个位置对应来取值</span><span class="token comment" spellcheck="true">// 然后打印</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li><p>对象: <code>let {name:a, age:b}=person</code></p><ul><li><p>如过想要用其它变量接收，需要额外指定别名：</p><p><img src="https://raw.githubusercontent.com/black210/images/master/demo/202003/11/164903-110527.png" alt="别名"></p></li><li><p><code>{name:n}</code>：name 是 person 中的属性名，冒号后面的 n 是解构后要赋值给的变量。</p></li></ul></li></ul><h3 id="4-4-箭头函数"><a href="#4-4-箭头函数" class="headerlink" title="4.4.箭头函数"></a>4.4.箭头函数</h3><ul><li><p>赋默认值：方法参数列表赋默认值 <code>(a, b=1)=&gt;{}</code></p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span>a <span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 传一个参数</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>箭头函数：<code>()=&gt;{}</code></p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> sum3 <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>对象中定义函数：</p><ul><li>传统 eat：<code>function(){}</code></li><li>箭头 eat：<code>()=&gt;{}</code></li><li>简写 <code>eat(){}</code></li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">"jack"</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 以前：</span>    eat<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>food<span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">"在吃"</span> <span class="token operator">+</span> food<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 箭头函数版：</span>    eat2<span class="token punctuation">:</span> food <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">"在吃"</span> <span class="token operator">+</span> food<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">// 这里拿不到this</span>    <span class="token comment" spellcheck="true">// 简写版：</span>    <span class="token function">eat3</span><span class="token punctuation">(</span>food<span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">"在吃"</span> <span class="token operator">+</span> food<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>箭头函数结合结构表达式：<code>({name})=&gt;{}</code></p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span><span class="token string">"jack"</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span><span class="token number">21</span><span class="token punctuation">,</span>    language<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'java'</span><span class="token punctuation">,</span><span class="token string">'js'</span><span class="token punctuation">,</span><span class="token string">'css'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">hello</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"hello,"</span> <span class="token operator">+</span> person<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//如果用箭头函数和解构表达式</span><span class="token keyword">var</span> hi <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>name<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"hello,"</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul><h3 id="4-5-map和reduce"><a href="#4-5-map和reduce" class="headerlink" title="4.5.map和reduce"></a>4.5.map和reduce</h3><ul><li><p><code>map(fun)</code>：处理一个数组，遍历数组中的每一个元素用 <code>fun</code> 处理，把处理结果放入新的数组。</p></li><li><p><code>reduce(fun(a, b)[, 100])</code>：接收一个函数（必须）和一个初始值（可选）。</p><p>第一个参数（函数）接收两个参数：</p><ul><li>第一个参数是上一次reduce处理的结果</li><li>第二个参数是数组中要处理的下一个元素</li></ul></li></ul><blockquote><p><code>reduce()</code>会从左到右依次把数组中的元素用reduce处理，并把处理的结果作为下次reduce的第一个参数。如果是第一次，会把前两个元素作为计算参数，或者把用户指定的初始值作为起始参数</p></blockquote><p><img src="https://raw.githubusercontent.com/black210/images/master/demo/202003/11/164909-195883.png" alt="reduce示例"></p><h3 id="4-6-对象的扩展"><a href="#4-6-对象的扩展" class="headerlink" title="4.6.对象的扩展"></a>4.6.对象的扩展</h3><p>ES6给Object拓展了许多新的方法，如：</p><ul><li><p><code>keys(obj)</code>：获取对象的所有 key 形成的数组</p></li><li><p><code>values(obj)</code>：获取对象的所有 value 形成的数组</p></li><li><p><code>entries(obj)</code>：获取对象的所有 key 和 value 形成的二维数组。格式：<code>[[k1,v1],[k2,v2],...]</code></p></li><li><p><code>assign(dest, ...src)</code> ：将多个 src 对象的值 拷贝到 dest中（浅拷贝）。</p><p><img src="https://raw.githubusercontent.com/black210/images/master/demo/202003/11/164912-639986.png" alt="对象拓展"></p></li></ul><h3 id="4-7-数组扩展"><a href="#4-7-数组扩展" class="headerlink" title="4.7.数组扩展"></a>4.7.数组扩展</h3><p>ES6给数组新增了许多方法：</p><ul><li><code>find(callback)</code>：数组实例的find方法，用于找出<strong>第一个符合条件</strong>的数组成员。它的参数是一个回调函数，所有数组成员依次执行该回调函数，直到找出第一个返回值为 true 的成员，然后<strong>返回该成员</strong>。如果没有符合条件的成员，则<strong>返回 undefined 。</strong> </li><li><code>findIndex(callback)</code>：数组实例的 <code>findIndex</code> 方法的用法与 find 方法非常类似，返回第一个符合条件的数组成员的<strong>位置</strong>，如果所有成员都不符合条件，则<strong>返回 -1。</strong> </li><li><code>includes(数组元素)</code>：与 find 类似，<strong>如果匹配到元素，则返回true</strong>，代表找到了。</li></ul><h2 id="5-Thymeleaf"><a href="#5-Thymeleaf" class="headerlink" title="5. Thymeleaf"></a>5. Thymeleaf</h2><h3 id="5-1概述"><a href="#5-1概述" class="headerlink" title="5.1概述"></a>5.1概述</h3><ul><li><p>官方网站：<a href="https://www.thymeleaf.org/index.html" target="_blank" rel="noopener">https://www.thymeleaf.org/index.html</a></p></li><li><p><code>Thymeleaf</code> 是用来开发 Web 和独立环境项目的现代服务器端 Java 模板引擎。</p></li><li><p>Spring 官方支持的服务的渲染模板中，并不包含 <code>jsp</code> 。而是 <code>Thymeleaf</code> 和 <code>Freemarker</code> 等，而 <code>Thymeleaf</code>与 <code>SpringMVC</code> 的视图技术，及 <code>SpringBoot</code> 的自动化配置集成非常完美，几乎没有任何成本，你只用关注 <code>Thymeleaf</code> 的语法即可。</p></li></ul><blockquote><p>特点</p></blockquote><ul><li><strong>动静结合</strong>：Thymeleaf 在有网络和无网络的环境下皆可运行，即它可以让<strong>美工在浏览器</strong>查看页面的<strong>静态效果</strong>，也可以让<strong>程序员在服务器</strong>查看带数据的<strong>动态页面效果</strong>。这是由于它支持 html 原型，然后在 html 标签里增加额外的属性来达到<strong>模板+数据</strong>的展示方式。浏览器解释 html 时会忽略未定义的标签属性，所以 thymeleaf 的模板可以静态地运行；当有数据返回到页面时，Thymeleaf 标签会动态地替换掉静态内容，使页面动态显示。</li><li><strong>开箱即用</strong>：它提供标准和 spring 标准两种方言，可以直接套用模板实现 JSTL、 OGNL表达式效果，避免每天套模板、改 jstl 、改标签的困扰。同时开发人员也可以扩展和创建自定义的方言。</li><li><strong>多方言支持</strong>：Thymeleaf 提供 spring 标准方言和一个与 SpringMVC 完美集成的可选模块，可以快速的实现表单绑定、属性编辑器、国际化等功能。</li><li><strong>与SpringBoot完美整合</strong>：SpringBoot 提供了 Thymeleaf 的默认配置，并且为 Thymeleaf 设置了视图解析器，我们可以像以前操作 jsp 一样来操作 Thymeleaf。代码几乎没有任何区别，就是在<strong>模板语法上有区别</strong>。</li></ul><h3 id="5-2快速使用"><a href="#5-2快速使用" class="headerlink" title="5.2快速使用"></a>5.2快速使用</h3><ol><li><strong>maven导入</strong></li></ol><pre class=" language-xml"><code class="language-xml">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-thymeleaf<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><ol start="2"><li><strong>默认配置</strong></li></ol><p><img src="https://s1.ax1x.com/2020/03/12/8VfADf.png" alt="8VfADf.png"></p><ul><li>默认前缀：<code>classpath:/templates/</code></li><li>默认后缀：<code>.html</code></li></ul><blockquote><p>所以如果我们返回视图：<code>users</code>，会指向到 <code>classpath:/templates/users.html</code></p></blockquote><ul><li>Thymeleaf <strong>默认会开启页面缓存</strong>，提高页面并发能力。但会导致我们修改页面不会立即被展现，因此我们关闭缓存：</li></ul><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true"># 关闭Thymeleaf的缓存</span><span class="token attr-name">spring.thymeleaf.cache</span><span class="token punctuation">=</span><span class="token attr-value">false</span></code></pre><ul><li><strong>另外，修改完毕页面，需要使用快捷键：<code>Ctrl + Shift + F9</code>来刷新工程。</strong></li></ul><ol start="3"><li><strong>编写 Controller</strong></li></ol><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"show1"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">show1</span><span class="token punctuation">(</span>Model model<span class="token punctuation">)</span><span class="token punctuation">{</span>        model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span> <span class="token string">"Hello, Thymeleaf!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ol start="4"><li><strong>编写html</strong></li></ol><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>th</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.thymeleaf.org<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${msg}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>大家好<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><blockquote><p><strong>注意</strong>，把html 的名称空间，改成：<code>xmlns:th="http://www.thymeleaf.org"</code> ，会有语法提示</p></blockquote><h3 id="5-3基本语法"><a href="#5-3基本语法" class="headerlink" title="5.3基本语法"></a>5.3基本语法</h3><p>​    更多的语法参考：<a href="https://fanlychie.github.io/post/thymeleaf.html" target="_blank" rel="noopener">https://fanlychie.github.io/post/thymeleaf.html</a></p><h4 id="5-3-1变量"><a href="#5-3-1变量" class="headerlink" title="5.3.1变量"></a>5.3.1变量</h4><blockquote><p>示例：</p></blockquote><p>​    我们在页面获取user数据：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>    欢迎您：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${user.name}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>请登录<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></code></pre><blockquote><p>语法说明：</p></blockquote><ul><li><p>Thymeleaf 通过<code>${}</code>来获取model中的变量，注意这不是 <code>el</code> 表达式，而是 <code>ognl</code> 表达式，但是语法非常像。</p></li><li><p>感觉跟el表达式几乎是一样的。不过区别在于，我们的表达式写在一个名为：<code>th:text</code>的标签属性中，这个叫做<code>指令</code></p></li></ul><h5 id="动静结合"><a href="#动静结合" class="headerlink" title="动静结合"></a><strong>动静结合</strong></h5><p><a href="https://imgchr.com/i/8VIZyn" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/03/12/8VIZyn.png" alt="8VIZyn.png"></a></p><blockquote><p>指令：</p></blockquote><ul><li>Thymeleaf崇尚<code>自然模板</code>，意思就是模板是纯正的 html 代码，脱离模板引擎，在纯静态环境也可以直接运行。现在如果我们直接在 html 中编写 <code>${}</code> 这样的表达式，显然在静态环境下就会出错，这不符合 Thymeleaf 的理念。</li></ul><ul><li>Thymeleaf中所有的表达式都需要写在<code>指令</code>中，指令是HTML5中的自定义属性，在 Thymeleaf 中所有指令都是以<code>th:</code>开头。因为表达式<code>${user.name}</code>是写在自定义属性中，因此在静态环境下，表达式的内容会被当做是普通字符串，浏览器会自动忽略这些指令，这样就不会报错了！</li></ul><blockquote><p>说明</p></blockquote><ul><li>静态页面中，<code>th</code>指令不被识别，但是浏览器也不会报错，把它当做一个普通属性处理。这样<code>span</code>的默认值<code>请登录</code>就会展现在页面</li><li>如果是在 Thymeleaf 环境下，<code>th</code>指令就会被识别和解析，而<code>th:text</code>的含义就是替<strong>换所在标签中的文本内容</strong>，于是<code>user.name</code>的值就替代了 <code>span</code>中默认的请登录</li></ul><blockquote><p>向下兼容</p></blockquote><ul><li>但是要注意，如果浏览器不支持Html5怎么办？</li><li>如果不支持这种 <code>th:</code> 的命名空间写法，那么可以把<code>th:text</code>换成 <code>data-th-text</code>，Thymeleaf 也可以兼容。</li></ul><blockquote><p>escape</p></blockquote><ul><li>另外，<code>th:text</code>指令出于安全考虑，会把表达式读取到的值进行处理，防止html的注入。</li></ul><ul><li>例如，<code>&lt;p&gt;你好&lt;/p&gt;</code> 将会被格式化输出为<code>$lt;p$gt;你好$lt;/p$lt;</code>。</li></ul><p><strong>如果想要不进行格式化输出，而是要输出原始内容，则使用<code>th:utext</code>来代替.</strong></p><blockquote><p><strong>ognl 表达式的语法糖</strong></p></blockquote><ul><li>刚才获取变量值，我们使用的是经典的<code>对象.属性名</code>方式。但有些情况下，我们的<strong>属性名可能本身也是变量</strong>，怎么办？</li></ul><ul><li>ognl 提供了类似 js 的语法方式：<ul><li>例如：<code>${user.name}</code> 可以写作 <code>${user['name']}</code></li></ul></li></ul><h4 id="5-3-2自定义变量"><a href="#5-3-2自定义变量" class="headerlink" title="5.3.2自定义变量"></a>5.3.2自定义变量</h4><blockquote><p>场景</p></blockquote><p>看下面的案例：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Name: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${user.name}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Jack<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Age: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${user.age}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>21<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>friend: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${user.friend.name}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Rose<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span></code></pre><p>我们获取用户的所有信息，分别展示。</p><p>当数据量比较多的时候，频繁的写<code>user.</code>就会非常麻烦。</p><p>因此，Thymeleaf提供了自定义变量来解决：</p><blockquote><p>示例：</p></blockquote><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name"><span class="token namespace">th:</span>object</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${user}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Name: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>*{name}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Jack<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Age: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>*{age}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>21<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>friend: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>*{friend.name}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Rose<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span></code></pre><ul><li>首先在 <code>h2</code>上 用 <code>th:object="${user}"</code>获取user的值，并且保存</li><li>然后，在<code>h2</code>内部的任意元素上，可以通过 <code>*{属性名}</code>的方式，来获取user中的属性，这样就省去了大量的<code>user.</code>前缀了</li></ul><blockquote><p>总结</p></blockquote><table><thead><tr><th align="center">语法</th><th align="center">名称</th><th align="center">描述</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">${…}</td><td align="center">Variable Expressions</td><td align="center">变量表达式</td><td align="center">取出上下文变量的值</td></tr><tr><td align="center">*{…}</td><td align="center">Selection Variable Expressions</td><td align="center">选择变量表达式</td><td align="center">取出选择的对象的属性值</td></tr><tr><td align="center">#{…}</td><td align="center">Message Expressions</td><td align="center">消息表达式</td><td align="center">使文字消息国际化，I18N</td></tr><tr><td align="center">@{…}</td><td align="center">Link URL Expressions</td><td align="center">链接表达式</td><td align="center">用于表示各种超链接地址</td></tr><tr><td align="center">~{…}</td><td align="center">Fragment Expressions</td><td align="center">片段表达式</td><td align="center">引用一段公共的代码片段</td></tr></tbody></table><h4 id="5-3-3方法"><a href="#5-3-3方法" class="headerlink" title="5.3.3方法"></a>5.3.3方法</h4><blockquote><p>ognl 表达式中的方法调用</p></blockquote><p>ognl 表达式本身就支持方法调用，例如：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name"><span class="token namespace">th:</span>object</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${user}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>FirstName: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>*{name.split(<span class="token punctuation">'</span> <span class="token punctuation">'</span>)[0]}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Jack<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>LastName: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>*{name.split(<span class="token punctuation">'</span> <span class="token punctuation">'</span>)[1]}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Li<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span></code></pre><ul><li>这里我们调用了 <code>name</code>（是一个字符串）的 <code>split</code> 方法。</li></ul><blockquote><p>Thymeleaf 内置对象</p></blockquote><p>Thymeleaf 中提供了一些内置对象，并且在这些对象中提供了一些方法，方便我们来调用。获取这些对象，需要使用<code>#对象名</code>来引用。</p><ul><li><strong>一些环境相关对象</strong></li></ul><table><thead><tr><th align="center">对象</th><th align="left">作用</th></tr></thead><tbody><tr><td align="center"><code>#ctx</code></td><td align="left">获取 Thymeleaf 自己的 Context 对象</td></tr><tr><td align="center"><code>#requset</code></td><td align="left">如果是 web 程序，可以获取 HttpServletRequest 对象</td></tr><tr><td align="center"><code>#response</code></td><td align="left">如果是 web 程序，可以获取 HttpServletReponse 对象</td></tr><tr><td align="center"><code>#session</code></td><td align="left">如果是 web 程序，可以获取 HttpSession 对象</td></tr><tr><td align="center"><code>#servletContext</code></td><td align="left">如果是 web 程序，可以获取 HttpServletContext 对象</td></tr></tbody></table><ul><li><strong>Thymeleaf 提供的全局对象：</strong></li></ul><table><thead><tr><th align="center">对象</th><th align="left">作用</th></tr></thead><tbody><tr><td align="center"><code>#dates</code></td><td align="left">处理 java.util.date 的工具对象</td></tr><tr><td align="center"><code>#calendars</code></td><td align="left">处理 java.util.calendar 的工具对象</td></tr><tr><td align="center"><code>#numbers</code></td><td align="left">用来对数字格式化的方法</td></tr><tr><td align="center"><code>#strings</code></td><td align="left">用来处理字符串的方法</td></tr><tr><td align="center"><code>#bools</code></td><td align="left">用来判断布尔值的方法</td></tr><tr><td align="center"><code>#arrays</code></td><td align="left">用来护理数组的方法</td></tr><tr><td align="center"><code>#lists</code></td><td align="left">用来处理 List 集合的方法</td></tr><tr><td align="center"><code>#sets</code></td><td align="left">用来处理 set 集合的方法</td></tr><tr><td align="center"><code>#maps</code></td><td align="left">用来处理 map 集合的方法</td></tr></tbody></table><blockquote><p>举例</p></blockquote><p>我们在环境变量中添加日期类型对象</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"show3"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">show3</span><span class="token punctuation">(</span>Model model<span class="token punctuation">)</span><span class="token punctuation">{</span>    model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"today"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"show3"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>在页面中处理</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>  今天是: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${#dates.format(today,<span class="token punctuation">'</span>yyyy-MM-dd<span class="token punctuation">'</span>)}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>2018-04-25<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></code></pre><h4 id="5-3-4字面值"><a href="#5-3-4字面值" class="headerlink" title="5.3.4字面值"></a>5.3.4字面值</h4><p>有的时候，我们需要在指令中<strong>填写基本类型</strong>如：字符串、数值、布尔等，并<strong>不希望被</strong> Thymeleaf 解析为变量，这个时候称为字面值。</p><blockquote><p><strong>字符串字面值</strong></p></blockquote><p>使用一对<code>'</code>引用的内容就是字符串字面值了：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>  你正在观看 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">'</span>thymeleaf<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>template<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span> 的字符串常量值.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></code></pre><ul><li><code>th:text</code>中的thymeleaf并不会被认为是变量，而是一个字符串</li></ul><blockquote><p><strong>数字字面值</strong></p></blockquote><p>数字不需要任何特殊语法， 写的什么就是什么，而且可以<strong>直接进行算术运算</strong></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>今年是 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2018<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>1900<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>两年后将会是 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2018 + 2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>1902<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></code></pre><blockquote><p><strong>布尔字面值</strong></p></blockquote><ul><li>布尔类型的字面值是 true 或 false</li><li>这里引用了一个<code>th:if</code>指令，跟vue中的<code>v-if</code>类似</li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    你填的是true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><h4 id="5-3-5拼接"><a href="#5-3-5拼接" class="headerlink" title="5.3.5拼接"></a>5.3.5拼接</h4><p>我们经常会用到普通字符串与表达式拼接的情况：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">'</span>欢迎您:<span class="token punctuation">'</span> + ${user.name} + <span class="token punctuation">'</span>!<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span></code></pre><p>字符串字面值需要用<code>''</code>，拼接起来非常麻烦，Thymeleaf对此进行了简化，<strong>使用一对<code>|</code>即可</strong>：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>|欢迎您:${user.name}|<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span></code></pre><p>与上面是完全等效的，这样就省去了字符串字面值的书写。</p><h4 id="5-3-6运算"><a href="#5-3-6运算" class="headerlink" title="5.3.6运算"></a>5.3.6运算</h4><p>需要注意：<code>${}</code>内部的是通过 OGNL 表达式引擎解析的，外部的才是通过 Thymeleaf 的引擎解析，因此运算符尽量放在<code>${}</code>外进行。</p><blockquote><p><strong>算术运算</strong></p></blockquote><p>支持的算术运算符：<code>+ - * / %</code></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${user.age}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${user.age}%2 <span class="token punctuation">=</span><span class="token punctuation">=</span> 0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span></code></pre><blockquote><p><strong>比较运算</strong></p></blockquote><p>支持的比较运算：<code>&gt;</code>, <code>&lt;</code>, <code>&gt;=</code> and <code>&lt;=</code>  ，但是<code>&gt;</code>, <code>&lt;</code>不能直接使用，因为xml会解析为标签，要使用别名。</p><p>注意 <code>==</code> and <code>!=</code>不仅可以比较数值，类似于equals的功能。</p><p>可以使用的别名：<code>gt (&gt;), lt (&lt;), ge (&gt;=), le (&lt;=), not (!). Also eq (==), neq/ne (!=).</code></p><blockquote><p><strong>条件运算</strong></p></blockquote><ul><li>三元运算</li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${user.sex} ? <span class="token punctuation">'</span>男<span class="token punctuation">'</span>:<span class="token punctuation">'</span>女<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span></code></pre><p>​    三元运算符的三个部分：<code>conditon ? then : else</code></p><ol><li><p><code>condition</code>：条件</p></li><li><p><code>then</code>：条件成立的结果</p></li><li><p><code>else</code>：不成立的结果</p><p>其中的每一个部分都可以是 Thymeleaf 中的任意表达式。</p></li></ol><ul><li>默认值</li></ul><p>有的时候，我们取一个值可能为空，这个时候需要做非空判断，可以使用 <code>表达式 ?: 默认值</code> 简写：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${user.name} ?: <span class="token punctuation">'</span>二狗<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span></code></pre><ul><li>注意：<code>?:</code> 之间没有空格。当前面的表达式值为 null 时，就会<strong>使用后面的默认值。</strong></li></ul><h4 id="5-3-7循环"><a href="#5-3-7循环" class="headerlink" title="5.3.7循环"></a>5.3.7循环</h4><p>循环也是非常频繁使用的需求，我们使用<code>th:each</code>指令来完成：</p><p>假如有用户的集合：users 在 Context 中。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span> <span class="token attr-name"><span class="token namespace">th:</span>each</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user : ${users}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${user.name}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Onions<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${user.age}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>2.41<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span></code></pre><ul><li><code>${users}</code> 是要遍历的集合，可以是以下类型：<ul><li>Iterable，实现了Iterable接口的类</li><li>Enumeration，枚举</li><li>Interator，迭代器</li><li>Map，遍历得到的是Map.Entry</li><li>Array，数组及其它一切符合数组结果的对象</li></ul></li></ul><p><strong>在迭代的同时，我们也可以获取迭代的状态对象：</strong></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span> <span class="token attr-name"><span class="token namespace">th:</span>each</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user,stat : ${users}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${user.name}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Onions<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${user.age}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>2.41<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span></code></pre><p><strong>状态对象（stat）包含以下属性：</strong></p><ul><li>index，从0开始的角标</li><li>count，元素的个数，从1开始</li><li>size，总元素个数</li><li>current，当前遍历到的元素</li><li>even / odd，返回是否为奇偶，boolean值</li><li>first / last，返回是否为第一或最后，boolean值</li></ul><h4 id="5-3-8逻辑判断"><a href="#5-3-8逻辑判断" class="headerlink" title="5.3.8逻辑判断"></a>5.3.8逻辑判断</h4><p>有了<code>if和else</code>，我们能实现一切功能^_^。</p><p>Thymeleaf 中使用<code>th:if</code> 或者 <code>th:unless</code> ，两者的意思恰好相反。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${user.age} &lt; 24<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>小鲜肉<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span></code></pre><p><strong>如果表达式的值为 true，则标签会渲染到页面，否则不进行渲染。</strong></p><p>以下情况被认定为 true：</p><ul><li>表达式值为 true</li><li>表达式值为非0数值</li><li>表达式值为非0字符</li><li>表达式值为字符串，但不是<code>"false"</code>,<code>"no"</code>,<code>"off"</code></li><li>表达式不是布尔、字符串、数字、字符中的任何一种</li></ul><p><strong>其它情况包括 null 都被认定为false</strong></p><h4 id="5-3-9分支判断"><a href="#5-3-9分支判断" class="headerlink" title="5.3.9分支判断"></a>5.3.9分支判断</h4><p>这里要使用两个指令：<code>th:switch</code> 和 <code>th:case</code></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>switch</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${user.role}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>case</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">'</span>admin<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>用户是管理员<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>case</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">'</span>manager<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>用户是经理<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>case</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>*<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>用户是别的玩意<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>需要注意的是，一旦有一个<code>th:case</code> 成立，<strong>其它的则不再判断</strong>。与 java 中的 switch 是一样的。</p><p>另外 <code>th:case="*"</code> 表示默认，放最后。</p><h4 id="5-3-10-JS模板"><a href="#5-3-10-JS模板" class="headerlink" title="5.3.10 JS模板"></a>5.3.10 JS模板</h4><p>模板引擎不仅可以渲染 html，也可以对 JS 中的进行预处理。而且为了在纯静态环境下可以运行，其 Thymeleaf 代码可以被注释起来：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name"><span class="token namespace">th:</span>inline</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token comment" spellcheck="true">/*[[${user}]]*/</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> age <span class="token operator">=</span> <span class="token comment" spellcheck="true">/*[[${user.age}]]*/</span> <span class="token number">20</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><ul><li><p>在script标签中通过<code>th:inline="javascript"</code>来声明这是要特殊处理的 js 脚本</p></li><li><p>语法结构：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token comment" spellcheck="true">/*[[Thymeleaf表达式]]*/</span> <span class="token string">"静态环境下的默认值"</span><span class="token punctuation">;</span></code></pre></li></ul><blockquote><p>因为Thymeleaf被注释起来，因此即便是静态环境下， js代码也不会报错，而是采用表达式后面跟着的默认值。</p><p>即若后台有传输数据过来，则直接赋值给user对象，若没有，则赋值后面的默认值。</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web（一）</title>
      <link href="/2020/03/09/web-yi/"/>
      <url>/2020/03/09/web-yi/</url>
      
        <content type="html"><![CDATA[<h1 id="Web（一）"><a href="#Web（一）" class="headerlink" title="Web（一）"></a>Web（一）</h1><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>​    目的：简要的复习web前端知识</p><p>​    主参考链接：<a href="https://www.w3school.com.cn/" target="_blank" rel="noopener">https://www.w3school.com.cn/</a></p><p>[TOC]</p><h2 id="1-Web概述"><a href="#1-Web概述" class="headerlink" title="1.Web概述"></a>1.Web概述</h2><h3 id="1-1软件架构"><a href="#1-1软件架构" class="headerlink" title="1.1软件架构"></a>1.1软件架构</h3><ol><li><p>C/S: Client/Server  <strong>客户端/服务器端</strong></p><ul><li><p>在用户本地有一个客户端程序，在远程有一个服务器端程序</p><p>如：QQ，迅雷…</p><ul><li><p>优点：</p><p>​    用户体验好</p></li><li><p>缺点：</p><p>​    开发、安装，部署，维护 麻烦</p></li></ul></li></ul></li><li><p>B/S: Browser/Server <strong>浏览器/服务器端</strong></p><ul><li>只需要一个浏览器，用户通过不同的网址(URL)，客户访问不同的服务器端程序<ul><li>优点：开发、安装，部署，维护 简单</li><li>缺点：<ol><li>如果应用过大，用户的体验可能会受到影响</li><li>对硬件要求过高<h3 id="1-2B-S架构详解"><a href="#1-2B-S架构详解" class="headerlink" title="1.2B/S架构详解"></a>1.2B/S架构详解</h3></li></ol></li></ul></li></ul></li></ol><ul><li><p>资源分类：    </p><ul><li><p>静态资源：使用静态网页开发技术发布的资源。</p><ul><li>特点：<ul><li>所有用户访问，得到的结果是一样的。</li><li>如：文本，图片，音频、视频, <strong>HTML,CSS,JavaScript…</strong></li></ul><ul><li>如果用户请求的是静态资源，那么服务器会直接将静态资源发送给浏览器。浏览器中内置了静态资源的解析引擎，可以展示静态资源</li></ul></li></ul></li><li><p>动态资源：使用动态网页及时发布的资源。</p><p>特点：</p><ul><li>所有用户访问，得到的结果可能不一样。</li><li>如：<strong>jsp/servlet,php,asp…</strong></li><li>如果用户请求的是动态资源，那么服务器会执行动态资源，转换为静态资源，再发送给浏览器</li></ul></li></ul></li></ul><h2 id="2-HTML基础"><a href="#2-HTML基础" class="headerlink" title="2.HTML基础"></a>2.HTML基础</h2><h3 id="2-1概述"><a href="#2-1概述" class="headerlink" title="2.1概述"></a>2.1概述</h3><ul><li><p>概念：是最基础的网页开发语言    </p><p>Hyper Text Markup Language <strong>超文本标记语言</strong></p></li><li><p>超文本:</p><p>​    超文本是用超链接的方法，将各种不同空间的文字信息组织在一起的网状文本.</p><ul><li><p>标记语言:</p><p>​    由标签构成的语言。&lt;标签名称&gt; 如 html，xml</p><p> ​    <strong>标记语言不是编程语言</strong>。</p></li></ul></li></ul><h3 id="2-2快速入门"><a href="#2-2快速入门" class="headerlink" title="2.2快速入门"></a>2.2快速入门</h3><p><strong>语法</strong>：</p><ol><li><p><strong>html文档后缀名</strong> .html 或者 .htm</p><ol start="2"><li><p><strong>标签分为</strong></p><ul><li><strong>围堵标签</strong>：有开始标签和结束标签。如 <code>&lt;html&gt; &lt;/html&gt;</code></li></ul></li></ol></li></ol><ul><li><strong>自闭和标签</strong>：开始标签和结束标签在一起。如 <code>&lt;br/&gt;</code></li></ul><ol start="3"><li><p>标签可以嵌套：</p><p>需要正确嵌套，<strong>不能你中有我，我中有你</strong></p><ul><li>错误：<code>&lt;a&gt;&lt;b&gt;&lt;/a&gt;&lt;/b&gt;</code></li><li>正确：<code>&lt;a&gt;&lt;b&gt;&lt;/b&gt;&lt;/a&gt;</code></li></ul></li><li><p>在开始标签中可以定义属性。属性是由<strong>键值对</strong>构成，值需要用<strong>引号(单双都可)</strong>引起来</p><ol start="4"><li>html的标签不区分大小写，但是<strong>建议使用小写</strong>。</li></ol></li></ol><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>FONT</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>red<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>Hello World<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>green<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>Hello World<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>    </code></pre><h3 id="2-3标签学习（部分）"><a href="#2-3标签学习（部分）" class="headerlink" title="2.3标签学习（部分）"></a>2.3标签学习（部分）</h3><h4 id="2-3-1文件标签："><a href="#2-3-1文件标签：" class="headerlink" title="2.3.1文件标签："></a>2.3.1<strong>文件标签</strong>：</h4><p>构成html最基本的标签</p><ul><li><code>&lt;html&gt;</code>  : html文档的根标签</li><li><code>&lt;head&gt;</code>：头标签。用于指定html文档的一些属性。引入外部的资源</li><li><code>&lt;title&gt;</code>：标题标签。</li><li><code>&lt;body&gt;</code>：体标签</li><li><code>&lt;!DOCTYPE html&gt;</code>：html5中定义该文档是html文档。</li></ul><h4 id="2-3-2文本标签："><a href="#2-3-2文本标签：" class="headerlink" title="2.3.2文本标签："></a>2.3.2<strong>文本标签</strong>：</h4><ul><li>注释：<code>&lt;!-- 注释内容 --&gt;</code></li><li><code>&lt;h1&gt; to &lt;h6&gt;</code>：标题标签。 h1~h6:字体大小逐渐递减</li></ul><ul><li><p><code>&lt;p&gt;</code>：段落标签</p></li><li><p><code>&lt;br&gt;</code>：换行标签</p></li><li><p><code>&lt;hr&gt;</code>：展示一条水平线</p><ul><li><p>属性：</p><ul><li><p>color：颜色</p></li><li><p>width：宽度</p></li><li><p>size：高度</p></li><li><p>align：对其方式</p><p>center：居中；left：左对齐；right：右对齐</p></li></ul></li></ul></li><li><p><code>&lt;b&gt;</code>：字体加粗</p></li><li><p><code>&lt;i&gt;</code>：字体斜体</p></li><li><p><code>&lt;font&gt;</code>:字体标签</p></li><li><p><code>&lt;center&gt;</code>:文本居中</p><ul><li>属性：<br>color：颜色；size：大小； face：字体</li></ul></li></ul><blockquote><p><strong>属性定义</strong>：</p></blockquote><ul><li>color：<pre><code>      1. 英文单词：red , green , blue</code></pre><ol start="2"><li>rgb(值1，值2，值3)：值的范围：0~255  如  <code>rgb(0,0,255)</code></li><li>#值1值2值3：值的范围：00~FF之间。如： <code>#FF00FF</code></li></ol></li><li>width：<ol><li>数值：width=’20’ ,数值的单位，默认是 px(像素)</li><li>数值%：占比相对于父元素的比例</li></ol></li></ul><h4 id="2-3-3图片标签："><a href="#2-3-3图片标签：" class="headerlink" title="2.3.3图片标签："></a>2.3.3<strong>图片标签</strong>：</h4><ul><li><p><code>&lt;img&gt;</code>：展示图片</p><ul><li><p>属性：</p><p> src：指定图片的位置</p></li></ul></li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>image/jingxuan_2.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>古镇<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>500<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>500<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span> <span class="token comment" spellcheck="true">&lt;!--相对路径        * 以.开头的路径            * ./：代表当前目录  ./image/1.jpg            * ../:代表上一级目录             --></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./image/jiangwai_1.jpg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../image/jiangwai_1.jpg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><h4 id="2-3-4列表标签："><a href="#2-3-4列表标签：" class="headerlink" title="2.3.4列表标签："></a>2.3.4<strong>列表标签</strong>：</h4><ul><li><p>无序列表：</p><pre class=" language-html"><code class="language-html"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>Coffee<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>Milk<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span></code></pre></li><li><p>有序列表：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ol</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>Coffee<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>Milk<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ol</span><span class="token punctuation">></span></span></code></pre></li></ul><h4 id="2-3-5链接标签："><a href="#2-3-5链接标签：" class="headerlink" title="2.3.5链接标签："></a>2.3.5<strong>链接标签</strong>：</h4><ul><li><p><code>&lt;a&gt;</code>:定义一个超链接</p><ul><li><p>属性：</p><ol><li>href：指定访问资源的URL(统一资源定位符)</li><li>target：指定打开资源的方式</li></ol><ul><li><p>_self:默认值，在当前页面打开</p></li><li><p>_blank：在空白页面打开</p></li></ul></li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.itcast.cn<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>点我<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></code></pre></li></ul><h4 id="2-3-6-div和span："><a href="#2-3-6-div和span：" class="headerlink" title="2.3.6 div和span："></a>2.3.6 <strong>div和span</strong>：</h4><ul><li><code>&lt;div&gt;</code>:每一个div占满一整行。块级标签(自动换行)</li><li><code>&lt;span&gt;</code>：文本信息在一行展示。行内标签 内联标签（不会换行）</li></ul><h4 id="2-3-7语义化标签："><a href="#2-3-7语义化标签：" class="headerlink" title="2.3.7语义化标签："></a>2.3.7<strong>语义化标签</strong>：</h4><p>html5中为了提高程序的可读性，提供了一些标签。</p><ul><li><p><code>&lt;header&gt;</code>：页眉</p></li><li><p><code>&lt;footer&gt;</code>：页脚</p></li></ul><h4 id="2-3-8表格标签："><a href="#2-3-8表格标签：" class="headerlink" title="2.3.8表格标签："></a>2.3.8<strong>表格标签</strong>：</h4><ul><li><code>&lt;table&gt;</code>：定义表格<pre><code>  * width：宽度</code></pre><ul><li>border：边框</li><li>cellpadding：定义内容和单元格的距离</li><li>cellspacing：定义单元格之间的距离。如果指定为0，则单元格的线会合为一条、</li><li>bgcolor：背景色</li><li>align：对齐方式</li></ul></li><li><code>&lt;tr&gt;</code>：定义行<ul><li>bgcolor：背景色</li><li>align：对齐方式</li></ul></li><li><code>&lt;td&gt;</code>：定义单元格<ul><li>colspan：合并列</li><li>rowspan：合并行</li></ul></li><li><code>&lt;th&gt;</code>：定义表头单元格</li><li><code>&lt;caption&gt;</code>：表格标题</li><li><code>&lt;thead&gt;</code>：表示表格的头部分</li><li><code>&lt;tbody&gt;</code>：表示表格的体部分</li><li><code>&lt;tfoot&gt;</code>：表示表格的脚部分</li></ul><h3 id="2-4表单标签"><a href="#2-4表单标签" class="headerlink" title="2.4表单标签"></a>2.4表单标签</h3><h4 id="2-4-1表单："><a href="#2-4-1表单：" class="headerlink" title="2.4.1表单："></a>2.4.1表单：</h4><ul><li>概念：用于采集用户输入的数据的。用于和服务器进行交互。<ul><li><code>&lt;form&gt;</code>：用于定义表单的。可以定义一个范围，范围代表采集用户数据的范围</li></ul></li></ul><blockquote><p>属性：</p></blockquote><ul><li>action：指定提交数据的URL</li><li>method:指定提交方式</li></ul><blockquote><p>分类：一共7种，2种比较常用。</p></blockquote><ul><li>get：<ol><li><strong>请求参数会在地址栏中显示</strong>。会封装到请求行中。</li><li>请求参数大小是有限制的。</li><li>不太安全。</li></ol></li><li>post：<ol start="2"><li><strong>请求参数不会再地址栏中显示</strong>。会封装在请求体中。</li><li>请求参数的大小没有限制。</li><li>较为安全。</li></ol></li><li>其它：HEAD、 PUT、DELETE、OPTIONS、TRACE</li></ul><blockquote><p>表单项中的数据要想被提交：<strong>必须指定其name属性</strong></p></blockquote><h4 id="2-4-2表单项标签："><a href="#2-4-2表单项标签：" class="headerlink" title="2.4.2表单项标签："></a>2.4.2表单项标签：</h4><ul><li><code>&lt;input&gt;</code>：可以通过type属性值，改变元素展示的样式</li></ul><blockquote><p><strong>type属性</strong>：</p></blockquote><ul><li><p><strong>text</strong>：文本输入框，默认值</p><p>​    *placeholder：指定输入框的提示信息，当输入框的内容发生变化，会自动清空提示信息    </p></li><li><p><strong>password</strong>：密码输入框</p></li><li><p><strong>radio</strong>:单选框</p></li></ul><blockquote><p>注意：</p></blockquote><ol><li><p>要想让多个单选框实现单选的效果，则多个单选框的<strong>name属性值必须一样</strong>。</p></li><li><p>一般会给每一个单选框提供value属性，指定其被选中后提交的值</p></li><li><p>checked属性，可以指定默认值。如下，默认为male</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>male<span class="token punctuation">"</span></span> <span class="token attr-name">checked</span><span class="token punctuation">></span></span>Male<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>female<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Female<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span> </code></pre></li></ol><ul><li><strong>checkbox</strong>：复选框</li></ul><blockquote><p>注意：</p></blockquote><ol><li>一般会<strong>给每一个单选框提供value属性</strong>，指定其被选中后提交的值</li><li><strong>checked属性</strong>，可以指定默认值</li></ol><ul><li><p><strong>file</strong>：文件选择框</p></li><li><p><strong>hidden</strong>：隐藏域，用于提交一些信息。</p></li><li><p><strong>label</strong>：指定输入项的文字描述信息</p></li></ul><blockquote><p>注意：label的for属性一般会和 input 的 id属性值 对应。如果对应了，则点击label区域，会让input输入框获取焦点。</p></blockquote><ul><li><p><strong>按钮类</strong>：</p><ol><li><strong>submit</strong>：提交按钮。可以提交表单</li><li><strong>button</strong>：普通按钮</li><li><strong>image</strong>：图片提交按钮</li></ol></li><li><p><code>&lt;select&gt;</code>: 下拉列表</p><p>​    子元素：option，指定列表项</p></li><li><p><code>&lt;textarea&gt;</code>：文本域</p><ul><li><p>cols：指定列数，每一行有多少个字符</p></li><li><p>rows：默认多少行。</p></li></ul></li></ul><h2 id="3-CSS基础"><a href="#3-CSS基础" class="headerlink" title="3.CSS基础"></a>3.CSS基础</h2><h3 id="3-1概述"><a href="#3-1概述" class="headerlink" title="3.1概述"></a>3.1概述</h3><ul><li>概念： Cascading Style Sheets 层叠样式表</li></ul><ul><li>层叠：多个样式可以作用在同一个html的元素上，同时生效</li><li>好处：<ol><li>功能强大</li><li>将内容展示和样式控制分离<ul><li>降低耦合度。解耦</li><li>让分工协作更容易</li><li>提高开发效率</li></ul></li></ol></li></ul><h3 id="3-2CSS的使用"><a href="#3-2CSS的使用" class="headerlink" title="3.2CSS的使用"></a>3.2CSS的使用</h3><h4 id="3-2-1CSS与html结合方式"><a href="#3-2-1CSS与html结合方式" class="headerlink" title="3.2.1CSS与html结合方式"></a>3.2.1CSS与html结合方式</h4><ol><li><p><strong>内联样式</strong></p><ul><li><p>在标签内使用style属性指定css代码</p></li><li><p>如：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">color</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>hello css<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre></li></ul></li><li><p><strong>内部样式</strong></p><ul><li><p>在<strong>head标签内</strong>，定义style标签，style标签的标签体内容就是css代码</p></li><li><p>如：</p><pre class=" language-html"><code class="language-html">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">                <span class="token selector">div</span><span class="token punctuation">{</span>                    <span class="token property">color</span><span class="token punctuation">:</span>blue<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>hello css<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre></li></ul></li><li><p><strong>外部样式</strong></p><ol><li><p>定义css资源文件。</p></li><li><p>在head标签内，定义link标签，引入外部的资源文件</p><ul><li><p>如：    </p><pre class=" language-css"><code class="language-css"> <span class="token selector">a<span class="token class">.css</span>文件：                                div</span><span class="token punctuation">{</span>                    <span class="token property">color</span><span class="token punctuation">:</span>green<span class="token punctuation">;</span>                    <span class="token punctuation">}</span></code></pre><pre class=" language-html"><code class="language-html">            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>css/a.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>hello css<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>hello css<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre></li></ul></li></ol></li></ol><blockquote><p><strong>注意</strong>：</p></blockquote><ul><li><p>1,2,3种方式 css作用范围越来越大</p></li><li><p>1方式不常用，后期常用2,3</p></li><li><p>3的格式可以写为：</p><pre class=" language-html"><code class="language-html">            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">                <span class="token atrule"><span class="token rule">@import</span> <span class="token string">"css/a.css"</span><span class="token punctuation">;</span></span>            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>3.2.2 css语法</code></pre></li></ul><h4 id="3-2-2-css语法"><a href="#3-2-2-css语法" class="headerlink" title="3.2.2 css语法"></a>3.2.2 css语法</h4><ul><li><p><strong>格式：</strong>    </p><pre><code>   选择器 {            属性名1:属性值1;          属性名2:属性值2;                ...                    }    </code></pre><pre><code>    - **选择器 : 筛选具有相似特征的元素**  -  注意： 每一对属性需要使用`；`隔开，最后一对属性可以不加。</code></pre></li><li><p><strong>记得写引号</strong></p><p><strong>提示：</strong>如果值为若干单词，则要给值加引号<code>：</code></p><ul><li><code>p {font-family: "sans serif";}</code></li></ul></li><li><p><strong>值的不同写法和单位</strong></p><ol><li>除了英文单词 red，我们还可以使用十六进制的颜色值 #ff0000：<code>p { color: #ff0000; }</code></li><li>为了节约字节，我们可以使用 CSS 的缩写形式：<code>p { color: #f00; }</code></li><li>我们还可以通过两种方法使用 RGB 值：<ul><li><code>p { color: rgb(255,0,0); }</code></li><li><code>p { color: rgb(100%,0%,0%); }</code></li></ul></li></ol><p>请注意，当使用 RGB 百分比时，即使当值为 0 时也要写百分比符号。但是在其他的情况下就不需要这么做了。比如说，当尺寸为 0 像素时，0 之后不需要使用 px 单位，因为 0 就是 0，无论单位是什么。</p></li><li><p><strong>空格和大小写</strong></p><p>大多数样式表包含不止一条规则，而大多数规则包含不止一个声明。多重声明和空格的使用使得样式表更容易被编辑：</p><pre class=" language-css"><code class="language-css"><span class="token selector">body </span><span class="token punctuation">{</span>  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#000</span><span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#fff</span><span class="token punctuation">;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">font-family</span><span class="token punctuation">:</span> Georgia, Palatino, serif<span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre></li></ul><h4 id="3-2-3选择器"><a href="#3-2-3选择器" class="headerlink" title="3.2.3选择器"></a>3.2.3选择器</h4><blockquote><p><strong>基础选择器</strong>（优先级1&gt;3&gt;2）</p></blockquote><ul><li><p>id选择器：选择具体的id属性值的元素。建议在一个html页面中<strong>id值唯一</strong></p><ul><li>语法：#id属性值{}  </li><li><code>#red {color:red;}</code></li></ul></li><li><p>元素选择器：选择具有相同<strong>标签名称</strong>的元素</p><ul><li><p>语法： 标签名称{}</p></li><li><p>注意：id选择器优先级高于元素选择器</p><pre class=" language-css"><code class="language-css"><span class="token selector">html </span><span class="token punctuation">{</span><span class="token property">color</span><span class="token punctuation">:</span>black<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ul></li><li><p>类选择器：选择具有相同的<strong>class属性值</strong>的元素。</p><ul><li><p>语法：.class属性值{}</p></li><li><p>注意：类选择器选择器优先级高于元素选择器</p><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.fancy</span> td </span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#f60</span><span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#666</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre></li></ul></li></ul><blockquote><p><strong>扩展选择器：</strong></p></blockquote><ul><li><p><strong>选择所有元素</strong></p><ul><li>语法： <code>*{}</code></li></ul></li><li><p><strong>并集选择器</strong>：选择两个</p><ul><li><p>选择器1,选择器2{}</p><pre class=" language-css"><code class="language-css"><span class="token selector">h2, p </span><span class="token punctuation">{</span><span class="token property">color</span><span class="token punctuation">:</span>gray<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ul></li><li><p><strong>ID选择器</strong>：在某些方面，ID 选择器类似于类选择器</p><ul><li><p>语法：首先，ID 选择器前面有一个 <code>#</code> 号； 也称为棋盘号或井号。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>intro<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>This is a paragraph of introduction.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></code></pre><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token id">#intro</span> </span><span class="token punctuation">{</span><span class="token property">font-weight</span><span class="token punctuation">:</span>bold<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ul></li><li><p><strong>后代选择器(包含选择器)</strong>：选择器1元素下的选择器2元素</p><ul><li><p>语法：  选择器1 选择器2{}</p><pre class=" language-css"><code class="language-css"><span class="token selector">h1 em </span><span class="token punctuation">{</span><span class="token property">color</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>This is a <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>em</span><span class="token punctuation">></span></span>important<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>em</span><span class="token punctuation">></span></span> heading<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>This is a <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>em</span><span class="token punctuation">></span></span>important<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>em</span><span class="token punctuation">></span></span> paragraph.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></code></pre></li><li><p>注意：两个元素之间的层次间隔可以是<strong>无限的</strong>，可选择任意后代</p></li></ul></li><li><p><strong>子元素选择器</strong>：只选择某个元素的子元素</p><ul><li><p>语法：  选择器1 &gt; 选择器2{}</p><pre class=" language-css"><code class="language-css"><span class="token selector">h1 > strong </span><span class="token punctuation">{</span><span class="token property">color</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>This is <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span><span class="token punctuation">></span></span>very<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>strong</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span><span class="token punctuation">></span></span>very<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>strong</span><span class="token punctuation">></span></span> important.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>This is <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>em</span><span class="token punctuation">></span></span>really <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span><span class="token punctuation">></span></span>very<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>strong</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>em</span><span class="token punctuation">></span></span> important.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></code></pre></li><li><p>拓展：结合后代选择器和子选择器</p><pre class=" language-css"><code class="language-css">table<span class="token number">.</span>company td > p</code></pre><p>上面的选择器会选择作为 td 元素子元素的所有 p 元素，这个 td 元素本身从 table 元素继承，该table元素有一个包含 company 的 class 属性。</p></li></ul></li><li><p><strong>属性选择器</strong>：选择元素名称，属性名=属性值的元素</p><ul><li><p>语法：  元素名称[属性名]{}</p><pre class=" language-css"><code class="language-css"><span class="token selector">&lt;!对有 href 属性的锚（a 元素）应用样式>    a<span class="token attribute">[href]</span> </span><span class="token punctuation">{</span><span class="token property">color</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">&lt;!将同时有 href 和 title 属性的 HTML 超链接的文本设置为红色>    a<span class="token attribute">[href]</span><span class="token attribute">[title]</span> </span><span class="token punctuation">{</span><span class="token property">color</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ul></li><li><p><strong>相邻兄弟选择器：</strong>选择紧接在另一元素后的元素（二者必须有相同父元素）。</p><ul><li><p>语法： 元素1 + 元素2 {}</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>List item 1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>List item 2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>List item 3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ol</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>List item 1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>List item 2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>List item 3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ol</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><pre class=" language-css"><code class="language-css"><span class="token selector">li + li </span><span class="token punctuation">{</span><span class="token property">font-weight</span><span class="token punctuation">:</span>bold<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><img src="https://raw.githubusercontent.com/black210/images/master/demo/202003/10/112509-417061.png" alt="相邻兄弟选择器"></p><ul><li>上面这个选择器只会把<strong>列表中的第二个和第三个列表项变为粗体</strong>。第一个列表项不受影响。</li><li>这两个列表是相邻兄弟，列表项本身也是相邻兄弟。不过，第一个列表中的列表项与第二个列表中的列表项不是相邻兄弟，因为这两组列表项不属于同一父元素（最多只能算堂兄弟）。</li><li>请记住，用一个结合符只能选择两个相邻兄弟中的第二个元素。</li></ul></li></ul></li><li><p><strong>伪类选择器</strong>：选择一些元素具有的状态</p><ul><li><p>语法： 元素:状态{}</p><p>如： <code>&lt;a&gt;</code></p><pre class=" language-css"><code class="language-css"><span class="token selector">a<span class="token pseudo-class">:link</span> </span><span class="token punctuation">{</span><span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#FF0000</span><span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/* 未访问的链接 */</span><span class="token selector">a<span class="token pseudo-class">:visited</span> </span><span class="token punctuation">{</span><span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#00FF00</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/* 已访问的链接 */</span><span class="token selector">a<span class="token pseudo-class">:hover</span> </span><span class="token punctuation">{</span><span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#FF00FF</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/* 鼠标移动到链接上 */</span><span class="token selector">a<span class="token pseudo-class">:active</span> </span><span class="token punctuation">{</span><span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#0000FF</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/* 选定的链接 */</span></code></pre></li></ul></li></ul><blockquote><p><strong>拓展</strong>：</p></blockquote><ul><li><p><strong>first-child 伪类</strong>：选择元素的第一个子元素</p><pre class=" language-css"><code class="language-css"> <span class="token selector">p<span class="token pseudo-class">:first-child</span> </span><span class="token punctuation">{</span><span class="token property">font-weight</span><span class="token punctuation">:</span> bold<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">li<span class="token pseudo-class">:first-child</span> </span><span class="token punctuation">{</span><span class="token property">text-transform</span><span class="token punctuation">:</span>uppercase<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>These are the necessary steps:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>Intert Key<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>Turn key <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span><span class="token punctuation">></span></span>clockwise<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>strong</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>Push accelerator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Do <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>em</span><span class="token punctuation">></span></span>not<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>em</span><span class="token punctuation">></span></span> push the brake at the same time as the accelerator.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><ol><li>第一个规则将作为某元素第一个子元素的所有 p 元素设置为粗体。</li><li>第二个规则将作为某个元素（在 HTML 中，这肯定是 ol 或 ul 元素）第一个子元素的所有 li 元素变成大写。</li></ol></li><li><p><strong><code>:lang</code> 伪类</strong>：使你有能力为不同的语言定义特殊的规则</p><p>在下面的例子中，:lang 类为属性值为 no 的 q 元素定义引号的类型：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">   <span class="token selector">q<span class="token pseudo-class">:lang(no)</span>      </span><span class="token punctuation">{</span>      <span class="token property">quotes</span><span class="token punctuation">:</span> <span class="token string">"~"</span> <span class="token string">"~"</span>      <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>文字<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>q</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>no<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>段落中的引用的文字<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>q</span><span class="token punctuation">></span></span>文字<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre></li><li><p><strong>伪元素</strong>：用于向某些选择器设置特殊效果</p><p>参考链接：<a href="https://www.w3school.com.cn/css/css_pseudo_elements.asp" target="_blank" rel="noopener">https://www.w3school.com.cn/css/css_pseudo_elements.asp</a></p><ol><li><code>:first-line</code> ：用于向文本的首行设置特殊样式。</li><li><code>:first-letter</code>：用于向文本的首字母设置特殊样式</li><li><code>:before</code>：在元素的内容前面插入新内容。</li><li><code>:after</code>：可以在元素的内容之后插入新内容。</li></ol></li></ul><h4 id="3-2-4属性"><a href="#3-2-4属性" class="headerlink" title="3.2.4属性"></a>3.2.4属性</h4><ol><li><p><strong>字体、文本</strong></p><pre><code> * font-size：字体大小</code></pre><ul><li>color：文本颜色</li><li>text-align：对其方式</li><li>line-height：行高 </li></ul></li><li><p><strong>背景</strong></p><ul><li>background：</li></ul></li><li><p><strong>边框</strong></p><ul><li>border：设置边框，符合属性</li></ul></li><li><p><strong>尺寸</strong></p><ul><li>width：宽度</li><li>height：高度</li></ul></li><li><p><strong>盒子模型：控制布局</strong></p><ul><li>margin：外边距</li><li>padding：内边距<ul><li>默认情况下内边距会影响整个盒子的大小</li></ul></li><li>box-sizing: border-box;  设置盒子的属性，让width和height就是最终盒子的大小</li><li>float：浮动</li><li>left</li><li>right<h2 id="4-JavaScript"><a href="#4-JavaScript" class="headerlink" title="4.JavaScript"></a>4.JavaScript</h2></li></ul></li></ol><h3 id="4-1概述"><a href="#4-1概述" class="headerlink" title="4.1概述"></a>4.1概述</h3><ul><li>概念：    <strong>一门客户端脚本语言</strong><ul><li>运行在客户端浏览器中的。每一个浏览器都有JavaScript的解析引擎<ul><li>脚本语言：不需要编译，直接就可以被浏览器解析执行了</li></ul></li></ul></li></ul><ul><li>功能：可以来增强用户和html页面的交互过程，可以来控制html元素，让页面有一些<strong>动态的效果，</strong>增强用户的体验。</li></ul><ul><li>​     <code>JavaScript</code> = <code>ECMAScript</code> + JavaScript自己特有的东西(BOM+DOM)</li></ul><h3 id="4-2ECMAScript基本语法"><a href="#4-2ECMAScript基本语法" class="headerlink" title="4.2ECMAScript基本语法"></a>4.2ECMAScript基本语法</h3><p>​    客户端脚本语言的标准。</p><h4 id="4-2-1与html结合方式"><a href="#4-2-1与html结合方式" class="headerlink" title="4.2.1与html结合方式"></a>4.2.1与html结合方式</h4><ul><li><p>内部 JS：</p><ul><li>定义<code>&lt;script&gt;</code>，标签体内容就是js代码</li></ul></li><li><p>外部 JS：</p><ul><li>定义<code>&lt;script&gt;</code>，通过<strong>src属性引入</strong>外部的js文件 <blockquote><p>注意：</p></blockquote></li></ul><ol><li><code>&lt;script&gt;</code>可以定义在html页面的任何地方。但是<strong>定义的位置会影响执行顺序</strong>。</li><li><code>&lt;script&gt;</code>可以定义多个。</li></ol></li></ul><h4 id="4-2-2注释"><a href="#4-2-2注释" class="headerlink" title="4.2.2注释"></a>4.2.2注释</h4><ul><li><p>单行注释：<code>//</code>注释内容</p></li><li><p>多行注释：<code>/* 注释内容 */</code></p></li></ul><h4 id="4-2-3数据类型"><a href="#4-2-3数据类型" class="headerlink" title="4.2.3数据类型"></a>4.2.3数据类型</h4><ul><li><p>原始数据类型(基本数据类型)：</p><ol><li>number：数字。 整数/小数/<code>NaN</code>(比如字符串转换失败的数字<code>"123aa"</code>)</li><li>string：字符串。 字符串  “abc” “a” ‘abc’</li><li>boolean: true和false</li><li>null：一个对象为空的占位符</li><li>undefined：未定义。如果一个变量没有给初始化值，则会被默认赋值为undefined</li></ol></li><li><p>引用数据类型：对象</p></li></ul><h4 id="4-2-4变量"><a href="#4-2-4变量" class="headerlink" title="4.2.4变量"></a>4.2.4变量</h4><ul><li><p>变量：一小块存储数据的内存空间</p></li><li><p>Java语言是<strong>强类型语言</strong>，而JavaScript是<strong>弱类型语言。</strong></p><pre><code>  * 强类型：在开辟变量存储空间时，定义了空间将来存储的数据的数据类型。**只能存储固定类型的数据**。</code></pre><ul><li>弱类型：在开辟变量存储空间时，不定义空间将来的存储数据类型，<strong>可以存放任意类型的数据</strong>。</li></ul></li><li><p>语法：</p><ul><li><p>var 变量名 = 初始化值;</p></li><li><p>typeof运算符：获取变量的类型。</p><p>注：null运算后得到的是object</p></li></ul></li></ul><h4 id="4-2-5运算"><a href="#4-2-5运算" class="headerlink" title="4.2.5运算"></a>4.2.5运算</h4><ol><li><p><strong>一元运算符</strong>：只有一个运算数的运算符</p><ul><li><code>++</code>与<code>--</code>：自增、自减</li></ul></li></ol><blockquote><p> 混合用：前++先运算在使用，后++先用后运算。（运算即自增、自减）</p></blockquote><ul><li><code>+(-)</code>：正负号</li></ul><blockquote><p>注意：在JS中，如果运算数不是运算符所要求的类型，那么js引擎会自动的<strong>将运算数进行类型转换</strong></p></blockquote><ul><li><p>其他类型转number：</p><ul><li><p>string转number：按照字面值转换。如果字面值不是数字，则转为<strong>NaN</strong>（不是数字的数字）</p></li><li><p>boolean转number：true转为1，false转为0</p><p><img src="https://raw.githubusercontent.com/black210/images/master/demo/202003/10/154133-541940.png" alt="js一元运算"></p></li></ul></li></ul><ol start="2"><li><p><strong>算数运算符</strong></p><ul><li><code>+ - * / %</code>…</li></ul></li><li><p><strong>赋值运算符</strong></p><ul><li><code>= += -+=</code>….</li></ul></li><li><p><strong>比较运算符</strong></p><ul><li><p><code>&gt; &lt; &gt;= &lt;= == ===(全等于)</code></p></li><li><p>比较方式</p><ol><li>类型相同：直接比较<ul><li>字符串：按照字典顺序比较。按位逐一比较，直到得出大小为止。</li></ul></li><li>类型不同：先进行类型转换，再比较<ul><li><code>===</code>：全等于。在比较之前，<strong>先判断类型</strong>，如果类型不一样，则直接返回false</li></ul></li></ol></li></ul></li><li><p><strong>逻辑运算符</strong></p><ul><li><code>&amp;&amp; || !</code></li></ul><ul><li>其他类型转boolean：<ol><li>number：0或NaN为假，其他为真</li><li>string：除了空字符串(<code>""</code>)，其他都是true</li><li><code>null</code>&amp;<code>undefined</code>:都是false</li><li>对象：所有对象都为true</li></ol></li></ul></li><li><p><strong>三元运算符</strong></p><ul><li><p>语法：</p><pre><code> * `表达式? 值1:值2;`</code></pre><ul><li><p>判断表达式的值，如果是*<em>true *</em>则取值1，如果是 false 则取值2；</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> c <span class="token operator">=</span> a <span class="token operator">></span> b <span class="token operator">?</span> <span class="token number">1</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">;</span></code></pre></li></ul></li></ul></li></ol><h4 id="4-2-6流程控制语句"><a href="#4-2-6流程控制语句" class="headerlink" title="4.2.6流程控制语句"></a>4.2.6流程控制语句</h4><ol><li><p><code>if...else...</code></p></li><li><p><code>switch:</code></p><ul><li><p>在java中，switch语句可以接受的数据类型： </p><p>  <code>byte</code> <code>int</code> <code>shor</code> <code>char</code>,<code>枚举</code>(1.5) ,<code>String</code>(1.7)</p></li><li><p>在JS中,switch语句可以接受任意的原始数据类型</p></li></ul></li><li><p><code>while</code></p></li><li><p><code>do...while</code></p></li><li><p><code>for</code>        </p></li></ol><h4 id="4-2-7-JS特殊语法"><a href="#4-2-7-JS特殊语法" class="headerlink" title="4.2.7 JS特殊语法"></a>4.2.7 JS特殊语法</h4><ol><li><p>语句以;结尾，如果一行只有一条语句则 ;可以省略 (不建议)</p></li><li><p>变量的定义使用<code>var</code>关键字，也可以不使用</p><ul><li><p>用： 定义的变量是<strong>局部变量</strong></p></li><li><p>不用：定义的变量是<strong>全局变量</strong>(不建议)</p></li></ul></li></ol><blockquote><p> tips：若定义在方法内部，需要调用才可使用。</p></blockquote><h4 id="4-2-8基本对象"><a href="#4-2-8基本对象" class="headerlink" title="4.2.8基本对象"></a>4.2.8基本对象</h4><ol><li><p><strong>Function</strong>：函数(方法)对象</p><ul><li><p>创建方式：</p><pre class=" language-javascript"><code class="language-javascript"> <span class="token number">1</span><span class="token punctuation">.</span> <span class="token keyword">var</span> fun <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token punctuation">(</span>形式参数列表<span class="token punctuation">,</span>方法体<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//忘掉吧</span> <span class="token number">2</span><span class="token punctuation">.</span>      <span class="token keyword">function</span> <span class="token function">方法名称</span><span class="token punctuation">(</span>形式参数列表<span class="token punctuation">)</span><span class="token punctuation">{</span>              方法体     <span class="token punctuation">}</span> <span class="token number">3</span><span class="token punctuation">.</span>         <span class="token keyword">var</span> 方法名 <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>形式参数列表<span class="token punctuation">)</span><span class="token punctuation">{</span>                        方法体         <span class="token punctuation">}</span></code></pre></li><li><p>属性：</p><ul><li>length:代表形参的个数</li></ul></li></ul></li></ol><ul><li><p>特点：</p><ol><li>方法定义是，<strong>形参的类型不用写,返回值类型也不写。</strong></li><li>方法是一个对象，如果定义名称<strong>相同的方法</strong>，<strong>会覆盖</strong></li><li>在JS中，方法的调用<strong>只与方法的名称有关</strong>，和参数列表无关</li><li>在方法声明中有一个隐藏的内置对象（数组），arguments,封装所有的实际参数</li></ol></li><li><p>调用：</p><p>​    方法名称(实际参数列表);</p></li></ul><ol start="2"><li><p><strong>Array</strong>:数组对象</p><ul><li>创建：<ul><li><code>var arr = new Array(元素列表);</code></li><li><code>var arr = new Array(默认长度);</code></li><li><code>var arr = [元素列表];</code></li></ul></li></ul></li></ol><ul><li><p>方法</p><ul><li><p>join(参数):将数组中的元素按照指定的<strong>分隔符拼接为字符串</strong></p></li><li><p>push()：向数组的末尾添加一个或更多元素，并返回新的长度。</p><ul><li><p>属性</p></li><li><p>length:数组的长度</p></li><li><p>特点：</p></li></ul></li><li><p>JS中，数组元素的<strong>类型可变</strong>的，数组<strong>长度可变</strong>的。</p></li></ul></li></ul><ol start="3"><li><p><strong>Boolean</strong></p></li><li><p><strong>Date</strong>：日期对象</p><ul><li>创建：<pre><code>    `var date = new Date();`</code></pre></li><li>方法：<ul><li><code>toLocaleString()</code>：返回当前date对象对应的时间本地字符串格式</li><li><code>getTime()</code>:获取毫秒值。返回当前如期对象描述的时间到1970年1月1日零点的毫秒值差</li></ul></li></ul></li><li><p><strong>Math</strong>：数学对象</p><ul><li><p>创建：</p><ul><li>特点：Math对象不用创建，<strong>直接使用。</strong>   <code>Math.方法名();</code></li></ul></li><li><p>方法：</p><ul><li><code>random()</code>:返回 0 ~ 1 之间的随机数。 含0不含1</li><li><code>ceil(x)</code>：对数进行上舍入。</li><li><code>floor(x)</code>：对数进行下舍入。</li><li><code>round(x)</code>：把数四舍五入为最接近的整数。</li></ul></li><li><p>属性：  <code>PI</code>  圆周率</p></li></ul></li><li><p><strong>Number</strong></p></li><li><p><strong>String</strong></p></li><li><p><strong>Global</strong></p><ul><li><p>特点：全局对象，这个Global中封装的方法不需要对象就可以直接调用。  <code>方法名();</code></p></li><li><p>方法：</p><ul><li><p><code>encodeURI()</code>:urI编码</p></li><li><p><code>decodeURI()</code>:urI解码</p></li><li><p><code>encodeURIComponent()</code>:url编码,编码的字符更多(解析含有分隔符，比如 ? 和 #)</p></li><li><p><code>decodeURIComponent()</code>:url解码</p></li><li><p><code>parseInt()</code>:将字符串转为数字</p></li></ul><blockquote><p>逐一判断每一个字符是否是数字，直到不是数字为止，将前边数字部分转为number</p></blockquote></li><li><p><code>isNaN()</code>:判断一个值是否是NaN</p><blockquote><p>NaN六亲不认，连自己都不认。NaN参与的==比较全部问false</p></blockquote></li><li><p><code>eval()</code>:讲 JavaScript 字符串，并把它作为脚本代码来执行。    </p></li></ul></li></ol><ul><li>URl编码： %E4%BC%A0%E6%99%BA%E6%92%AD%E5%AE%A2</li></ul><h5 id="9-RegExp：正则表达式对象"><a href="#9-RegExp：正则表达式对象" class="headerlink" title="9.RegExp：正则表达式对象"></a>9.RegExp：正则表达式对象</h5><ul><li><p><strong>正则表达式</strong>：定义字符串的组成规则。</p></li><li><p>欲更详细，参考链接：<a href="https://www.w3school.com.cn/jsref/jsref_obj_regexp.asp" target="_blank" rel="noopener">https://www.w3school.com.cn/jsref/jsref_obj_regexp.asp</a></p><ul><li><p>单个字符:<code>[]</code>：方括号用于查找某个范围内的字符：</p><ul><li>如： <code>[a]</code> <code>[ab]</code> <code>[a-zA-Z0-9_]</code></li></ul></li><li><p>元字符:代表特殊含义的单个字符:</p><ul><li><code>\d</code>:单个数字字符 [0-9]</li><li><code>\w</code>:单个单词字符[a-z A-Z 0-9]</li></ul></li><li><p>量词符号：</p><ul><li><p><code>?</code>：表示出现0次或1次</p></li><li><p><code>*</code>：表示出现0次或多次</p></li><li><p><code>+</code>：出现1次或多次</p></li><li><p><code>{m,n}</code>:表示 m&lt;= 数量 &lt;= n</p></li></ul></li></ul><blockquote><p>m如果缺省： <code>{,n}</code><strong>最多n次</strong></p><p> n如果缺省：<code>{m,}</code> <strong>最少m次</strong></p></blockquote><ul><li>开始结束符号<ul><li><code>^</code>:开始</li><li><code>$</code>:结束</li></ul></li></ul></li><li><p><strong>正则对象：</strong></p><ul><li><p>创建</p><ul><li><code>var reg = new RegExp("正则表达式");</code></li><li><code>var reg = /正则表达式/;</code></li></ul></li><li><p>方法</p><ul><li><code>test(参数)</code>:验证指定的字符串是否符合正则定义的规范    </li></ul></li></ul></li></ul><h3 id="4-3BOM"><a href="#4-3BOM" class="headerlink" title="4.3BOM"></a>4.3BOM</h3><h4 id="4-3-1概述"><a href="#4-3-1概述" class="headerlink" title="4.3.1概述"></a>4.3.1概述</h4><ol><li><p>概念：Browser Object Model  <strong>浏览器对象模型</strong></p><ul><li>将浏览器的各个组成部分封装成对象。</li></ul></li><li><p>组成：</p><ul><li>Window：窗口对象</li><li>Navigator：浏览器对象</li><li>Screen：显示器屏幕对象</li><li>History：历史记录对象</li><li>Location：地址栏对象</li></ul></li></ol><h4 id="4-3-2Window：窗口对象"><a href="#4-3-2Window：窗口对象" class="headerlink" title="4.3.2Window：窗口对象"></a>4.3.2Window：窗口对象</h4><blockquote><p><strong>方法</strong></p></blockquote><ul><li><p>与<strong>弹出框</strong>有关的方法：</p><ul><li><p><code>alert()</code>    显示带有一段消息和一个确认按钮的警告框。</p></li><li><p><code>confirm()</code>    显示带有一段消息以及确认按钮和取消按钮的对话框。</p><ul><li>如果用户点击确定按钮，则方法返回true</li><li>如果用户点击取消按钮，则方法返回false</li></ul></li><li><p><code>prompt()</code>    显示可提示用户输入的对话框。</p></li><li><p>返回值：获取用户输入的值</p></li></ul></li><li><p>与<strong>打开关闭</strong>有关的方法：</p><ul><li><code>close()</code>    关闭浏览器窗口。</li></ul></li><li><p>谁调用我 ，我关谁</p><ul><li><code>open()</code>    打开一个新的浏览器窗口</li></ul></li><li><p>返回新的Window对象</p></li><li><p>与<strong>定时器</strong>有关的方式</p><ul><li><p><code>setTimeout()</code>    在指定的毫秒数后调用函数或计算表达式。</p><ul><li><p>参数：</p><blockquote><p>1.js代码或者方法对象    </p><p>2.毫秒值</p></blockquote></li></ul><ul><li>返回值：唯一标识，用于取消定时器</li></ul></li><li><p><code>clearTimeout()</code>    取消由 setTimeout() 方法设置的 timeout。</p></li><li><p><code>setInterval()</code>    按照指定的<strong>周期</strong>（以毫秒计）来调用函数或计算表达式。</p></li><li><p><code>clearInterval()</code>    取消由 setInterval() 设置的 timeout。</p></li></ul></li></ul><blockquote><p><strong>属性：</strong></p></blockquote><ul><li>获取其他BOM对象：<ul><li>history</li><li>location</li><li>Navigator</li><li>Screen:</li></ul></li><li>获取DOM对象<ul><li>document</li></ul></li></ul><blockquote><p><strong>特点</strong>：</p></blockquote><ul><li><p>Window对象不需要创建<strong>可以直接使用</strong> window使用。 window.方法名();</p></li><li><p><strong>window引用可以省略</strong>。  <code>方法名();</code></p></li></ul><h4 id="4-3-3Location：地址栏对象"><a href="#4-3-3Location：地址栏对象" class="headerlink" title="4.3.3Location：地址栏对象"></a>4.3.3Location：地址栏对象</h4><ul><li>创建(获取)：<ol><li>window.location</li><li>location</li></ol></li><li>方法：<ul><li><code>reload()</code>    重新加载当前文档。刷新</li></ul></li><li>属性<ul><li><code>href</code>    设置或返回完整的 URL。</li></ul></li></ul><h4 id="4-3-4History：历史记录对象"><a href="#4-3-4History：历史记录对象" class="headerlink" title="4.3.4History：历史记录对象"></a>4.3.4History：历史记录对象</h4><ul><li>创建(获取)：<ol><li>window.history</li><li>history</li></ol></li><li>方法：<ul><li><code>back()</code>    加载 history 列表中的前一个 URL。</li><li><code>forward()</code>    加载 history 列表中的下一个 URL。</li><li><code>go(参数)</code>    加载 history 列表中的某个具体页面。</li></ul></li></ul><ul><li>参数：<ul><li>正数：前进几个历史记录</li><li>负数：后退几个历史记录</li></ul></li></ul><ul><li>属性：<ul><li><code>length</code>    返回当前窗口历史列表中的 URL 数量。</li></ul></li></ul><h3 id="4-4DOM"><a href="#4-4DOM" class="headerlink" title="4.4DOM"></a>4.4DOM</h3><h4 id="4-4-1概述"><a href="#4-4-1概述" class="headerlink" title="4.4.1概述"></a>4.4.1概述</h4><ul><li><p>概念： Document Object Model <strong>文档对象模型</strong></p><ul><li>将标记语言文档的各个组成部分，封装为对象。可以使用这些对象，对标记语言文档进行CRUD的动态操作。</li></ul></li><li><p>W3C DOM 标准被分为 3 个不同的部分：</p><ul><li><p><strong>核心 DOM</strong> - 针对任何结构化文档的标准模型</p><ul><li><p>Document：文档对象</p></li><li><p>Element：元素对象</p></li><li><p>Attribute：属性对象</p></li><li><p>Text：文本对象</p></li><li><p>Comment:注释对象</p></li><li><p>Node：节点对象，其他5个的父对象</p></li></ul></li><li><p><strong>XML DOM</strong>： 针对 XML 文档的标准模型</p></li><li><p><strong>HTML DOM</strong> ：针对 HTML 文档的标准模型</p></li></ul></li></ul><h4 id="4-4-2核心DOM"><a href="#4-4-2核心DOM" class="headerlink" title="4.4.2核心DOM"></a>4.4.2核心DOM</h4><ul><li><p><strong>Document</strong>：文档对象</p><ul><li>创建(获取)：在html dom模型中可以使用window对象来获取<ul><li>window.document</li><li>document</li></ul></li><li>方法：<ol><li>获取Element对象：<ul><li><code>getElementById()</code>    ： 根据id属性值获取元素对象。id属性值一般唯一</li><li><code>getElementsByTagName()</code>：根据元素名称获取元素对象们。返回值是一个数组</li><li><code>getElementsByClassName():</code>根据Class属性值获取元素对象们。返回值是一个数组</li><li><code>getElementsByName():</code> 根据name属性值获取元素对象们。返回值是一个数组</li></ul></li><li>创建其他DOM对象：<ul><li><code>createAttribute(name)</code></li><li><code>createComment()</code></li><li><code>createElement()</code></li><li><code>createTextNode()</code></li></ul></li></ol></li></ul></li><li><p><strong>Element</strong>：元素对象</p><ul><li>获取/创建：通过document来获取和创建</li><li>方法：<ul><li><code>removeAttribute()</code>：删除属性</li><li><code>setAttribute()</code>：设置属性</li></ul></li></ul></li><li><p><strong>Node</strong>：节点对象，其他5个的父对象</p><ul><li><p>特点：所有dom对象都可以被认为是一个节点</p></li><li><p>方法：</p><p>CRUD dom树：</p><ul><li><code>appendChild()</code>：向节点的子节点列表的结尾添加新的子节点。</li><li><code>removeChild()</code>    ：删除（并返回）当前节点的指定子节点。</li><li><code>replaceChild()</code>：用新节点替换一个子节点。</li></ul></li><li><p>属性：</p><ul><li><code>parentNode</code> 返回节点的父节点。</li></ul></li></ul></li></ul><h4 id="4-4-3HTML-DOM"><a href="#4-4-3HTML-DOM" class="headerlink" title="4.4.3HTML DOM"></a>4.4.3HTML DOM</h4><ul><li><p>标签体的设置和获取：<code>innerHTML</code></p></li><li><p>使用html元素对象的属性</p></li><li><p>控制元素样式</p><ol><li><p>使用<strong>元素的style</strong>属性来设置</p><p>如：</p><pre class=" language-javascript"><code class="language-javascript">        <span class="token comment" spellcheck="true">//修改样式方式1</span>     div1<span class="token punctuation">.</span>style<span class="token punctuation">.</span>border <span class="token operator">=</span> <span class="token string">"1px solid red"</span><span class="token punctuation">;</span>     div1<span class="token punctuation">.</span>style<span class="token punctuation">.</span>width <span class="token operator">=</span> <span class="token string">"200px"</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//font-size--> fontSize</span>     div1<span class="token punctuation">.</span>style<span class="token punctuation">.</span>fontSize <span class="token operator">=</span> <span class="token string">"20px"</span><span class="token punctuation">;</span>    </code></pre></li><li><p>提前<strong>定义好类选择器</strong>的样式，通过元素的 className 属性来设置其 class 属性值。</p></li></ol></li></ul><h4 id="4-4-4事情监听"><a href="#4-4-4事情监听" class="headerlink" title="4.4.4事情监听"></a>4.4.4事情监听</h4><ul><li><p><strong>概念</strong>：某些组件被执行了某些操作后，触发某些代码的执行。    </p><ul><li>事件：某些操作。如： 单击，双击，键盘按下了，鼠标移动了<ul><li>事件源：组件。如： 按钮 文本输入框…</li></ul></li><li>监听器：代码。</li><li>注册监听：将事件，事件源，监听器结合在一起。 当事件源上发生了某个事件，则触发执行某个监听器代码。</li></ul></li><li><p><strong>常见的事件：</strong></p><ul><li><strong>点击事件</strong>：<ul><li>onclick：单击事件</li><li>ondblclick：双击事件</li></ul></li><li><strong>焦点事件</strong><ul><li>onblur：失去焦点</li><li>onfocus:元素获得焦点。</li></ul></li><li><strong>加载事件：</strong><ul><li>onload：一张页面或一幅图像完成加载。</li></ul></li><li><strong>加载事件：</strong><ul><li>onload：一张页面或一幅图像完成加载。</li></ul></li><li><strong>鼠标事件：</strong><ol><li>onmousedown    鼠标按钮被按下。</li><li>onmouseup    鼠标按键被松开。</li><li>onmousemove    鼠标被移动。</li><li>onmouseover    鼠标移到某元素之上。</li><li>onmouseout    鼠标从某元素移开。</li></ol></li><li><strong>键盘事件：</strong><ul><li>onkeydown    某个键盘按键被按下。    </li><li>onkeyup        某个键盘按键被松开。</li><li>onkeypress    某个键盘按键被按下并松开。</li></ul></li><li><strong>选择和改变</strong><ul><li>onchange    域的内容被改变。</li><li>onselect    文本被选中。</li></ul></li><li><strong>表单事件：</strong><ul><li>onsubmit    确认按钮被点击。</li><li>onreset    重置按钮被点击。</li></ul></li></ul></li></ul><h2 id="5-JSP"><a href="#5-JSP" class="headerlink" title="5.JSP"></a>5.JSP</h2><ul><li><p><strong>指令</strong></p><ul><li>作用：用于配置JSP页面，导入资源文件</li></ul><ul><li>格式：<code>&lt;%@ 指令名称 属性名1=属性值1 属性名2=属性值2 ... %&gt;</code></li></ul><ul><li><p>分类：</p><ol><li><p><strong>page</strong>： 配置 JSP 页面的</p><ul><li><code>contentType</code>：等同于response.setContentType()</li></ul></li></ol><blockquote><p>1.设置响应体的mime类型以及字符集</p><p>2.设置当前jsp页面的编码（只能是高级的IDE才能生效，如果使用低级工具，则需要设置pageEncoding属性设置当前页面的字符集）</p></blockquote><ul><li><p><code>import</code>：导包</p></li><li><p><code>errorPage</code>：当前页面发生异常后，会自动跳转到指定的错误页面</p></li><li><p><code>isErrorPage</code>：标识当前也是是否是错误页面。</p></li></ul><blockquote><p>1.true：是，可以使用内置对象exception</p><p>2.false：否。默认值。不可以使用内置对象exception</p></blockquote><ol start="2"><li><p><strong>include</strong>： 页面包含的。导入页面的资源文件</p><pre class=" language-html"><code class="language-html">  &lt;%@include file="top.jsp"%></code></pre></li><li><p><strong>taglib</strong>： 导入资源</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%@</span> <span class="token attr-name">taglib</span> <span class="token attr-name">prefix</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>c<span class="token punctuation">"</span></span> <span class="token attr-name">uri</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://java.sun.com/jsp/jstl/core<span class="token punctuation">"</span></span> <span class="token attr-name">%</span><span class="token punctuation">></span></span></code></pre><p><code>prefix</code>：前缀，自定义的</p></li></ol></li></ul></li><li><p><strong>注释:</strong></p><ul><li>html注释：<code>&lt;!-- --&gt;</code>: 只能注释html代码片段</li><li>jsp注释：（推荐使用）<code>&lt;%-- --%&gt;</code>：可以<strong>注释所有</strong></li></ul></li><li><p><strong>内置对象</strong></p><ul><li><p>在jsp页面中不需要创建，<strong>直接使用的对象</strong></p></li><li><p>一共有9个：前面4个为<strong>域对象</strong></p></li></ul><table><thead><tr><th>变量名</th><th>真实类型</th><th>作用</th></tr></thead><tbody><tr><td>pageContext</td><td>PageContext</td><td>当前页面共享数据，还可以获取其他八个内置对象</td></tr><tr><td>request</td><td>HttpServletRequest</td><td>一次请求访问的多个资源(转发)</td></tr><tr><td>session</td><td>HttpSession</td><td>一次会话的多个请求间</td></tr><tr><td>application</td><td>ServletContext</td><td>所有用户间共享数据</td></tr><tr><td>response</td><td>HttpServletResponse</td><td>响应对象</td></tr><tr><td>page</td><td>Object</td><td>当前页面(Servlet)的对象   <strong>this</strong></td></tr><tr><td>out</td><td>JspWriter</td><td>输出对象，数据输出到页面上</td></tr><tr><td>config</td><td>ServletConfig</td><td>Servlet的配置对象</td></tr><tr><td>exception</td><td>Throwable</td><td>异常对象</td></tr></tbody></table></li></ul><h2 id="6-EL表达式"><a href="#6-EL表达式" class="headerlink" title="6.EL表达式"></a>6.EL表达式</h2><ol><li><p>概念：Expression Language <strong>表达式语言</strong></p></li><li><p>作用：*<em>替换和简化 *</em>jsp 页面中java代码的编写。</p></li><li><p>语法：<code>${表达式}</code></p><ul><li><p>注意：jsp默认支持el表达式的。如果要<strong>忽略 el 表达式</strong></p><ul><li>设置jsp中page指令中：<code>isELIgnored="true"</code> 忽略当前jsp页面中所有的el表达式</li><li><code>\${表达式}</code> ：忽略当前这个el表达式</li></ul></li></ul></li></ol><ul><li><p><strong>运算</strong>：</p><ul><li>运算符：<ul><li>算数运算符： <code>+ - * /(div) %(mod)</code></li><li>比较运算符： <code>&gt; &lt; &gt;= &lt;= == !=</code></li><li>逻辑运算符： <code>&amp;&amp;(and) ||(or) !(not)</code></li><li>空运算符： <code>empty</code></li></ul></li></ul><ul><li>功能：用于判断字符串、集合、数组对象是否为null或者长度是否为0</li><li><code>${empty list}</code>:判断字符串、集合、数组对象<strong>是否为null或者长度为0</strong></li><li><code>${not empty str}</code>:表示判断字符串、集合、数组对象<strong>是否不为null 并且 长度&gt;0</strong></li></ul></li><li><p><strong>获取值</strong></p></li><li><p>el表达式只能从<strong>域对象中</strong>获取值</p></li><li><p>语法：</p><ul><li><p><code>${域名称.键名}</code>：<strong>从指定域中获取指定键的值</strong></p></li><li><p>域名称：</p><table><thead><tr><th>pageScope</th><th>pageContext</th></tr></thead><tbody><tr><td>requestScope</td><td>request</td></tr><tr><td>sessionScope</td><td>session</td></tr><tr><td>applicationScope</td><td>application（ServletContext）</td></tr></tbody></table></li><li><p>举例：在request域中存储了<code>name=张三</code></p></li><li><p>获取：<code>${requestScope.name}</code></p></li></ul></li><li><p><code>${键名}</code>：表示依次从最小的域中查找是否有该键对应的值，直到找到为止。</p></li><li><p>获取对象、List集合、Map集合的值</p><ol><li>对象：<code>${域名称.键名.属性名}</code><ul><li>本质上会去调用对象的getter方法</li></ul></li><li>List集合：<code>${域名称.键名[索引]}</code></li><li>Map集合：</li></ol><ul><li><code>${域名称.键名.key名称}</code></li><li><code>${域名称.键名["key名称"]}</code></li></ul></li><li><p><strong>隐式对象：</strong></p><ul><li>el表达式中有11个隐式对象</li><li><strong>pageContext</strong>：<ul><li>获取jsp其他八个内置对象<pre><code>  * `${pageContext.request.contextPath}`：动态获取虚拟目录</code></pre></li></ul></li></ul></li></ul><h2 id="7-JSTL"><a href="#7-JSTL" class="headerlink" title="7.JSTL"></a>7.JSTL</h2><ol><li><p>概念：JavaServer Pages Tag Library  <strong>JSP标准标签库</strong></p><ul><li>是由Apache组织提供的开源的免费的jsp标签        <code>&lt;标签&gt;</code></li></ul></li><li><p>作用：用于简化和替换jsp页面上的java代码        </p></li><li><p><strong>使用步骤：</strong></p><ol><li>导入jstl相关jar包</li><li>引入标签库：taglib指令：  <code>&lt;%@ taglib %&gt;</code></li></ol></li><li><p>使用标签</p></li><li><p><strong>常用的JSTL标签</strong></p><ul><li><code>if</code>:相当于java代码的if语句</li></ul></li></ol><blockquote><p>属性：</p></blockquote><ul><li><code>test</code>  必须属性，接受boolean表达式<ul><li>如果表达式为true，则显示if标签体内容，如果为false，则不显示标签体内容</li><li>一般情况下，test属性值会结合el表达式一起使用</li></ul></li></ul><blockquote><p>注意：</p></blockquote><ul><li><code>c:if</code>标签没有else情况，想要else情况，则可以<strong>再定义</strong>一个<code>c:if</code>标签</li></ul><pre class=" language-html"><code class="language-html"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">c:</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${not empty list}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        遍历集合... <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">c:</span>if</span><span class="token punctuation">></span></span></code></pre><ul><li><p><code>choose</code>:相当于java代码的switch语句</p><ul><li>使用choose标签声明                     相当于switch声明</li><li>使用when标签做判断                     相当于case</li><li>使用otherwise标签做其他情况的声明        相当于default</li></ul><pre class=" language-html"><code class="language-html"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">c:</span>choose</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">c:</span>when</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${number <span class="token punctuation">=</span><span class="token punctuation">=</span> 1}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>星期一<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">c:</span>when</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">c:</span>when</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${number <span class="token punctuation">=</span><span class="token punctuation">=</span> 2}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>星期二<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">c:</span>when</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">c:</span>when</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${number <span class="token punctuation">=</span><span class="token punctuation">=</span> 3}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>星期三<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">c:</span>when</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">c:</span>when</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${number <span class="token punctuation">=</span><span class="token punctuation">=</span> 4}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>星期四<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">c:</span>when</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">c:</span>when</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${number <span class="token punctuation">=</span><span class="token punctuation">=</span> 5}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>星期五<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">c:</span>when</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">c:</span>when</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${number <span class="token punctuation">=</span><span class="token punctuation">=</span> 6}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>星期六<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">c:</span>when</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">c:</span>when</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${number <span class="token punctuation">=</span><span class="token punctuation">=</span> 7}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>星期天<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">c:</span>when</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">c:</span>otherwise</span><span class="token punctuation">></span></span>数字输入有误<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">c:</span>otherwise</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">c:</span>choose</span><span class="token punctuation">></span></span></code></pre></li><li><p><code>foreach</code>:相当于java代码的for语句</p><ul><li><p>items:容器对象</p><ul><li>var:容器中元素的临时变量</li><li>varStatus:循环状态对象</li></ul></li></ul><blockquote><p>index:容器中元素的索引，<strong>从0开始</strong></p><p>count:循环次数，<strong>从1开始</strong></p></blockquote><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">c:</span>forEach</span> <span class="token attr-name">begin</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">end</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span> <span class="token attr-name">var</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>i<span class="token punctuation">"</span></span> <span class="token attr-name">step</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span> <span class="token attr-name">varStatus</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>s<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>${i} <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>${s.index}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h4</span><span class="token punctuation">></span></span> ${s.count} <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h4</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">c:</span>forEach</span><span class="token punctuation">></span></span></code></pre></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring IOC源码分析</title>
      <link href="/2020/03/05/spring-ioc-yuan-ma-fen-xi/"/>
      <url>/2020/03/05/spring-ioc-yuan-ma-fen-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-IOC源码分析"><a href="#Spring-IOC源码分析" class="headerlink" title="Spring IOC源码分析"></a>Spring IOC源码分析</h1><h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h2><p>目的：记录IOC源码挖掘过程</p><p>参考链接：<a href="https://www.javadoop.com/post/spring-ioc" target="_blank" rel="noopener">https://www.javadoop.com/post/spring-ioc</a></p><p>要说的 IOC 总体来说有两处地方最重要，一个是创建 Bean 容器，一个是初始化 Bean。</p><h2 id="2-入门"><a href="#2-入门" class="headerlink" title="2.入门"></a>2.入门</h2><p>先看下最基本的启动 Spring 容器的例子：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    ApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"classpath:applicationfile.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>以上代码就可以利用配置文件来启动一个 Spring 容器了，使用 maven在dependencies 中加上以下依赖即可</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>dependency<span class="token operator">></span>  <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>  <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>context<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>  <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">4.3</span><span class="token punctuation">.</span><span class="token number">11</span><span class="token punctuation">.</span>RELEASE<span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span></code></pre><p>spring-context 会自动将 spring-core、spring-beans、spring-aop、spring-expression 这几个基础 jar 包带进来。</p><p><code>ApplicationContext context = new ClassPathXmlApplicationContext(...)</code> 其实很好理解，从名字上就可以猜出一二，就是在 ClassPath 中寻找 xml 配置文件，根据 xml 文件内容来构建 ApplicationContext。当然，除了 ClassPathXmlApplicationContext 以外，我们也还有其他构建 ApplicationContext 的方案可供选择，我们先来看看大体的继承结构是怎么样的：</p><p><img src="https://raw.githubusercontent.com/black210/images/master/demo/202003/04/080136-414168.png" alt="1"></p><p>我们可以看到，ClassPathXmlApplicationContext 兜兜转转了好久才到 ApplicationContext 接口，同样的，我们也可以使用绿颜色的 <strong>FileSystemXmlApplicationContext</strong> 和 <strong>AnnotationConfigApplicationContext</strong> 这两个类。</p><p><strong>1、FileSystemXmlApplicationContext</strong> 的构造函数需要一个 xml 配置文件在系统中的路径，其他和 ClassPathXmlApplicationContext 基本上一样。</p><p><strong>2、AnnotationConfigApplicationContext</strong> 是基于注解来使用的，它不需要配置文件，采用 java 配置类和各种注解来配置，是比较简单的方式，也是大势所趋吧。</p><p>不过本文旨在帮助大家理解整个构建流程，所以决定使用 ClassPathXmlApplicationContext 进行分析。</p><p>我们先来一个简单的例子来看看怎么实例化 ApplicationContext。</p><p>首先，定义一个接口：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">MessageService</span> <span class="token punctuation">{</span>    String <span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>定义接口实现类：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MessageServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">MessageService</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> String <span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"hello world"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>接下来，我们在 <strong>resources</strong> 目录新建一个配置文件，文件名随意，通常叫 application.xml 或 application-xxx.xml 就可以了：</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span> <span class="token attr-name">default-autowire</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>byName<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>messageService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.javadoop.example.MessageServiceImpl<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><p>这样，我们就可以跑起来了：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 用我们的配置文件来启动一个 ApplicationContext</span>        ApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"classpath:application.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"context 启动成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 从 context 中取出我们的 Bean，而不是用 new MessageServiceImpl() 这种方式</span>        MessageService messageService <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>MessageService<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 这句将输出: hello world</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>messageService<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>以上例子很简单，不过也够引出本文的主题了，就是怎么样通过配置文件来启动 Spring 的 ApplicationContext ？也就是我们今天要分析的 IOC 的核心了。ApplicationContext 启动过程中，会负责创建实例 Bean，往各个 Bean 中注入依赖等。</p><h2 id="3-BeanFactory-简介"><a href="#3-BeanFactory-简介" class="headerlink" title="3.BeanFactory 简介"></a>3.BeanFactory 简介</h2><p>BeanFactory，从名字上也很好理解，生产 bean 的工厂，它负责生产和管理各个 bean 实例。</p><p>初学者可别以为我之前说那么多和 BeanFactory 无关，前面说的 ApplicationContext 其实就是一个 BeanFactory。我们来看下和 BeanFactory 接口相关的主要的继承结构：</p><p><img src="https://www.javadoop.com/blogimages/spring-context/2.png" alt="2"></p><p>有几个重点和大家说明下就好。</p><ol><li>ApplicationContext 继承了 ListableBeanFactory，这个 Listable 的意思就是，通过这个接口，我们可以获取多个 Bean，大家看源码会发现，最顶层 BeanFactory 接口的方法都是获取单个 Bean 的。</li><li>ApplicationContext 继承了 HierarchicalBeanFactory，Hierarchical 单词本身已经能说明问题了，也就是说我们可以在应用中起多个 BeanFactory，然后可以将各个 BeanFactory 设置为父子关系。</li><li>AutowireCapableBeanFactory 这个名字中的 Autowire 大家都非常熟悉，它就是用来自动装配 Bean 用的，但是仔细看上图，ApplicationContext 并没有继承它，不过不用担心，不使用继承，不代表不可以使用组合，如果你看到 ApplicationContext 接口定义中的最后一个方法 getAutowireCapableBeanFactory() 就知道了。</li><li>ConfigurableListableBeanFactory 也是一个特殊的接口，看图，特殊之处在于它继承了第二层所有的三个接口，而 ApplicationContext 没有。这点之后会用到。</li><li>请先不用花时间在其他的接口和类上，先理解我说的这几点就可以了。</li></ol><p>然后，请读者打开编辑器，翻一下 BeanFactory、ListableBeanFactory、HierarchicalBeanFactory、AutowireCapableBeanFactory、ApplicationContext 这几个接口的代码，大概看一下各个接口中的方法，大家心里要有底。</p><h3 id="ApplicationContext"><a href="#ApplicationContext" class="headerlink" title="ApplicationContext"></a>ApplicationContext</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ApplicationContext</span> <span class="token keyword">extends</span> <span class="token class-name">EnvironmentCapable</span><span class="token punctuation">,</span> ListableBeanFactory<span class="token punctuation">,</span> HierarchicalBeanFactory<span class="token punctuation">,</span>        MessageSource<span class="token punctuation">,</span> ApplicationEventPublisher<span class="token punctuation">,</span> ResourcePatternResolver <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Nullable</span>    String <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String <span class="token function">getApplicationName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String <span class="token function">getDisplayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/**     * Return the timestamp when this context was first loaded.     */</span>    <span class="token keyword">long</span> <span class="token function">getStartupDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/**     * Return the parent context, or {@code null} if there is no parent     * and this is the root of the context hierarchy.     */</span>    <span class="token annotation punctuation">@Nullable</span>    ApplicationContext <span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    AutowireCapableBeanFactory <span class="token function">getAutowireCapableBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IllegalStateException<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="BeanFactory"><a href="#BeanFactory" class="headerlink" title="BeanFactory"></a>BeanFactory</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">BeanFactory</span> <span class="token punctuation">{</span>   String FACTORY_BEAN_PREFIX <span class="token operator">=</span> <span class="token string">"&amp;"</span><span class="token punctuation">;</span>   Object <span class="token function">getBean</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException<span class="token punctuation">;</span>     <span class="token operator">&lt;</span>T<span class="token operator">></span> T <span class="token function">getBean</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span>T<span class="token operator">></span> requiredType<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException<span class="token punctuation">;</span>   Object <span class="token function">getBean</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> Object<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException<span class="token punctuation">;</span>   <span class="token operator">&lt;</span>T<span class="token operator">></span> T <span class="token function">getBean</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span>T<span class="token operator">></span> requiredType<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException<span class="token punctuation">;</span>   <span class="token operator">&lt;</span>T<span class="token operator">></span> T <span class="token function">getBean</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span>T<span class="token operator">></span> requiredType<span class="token punctuation">,</span> Object<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException<span class="token punctuation">;</span>   <span class="token operator">&lt;</span>T<span class="token operator">></span> ObjectProvider<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">getBeanProvider</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span>T<span class="token operator">></span> requiredType<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token operator">&lt;</span>T<span class="token operator">></span> ObjectProvider<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">getBeanProvider</span><span class="token punctuation">(</span>ResolvableType requiredType<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">boolean</span> <span class="token function">containsBean</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">boolean</span> <span class="token function">isSingleton</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token keyword">throws</span> NoSuchBeanDefinitionException<span class="token punctuation">;</span>   <span class="token keyword">boolean</span> <span class="token function">isPrototype</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token keyword">throws</span> NoSuchBeanDefinitionException<span class="token punctuation">;</span>   <span class="token keyword">boolean</span> <span class="token function">isTypeMatch</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> ResolvableType typeToMatch<span class="token punctuation">)</span> <span class="token keyword">throws</span> NoSuchBeanDefinitionException<span class="token punctuation">;</span>   <span class="token keyword">boolean</span> <span class="token function">isTypeMatch</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> typeToMatch<span class="token punctuation">)</span> <span class="token keyword">throws</span> NoSuchBeanDefinitionException<span class="token punctuation">;</span>   <span class="token annotation punctuation">@Nullable</span>   Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> <span class="token function">getType</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token keyword">throws</span> NoSuchBeanDefinitionException<span class="token punctuation">;</span>   <span class="token annotation punctuation">@Nullable</span>   Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> <span class="token function">getType</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">boolean</span> allowFactoryBeanInit<span class="token punctuation">)</span> <span class="token keyword">throws</span> NoSuchBeanDefinitionException<span class="token punctuation">;</span>   String<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getAliases</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="ListableBeanFactory"><a href="#ListableBeanFactory" class="headerlink" title="ListableBeanFactory"></a>ListableBeanFactory</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ListableBeanFactory</span> <span class="token keyword">extends</span> <span class="token class-name">BeanFactory</span> <span class="token punctuation">{</span>   <span class="token keyword">boolean</span> <span class="token function">containsBeanDefinition</span><span class="token punctuation">(</span>String beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">int</span> <span class="token function">getBeanDefinitionCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   String<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getBeanDefinitionNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   String<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getBeanNamesForType</span><span class="token punctuation">(</span>ResolvableType type<span class="token punctuation">)</span><span class="token punctuation">;</span>   String<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getBeanNamesForType</span><span class="token punctuation">(</span>ResolvableType type<span class="token punctuation">,</span> <span class="token keyword">boolean</span> includeNonSingletons<span class="token punctuation">,</span> <span class="token keyword">boolean</span> allowEagerInit<span class="token punctuation">)</span><span class="token punctuation">;</span>   String<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getBeanNamesForType</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> type<span class="token punctuation">)</span><span class="token punctuation">;</span>   String<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getBeanNamesForType</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> type<span class="token punctuation">,</span> <span class="token keyword">boolean</span> includeNonSingletons<span class="token punctuation">,</span> <span class="token keyword">boolean</span> allowEagerInit<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token operator">&lt;</span>T<span class="token operator">></span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> T<span class="token operator">></span> <span class="token function">getBeansOfType</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> Class<span class="token operator">&lt;</span>T<span class="token operator">></span> type<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException<span class="token punctuation">;</span>   <span class="token operator">&lt;</span>T<span class="token operator">></span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> T<span class="token operator">></span> <span class="token function">getBeansOfType</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> Class<span class="token operator">&lt;</span>T<span class="token operator">></span> type<span class="token punctuation">,</span> <span class="token keyword">boolean</span> includeNonSingletons<span class="token punctuation">,</span> <span class="token keyword">boolean</span> allowEagerInit<span class="token punctuation">)</span>         <span class="token keyword">throws</span> BeansException<span class="token punctuation">;</span>   String<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getBeanNamesForAnnotation</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Annotation</span><span class="token operator">></span> annotationType<span class="token punctuation">)</span><span class="token punctuation">;</span>   Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> <span class="token function">getBeansWithAnnotation</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Annotation</span><span class="token operator">></span> annotationType<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException<span class="token punctuation">;</span>   <span class="token annotation punctuation">@Nullable</span>   <span class="token operator">&lt;</span>A <span class="token keyword">extends</span> <span class="token class-name">Annotation</span><span class="token operator">></span> A <span class="token function">findAnnotationOnBean</span><span class="token punctuation">(</span>String beanName<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span>A<span class="token operator">></span> annotationType<span class="token punctuation">)</span>         <span class="token keyword">throws</span> NoSuchBeanDefinitionException<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="HierarchicalBeanFactory"><a href="#HierarchicalBeanFactory" class="headerlink" title="HierarchicalBeanFactory"></a>HierarchicalBeanFactory</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">HierarchicalBeanFactory</span> <span class="token keyword">extends</span> <span class="token class-name">BeanFactory</span> <span class="token punctuation">{</span>   <span class="token annotation punctuation">@Nullable</span>   BeanFactory <span class="token function">getParentBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">boolean</span> <span class="token function">containsLocalBean</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="AutowireCapableBeanFactory"><a href="#AutowireCapableBeanFactory" class="headerlink" title="AutowireCapableBeanFactory"></a>AutowireCapableBeanFactory</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">AutowireCapableBeanFactory</span> <span class="token keyword">extends</span> <span class="token class-name">BeanFactory</span> <span class="token punctuation">{</span>   <span class="token keyword">int</span> AUTOWIRE_NO <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>   <span class="token keyword">int</span> AUTOWIRE_BY_NAME <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>   <span class="token keyword">int</span> AUTOWIRE_BY_TYPE <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>   <span class="token keyword">int</span> AUTOWIRE_CONSTRUCTOR <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>   <span class="token annotation punctuation">@Deprecated</span>   <span class="token keyword">int</span> AUTOWIRE_AUTODETECT <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>   String ORIGINAL_INSTANCE_SUFFIX <span class="token operator">=</span> <span class="token string">".ORIGINAL"</span><span class="token punctuation">;</span>   <span class="token operator">&lt;</span>T<span class="token operator">></span> T <span class="token function">createBean</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span>T<span class="token operator">></span> beanClass<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException<span class="token punctuation">;</span>   <span class="token keyword">void</span> <span class="token function">autowireBean</span><span class="token punctuation">(</span>Object existingBean<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException<span class="token punctuation">;</span>   Object <span class="token function">configureBean</span><span class="token punctuation">(</span>Object existingBean<span class="token punctuation">,</span> String beanName<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException<span class="token punctuation">;</span>   Object <span class="token function">createBean</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> beanClass<span class="token punctuation">,</span> <span class="token keyword">int</span> autowireMode<span class="token punctuation">,</span> <span class="token keyword">boolean</span> dependencyCheck<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException<span class="token punctuation">;</span>   Object <span class="token function">autowire</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> beanClass<span class="token punctuation">,</span> <span class="token keyword">int</span> autowireMode<span class="token punctuation">,</span> <span class="token keyword">boolean</span> dependencyCheck<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException<span class="token punctuation">;</span>   <span class="token keyword">void</span> <span class="token function">autowireBeanProperties</span><span class="token punctuation">(</span>Object existingBean<span class="token punctuation">,</span> <span class="token keyword">int</span> autowireMode<span class="token punctuation">,</span> <span class="token keyword">boolean</span> dependencyCheck<span class="token punctuation">)</span>         <span class="token keyword">throws</span> BeansException<span class="token punctuation">;</span>   <span class="token keyword">void</span> <span class="token function">applyBeanPropertyValues</span><span class="token punctuation">(</span>Object existingBean<span class="token punctuation">,</span> String beanName<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException<span class="token punctuation">;</span>   Object <span class="token function">initializeBean</span><span class="token punctuation">(</span>Object existingBean<span class="token punctuation">,</span> String beanName<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException<span class="token punctuation">;</span>   Object <span class="token function">applyBeanPostProcessorsBeforeInitialization</span><span class="token punctuation">(</span>Object existingBean<span class="token punctuation">,</span> String beanName<span class="token punctuation">)</span>         <span class="token keyword">throws</span> BeansException<span class="token punctuation">;</span>   Object <span class="token function">applyBeanPostProcessorsAfterInitialization</span><span class="token punctuation">(</span>Object existingBean<span class="token punctuation">,</span> String beanName<span class="token punctuation">)</span>         <span class="token keyword">throws</span> BeansException<span class="token punctuation">;</span>   <span class="token keyword">void</span> <span class="token function">destroyBean</span><span class="token punctuation">(</span>Object existingBean<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token operator">&lt;</span>T<span class="token operator">></span> NamedBeanHolder<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">resolveNamedBean</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span>T<span class="token operator">></span> requiredType<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException<span class="token punctuation">;</span>   Object <span class="token function">resolveBeanByName</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> DependencyDescriptor descriptor<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException<span class="token punctuation">;</span>   <span class="token annotation punctuation">@Nullable</span>   Object <span class="token function">resolveDependency</span><span class="token punctuation">(</span>DependencyDescriptor descriptor<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> String requestingBeanName<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException<span class="token punctuation">;</span> <span class="token annotation punctuation">@Nullable</span>    Object <span class="token function">resolveDependency</span><span class="token punctuation">(</span>DependencyDescriptor descriptor<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> String requestingBeanName<span class="token punctuation">,</span>            <span class="token annotation punctuation">@Nullable</span> Set<span class="token operator">&lt;</span>String<span class="token operator">></span> autowiredBeanNames<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> TypeConverter typeConverter<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="4-启动过程分析"><a href="#4-启动过程分析" class="headerlink" title="4.启动过程分析"></a>4.启动过程分析</h2><p>下面将会是冗长的代码分析，记住，一定要自己打开源码来看，不然纯看是很累的。</p><p>第一步，我们肯定要从 ClassPathXmlApplicationContext 的构造方法说起。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ClassPathXmlApplicationContext</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractXmlApplicationContext</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> Resource<span class="token punctuation">[</span><span class="token punctuation">]</span> configResources<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 如果已经有 ApplicationContext 并需要配置成父子关系，那么调用这个构造方法</span>  <span class="token keyword">public</span> <span class="token function">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span>ApplicationContext parent<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token keyword">public</span> <span class="token function">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> configLocations<span class="token punctuation">,</span> <span class="token keyword">boolean</span> refresh<span class="token punctuation">,</span> ApplicationContext parent<span class="token punctuation">)</span>      <span class="token keyword">throws</span> BeansException <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 根据提供的路径，处理成配置文件数组(以分号、逗号、空格、tab、换行符分割)</span>    <span class="token function">setConfigLocations</span><span class="token punctuation">(</span>configLocations<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>refresh<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 核心方法</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p>接下来，就是 <code>refresh()</code>，这里简单说下为什么是 refresh()，而不是 init() 这种名字的方法。因为 ApplicationContext 建立起来以后，其实我们是可以通过调用 refresh() 这个方法重建的，refresh() 会将原来的 ApplicationContext 销毁，然后再重新执行一次初始化操作。</p><p>往下看，refresh() 方法里面调用了那么多方法，就知道肯定不简单了，请读者先看个大概，细节之后会详细说。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException<span class="token punctuation">,</span> IllegalStateException <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 来个锁，不然 refresh() 还没结束，你又来个启动或销毁容器的操作，那不就乱套了嘛</span>   <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>startupShutdownMonitor<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 准备工作，记录下容器的启动时间、标记“已启动”状态、处理配置文件中的占位符</span>      <span class="token function">prepareRefresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 这步比较关键，这步完成后，配置文件就会解析成一个个 Bean 定义，注册到 BeanFactory 中，</span>      <span class="token comment" spellcheck="true">// 当然，这里说的 Bean 还没有初始化，只是配置信息都提取出来了，</span>      <span class="token comment" spellcheck="true">// 注册也只是将这些信息都保存到了注册中心(说到底核心是一个 beanName-> beanDefinition 的 map)</span>      ConfigurableListableBeanFactory beanFactory <span class="token operator">=</span> <span class="token function">obtainFreshBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 设置 BeanFactory 的类加载器，添加几个 BeanPostProcessor，手动注册几个特殊的 bean</span>      <span class="token comment" spellcheck="true">// 这块待会会展开说</span>      <span class="token function">prepareBeanFactory</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 【这里需要知道 BeanFactoryPostProcessor 这个知识点，Bean 如果实现了此接口，</span>         <span class="token comment" spellcheck="true">// 那么在容器初始化以后，Spring 会负责调用里面的 postProcessBeanFactory 方法。】</span>         <span class="token comment" spellcheck="true">// 这里是提供给子类的扩展点，到这里的时候，所有的 Bean 都加载、注册完成了，但是都还没有初始化</span>         <span class="token comment" spellcheck="true">// 具体的子类可以在这步的时候添加一些特殊的 BeanFactoryPostProcessor 的实现类或做点什么事</span>         <span class="token function">postProcessBeanFactory</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 调用 BeanFactoryPostProcessor 各个实现类的 postProcessBeanFactory(factory) 方法</span>         <span class="token function">invokeBeanFactoryPostProcessors</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 注册 BeanPostProcessor 的实现类，注意看和 BeanFactoryPostProcessor 的区别</span>         <span class="token comment" spellcheck="true">// 此接口两个方法: postProcessBeforeInitialization 和 postProcessAfterInitialization</span>         <span class="token comment" spellcheck="true">// 两个方法分别在 Bean 初始化之前和初始化之后得到执行。注意，到这里 Bean 还没初始化</span>         <span class="token function">registerBeanPostProcessors</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 初始化当前 ApplicationContext 的 MessageSource，初始化这里就不展开说了，不然没完没了了</span>         <span class="token function">initMessageSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 初始化当前 ApplicationContext 的事件广播器，这里也不展开了</span>         <span class="token function">initApplicationEventMulticaster</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 从方法名就可以知道，典型的模板方法(钩子方法)，</span>         <span class="token comment" spellcheck="true">// 具体的子类可以在这里初始化一些特殊的 Bean（在初始化 singleton beans 之前）</span>         <span class="token function">onRefresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 注册事件监听器，监听器需要实现 ApplicationListener 接口。这也不是我们的重点，过</span>         <span class="token function">registerListeners</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 重点，重点，重点</span>         <span class="token comment" spellcheck="true">// 初始化所有的 singleton beans</span>         <span class="token comment" spellcheck="true">//（lazy-init 的除外，懒加载）</span>         <span class="token function">finishBeanFactoryInitialization</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 最后，广播事件，ApplicationContext 初始化完成</span>         <span class="token function">finishRefresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BeansException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isWarnEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"Exception encountered during context initialization - "</span> <span class="token operator">+</span>                  <span class="token string">"cancelling refresh attempt: "</span> <span class="token operator">+</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token comment" spellcheck="true">// Destroy already created singletons to avoid dangling resources.</span>         <span class="token comment" spellcheck="true">// 销毁已经初始化的 singleton 的 Beans，以免有些 bean 会一直占用资源</span>         <span class="token function">destroyBeans</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// Reset 'active' flag.</span>         <span class="token function">cancelRefresh</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 把异常往外抛</span>         <span class="token keyword">throw</span> ex<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">finally</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// Reset common introspection caches in Spring's core, since we</span>         <span class="token comment" spellcheck="true">// might not ever need metadata for singleton beans anymore...</span>         <span class="token function">resetCommonCaches</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>下面，我们开始一步步来肢解这个 refresh() 方法。</p><h3 id="4-1创建-Bean-容器前的准备工作（prepareRefresh）"><a href="#4-1创建-Bean-容器前的准备工作（prepareRefresh）" class="headerlink" title="4.1创建 Bean 容器前的准备工作（prepareRefresh）"></a>4.1创建 Bean 容器前的准备工作（prepareRefresh）</h3><p>这个比较简单，直接看代码中的几个注释即可。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">prepareRefresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 记录启动时间，</span>   <span class="token comment" spellcheck="true">// 将 active 属性设置为 true，closed 属性设置为 false，它们都是 AtomicBoolean 类型</span>   <span class="token keyword">this</span><span class="token punctuation">.</span>startupDate <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">this</span><span class="token punctuation">.</span>closed<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">this</span><span class="token punctuation">.</span>active<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isInfoEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Refreshing "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">// Initialize any placeholder（占位符） property sources in the context environment</span>   <span class="token function">initPropertySources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 校验 xml 配置文件</span>   <span class="token function">getEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">validateRequiredProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">this</span><span class="token punctuation">.</span>earlyApplicationEvents <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashSet</span><span class="token operator">&lt;</span>ApplicationEvent<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="4-2创建-Bean-容器，加载并注册-Bean（obtainFreshBeanFactory）"><a href="#4-2创建-Bean-容器，加载并注册-Bean（obtainFreshBeanFactory）" class="headerlink" title="4.2创建 Bean 容器，加载并注册 Bean（obtainFreshBeanFactory）"></a>4.2创建 Bean 容器，加载并注册 Bean（obtainFreshBeanFactory）</h3><p>我们回到 refresh() 方法中的下一行 obtainFreshBeanFactory()。</p><p>注意，<strong>这个方法是全文最重要的部分之一</strong>，这里将会初始化 BeanFactory、加载 Bean、注册 Bean 等等。</p><p>当然，这步结束后，Bean 并没有完成初始化。这里指的是 Bean 实例并未在这一步生成。</p><p>// AbstractApplicationContext.java</p><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> ConfigurableListableBeanFactory <span class="token function">obtainFreshBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 关闭旧的 BeanFactory (如果有)，创建新的 BeanFactory，加载 Bean 定义、注册 Bean 等等</span>   <span class="token function">refreshBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 返回刚刚创建的 BeanFactory</span>   ConfigurableListableBeanFactory beanFactory <span class="token operator">=</span> <span class="token function">getBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Bean factory for "</span> <span class="token operator">+</span> <span class="token function">getDisplayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">": "</span> <span class="token operator">+</span> beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">return</span> beanFactory<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>// AbstractRefreshableApplicationContext.java 120</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">refreshBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 如果 ApplicationContext 中已经加载过 BeanFactory 了，销毁所有 Bean，关闭 BeanFactory</span>   <span class="token comment" spellcheck="true">// 注意，应用中 BeanFactory 本来就是可以多个的，这里可不是说应用全局是否有 BeanFactory，而是当前</span>   <span class="token comment" spellcheck="true">// ApplicationContext 是否有 BeanFactory</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">hasBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">destroyBeans</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">closeBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 初始化一个 DefaultListableBeanFactory，为什么用这个，我们马上说。</span>      DefaultListableBeanFactory beanFactory <span class="token operator">=</span> <span class="token function">createBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 用于 BeanFactory 的序列化，我想不部分人应该都用不到</span>      beanFactory<span class="token punctuation">.</span><span class="token function">setSerializationId</span><span class="token punctuation">(</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 下面这两个方法很重要，别跟丢了，具体细节之后说</span>      <span class="token comment" spellcheck="true">// 设置 BeanFactory 的两个配置属性：是否允许 Bean 覆盖、是否允许循环引用</span>      <span class="token function">customizeBeanFactory</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 加载 Bean 到 BeanFactory 中</span>      <span class="token function">loadBeanDefinitions</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>beanFactoryMonitor<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>beanFactory <span class="token operator">=</span> beanFactory<span class="token punctuation">;</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span>   <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ApplicationContextException</span><span class="token punctuation">(</span><span class="token string">"I/O error parsing bean definition source for "</span> <span class="token operator">+</span> <span class="token function">getDisplayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>看到这里的时候，我觉得读者就应该站在高处看 ApplicationContext 了，ApplicationContext 继承自 BeanFactory，但是它不应该被理解为 BeanFactory 的实现类，而是说其内部持有一个实例化的 BeanFactory（DefaultListableBeanFactory）。以后所有的 BeanFactory 相关的操作其实是委托给这个实例来处理的。</p></blockquote><p>我们说说为什么选择实例化 <strong>DefaultListableBeanFactory</strong> ？前面我们说了有个很重要的接口 ConfigurableListableBeanFactory，它实现了 BeanFactory 下面一层的所有三个接口，我把之前的继承图再拿过来大家再仔细看一下：</p><p><img src="https://www.javadoop.com/blogimages/spring-context/3.png" alt="3"></p><p>我们可以看到 ConfigurableListableBeanFactory 只有一个实现类 DefaultListableBeanFactory，而且实现类 DefaultListableBeanFactory 还通过实现右边的 AbstractAutowireCapableBeanFactory 通吃了右路。所以结论就是，最底下这个家伙 DefaultListableBeanFactory 基本上是最牛的 BeanFactory 了，这也是为什么这边会使用这个类来实例化的原因。</p><blockquote><p>如果你想要在程序运行的时候动态往 Spring IOC 容器注册新的 bean，就会使用到这个类。那我们怎么在运行时获得这个实例呢？</p><p>之前我们说过 ApplicationContext 接口能获取到 AutowireCapableBeanFactory，就是最右上角那个，然后它向下转型就能得到 DefaultListableBeanFactory 了。</p><p>那怎么拿到 ApplicationContext 实例呢？如果你不会，说明你没用过 Spring。</p></blockquote><p>在继续往下之前，我们需要先了解 BeanDefinition。<strong>我们说 BeanFactory 是 Bean 容器，那么 Bean 又是什么呢？</strong></p><p>这里的 BeanDefinition 就是我们所说的 Spring 的 Bean，我们自己定义的各个 Bean 其实会转换成一个个 BeanDefinition 存在于 Spring 的 BeanFactory 中。</p><p>所以，如果有人问你 Bean 是什么的时候，你要知道 Bean 在代码层面上可以简单认为是 BeanDefinition 的实例。</p><blockquote><p>BeanDefinition 中保存了我们的 Bean 信息，比如这个 Bean 指向的是哪个类、是否是单例的、是否懒加载、这个 Bean 依赖了哪些 Bean 等等。</p></blockquote><h4 id="4-2-1BeanDefinition-接口定义（实例为Bean）"><a href="#4-2-1BeanDefinition-接口定义（实例为Bean）" class="headerlink" title="4.2.1BeanDefinition 接口定义（实例为Bean）"></a>4.2.1BeanDefinition 接口定义（实例为Bean）</h4><p>我们来看下 BeanDefinition 的接口定义：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">BeanDefinition</span> <span class="token keyword">extends</span> <span class="token class-name">AttributeAccessor</span><span class="token punctuation">,</span> BeanMetadataElement <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 我们可以看到，默认只提供 sington 和 prototype 两种，</span>   <span class="token comment" spellcheck="true">// 很多读者可能知道还有 request, session, globalSession, application, websocket 这几种，</span>   <span class="token comment" spellcheck="true">// 不过，它们属于基于 web 的扩展。</span>   String SCOPE_SINGLETON <span class="token operator">=</span> ConfigurableBeanFactory<span class="token punctuation">.</span>SCOPE_SINGLETON<span class="token punctuation">;</span>   String SCOPE_PROTOTYPE <span class="token operator">=</span> ConfigurableBeanFactory<span class="token punctuation">.</span>SCOPE_PROTOTYPE<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 比较不重要，直接跳过吧</span>   <span class="token keyword">int</span> ROLE_APPLICATION <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>   <span class="token keyword">int</span> ROLE_SUPPORT <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>   <span class="token keyword">int</span> ROLE_INFRASTRUCTURE <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 设置父 Bean，这里涉及到 bean 继承，不是 java 继承。请参见附录的详细介绍</span>   <span class="token comment" spellcheck="true">// 一句话就是：继承父 Bean 的配置信息而已</span>   <span class="token keyword">void</span> <span class="token function">setParentName</span><span class="token punctuation">(</span>String parentName<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 获取父 Bean</span>   String <span class="token function">getParentName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 设置 Bean 的类名称，将来是要通过反射来生成实例的</span>   <span class="token keyword">void</span> <span class="token function">setBeanClassName</span><span class="token punctuation">(</span>String beanClassName<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 获取 Bean 的类名称</span>   String <span class="token function">getBeanClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 设置 bean 的 scope</span>   <span class="token keyword">void</span> <span class="token function">setScope</span><span class="token punctuation">(</span>String scope<span class="token punctuation">)</span><span class="token punctuation">;</span>   String <span class="token function">getScope</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 设置是否懒加载</span>   <span class="token keyword">void</span> <span class="token function">setLazyInit</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> lazyInit<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">boolean</span> <span class="token function">isLazyInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 设置该 Bean 依赖的所有的 Bean，注意，这里的依赖不是指属性依赖(如 @Autowire 标记的)，</span>   <span class="token comment" spellcheck="true">// 是 depends-on="" 属性设置的值。</span>   <span class="token keyword">void</span> <span class="token function">setDependsOn</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> dependsOn<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 返回该 Bean 的所有依赖</span>   String<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getDependsOn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 设置该 Bean 是否可以注入到其他 Bean 中，只对根据类型注入有效，</span>   <span class="token comment" spellcheck="true">// 如果根据名称注入，即使这边设置了 false，也是可以的</span>   <span class="token keyword">void</span> <span class="token function">setAutowireCandidate</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> autowireCandidate<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 该 Bean 是否可以注入到其他 Bean 中</span>   <span class="token keyword">boolean</span> <span class="token function">isAutowireCandidate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 主要的。同一接口的多个实现，如果不指定名字的话，Spring 会优先选择设置 primary 为 true 的 bean</span>   <span class="token keyword">void</span> <span class="token function">setPrimary</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> primary<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 是否是 primary 的</span>   <span class="token keyword">boolean</span> <span class="token function">isPrimary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 如果该 Bean 采用工厂方法生成，指定工厂名称。对工厂不熟悉的读者，请参加附录</span>   <span class="token comment" spellcheck="true">// 一句话就是：有些实例不是用反射生成的，而是用工厂模式生成的</span>   <span class="token keyword">void</span> <span class="token function">setFactoryBeanName</span><span class="token punctuation">(</span>String factoryBeanName<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 获取工厂名称</span>   String <span class="token function">getFactoryBeanName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 指定工厂类中的 工厂方法名称</span>   <span class="token keyword">void</span> <span class="token function">setFactoryMethodName</span><span class="token punctuation">(</span>String factoryMethodName<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 获取工厂类中的 工厂方法名称</span>   String <span class="token function">getFactoryMethodName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 构造器参数</span>   ConstructorArgumentValues <span class="token function">getConstructorArgumentValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// Bean 中的属性值，后面给 bean 注入属性值的时候会说到</span>   MutablePropertyValues <span class="token function">getPropertyValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 是否 singleton</span>   <span class="token keyword">boolean</span> <span class="token function">isSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 是否 prototype</span>   <span class="token keyword">boolean</span> <span class="token function">isPrototype</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 如果这个 Bean 是被设置为 abstract，那么不能实例化，</span>   <span class="token comment" spellcheck="true">// 常用于作为 父bean 用于继承，其实也很少用......</span>   <span class="token keyword">boolean</span> <span class="token function">isAbstract</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">int</span> <span class="token function">getRole</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   String <span class="token function">getDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   String <span class="token function">getResourceDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   BeanDefinition <span class="token function">getOriginatingBeanDefinition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><blockquote><p>这个 BeanDefinition 其实已经包含很多的信息了，暂时不清楚所有的方法对应什么东西没关系，希望看完本文后读者可以彻底搞清楚里面的所有东西。</p><p>这里接口虽然那么多，但是没有类似 getInstance() 这种方法来获取我们定义的类的实例，真正的我们定义的类生成的实例到哪里去了呢？别着急，这个要很后面才能讲到。</p></blockquote><p>有了 BeanDefinition 的概念以后，我们再往下看 refreshBeanFactory() 方法中的剩余部分：</p><pre class=" language-java"><code class="language-java"><span class="token function">customizeBeanFactory</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">loadBeanDefinitions</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>虽然只有两个方法，但路还很长啊。。。</p><h4 id="4-2-2customizeBeanFactory（定义覆盖与循环依赖）"><a href="#4-2-2customizeBeanFactory（定义覆盖与循环依赖）" class="headerlink" title="4.2.2customizeBeanFactory（定义覆盖与循环依赖）"></a>4.2.2customizeBeanFactory（定义覆盖与循环依赖）</h4><p>customizeBeanFactory(beanFactory) 比较简单，就是配置是否允许 BeanDefinition 覆盖、是否允许循环引用。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">customizeBeanFactory</span><span class="token punctuation">(</span>DefaultListableBeanFactory beanFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>allowBeanDefinitionOverriding <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 是否允许 Bean 定义覆盖</span>      beanFactory<span class="token punctuation">.</span><span class="token function">setAllowBeanDefinitionOverriding</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>allowBeanDefinitionOverriding<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>allowCircularReferences <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 是否允许 Bean 间的循环依赖</span>      beanFactory<span class="token punctuation">.</span><span class="token function">setAllowCircularReferences</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>allowCircularReferences<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>BeanDefinition 的覆盖问题可能会有开发者碰到这个坑，就是在配置文件中定义 bean 时使用了相同的 id 或 name，默认情况下，allowBeanDefinitionOverriding 属性为 null，如果在同一配置文件中重复了，会抛错，但是如果不是同一配置文件中，会发生覆盖。</p><p>循环引用也很好理解：A 依赖 B，而 B 依赖 A。或 A 依赖 B，B 依赖 C，而 C 依赖 A。</p><p>默认情况下，Spring 允许循环依赖，当然如果你在 A 的构造方法中依赖 B，在 B 的构造方法中依赖 A 是不行的。</p><p>至于这两个属性怎么配置？我在附录中进行了介绍，尤其对于覆盖问题，很多人都希望禁止出现 Bean 覆盖，可是 Spring 默认是不同文件的时候可以覆盖的。</p><p>之后的源码中还会出现这两个属性，读者有个印象就可以了，它们不是非常重要。</p><h4 id="4-2-3加载-Bean-loadBeanDefinitions"><a href="#4-2-3加载-Bean-loadBeanDefinitions" class="headerlink" title="4.2.3加载 Bean: loadBeanDefinitions"></a>4.2.3加载 Bean: loadBeanDefinitions</h4><p>接下来是最重要的 loadBeanDefinitions(beanFactory) 方法了，这个方法将根据配置，加载各个 Bean，然后放到 BeanFactory 中。</p><p>读取配置的操作在 XmlBeanDefinitionReader 中，其负责加载配置、解析。</p><p>// AbstractXmlApplicationContext.java 80</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** 我们可以看到，此方法将通过一个 XmlBeanDefinitionReader 实例来加载各个 Bean。*/</span><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">loadBeanDefinitions</span><span class="token punctuation">(</span>DefaultListableBeanFactory beanFactory<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 给这个 BeanFactory 实例化一个 XmlBeanDefinitionReader</span>   XmlBeanDefinitionReader beanDefinitionReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XmlBeanDefinitionReader</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// Configure the bean definition reader with this context's</span>   <span class="token comment" spellcheck="true">// resource loading environment.</span>   beanDefinitionReader<span class="token punctuation">.</span><span class="token function">setEnvironment</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   beanDefinitionReader<span class="token punctuation">.</span><span class="token function">setResourceLoader</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   beanDefinitionReader<span class="token punctuation">.</span><span class="token function">setEntityResolver</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ResourceEntityResolver</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 初始化 BeanDefinitionReader，其实这个是提供给子类覆写的，</span>   <span class="token comment" spellcheck="true">// 我看了一下，没有类覆写这个方法，我们姑且当做不重要吧</span>   <span class="token function">initBeanDefinitionReader</span><span class="token punctuation">(</span>beanDefinitionReader<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 重点来了，继续往下</span>   <span class="token function">loadBeanDefinitions</span><span class="token punctuation">(</span>beanDefinitionReader<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>现在还在这个类中，接下来用刚刚初始化的 Reader 开始来加载 xml 配置，这块代码读者可以选择性跳过，不是很重要。也就是说，下面这个代码块，读者可以很轻松地略过。</p><p>// AbstractXmlApplicationContext.java 120</p><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">loadBeanDefinitions</span><span class="token punctuation">(</span>XmlBeanDefinitionReader reader<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>   Resource<span class="token punctuation">[</span><span class="token punctuation">]</span> configResources <span class="token operator">=</span> <span class="token function">getConfigResources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>configResources <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 往下看</span>      reader<span class="token punctuation">.</span><span class="token function">loadBeanDefinitions</span><span class="token punctuation">(</span>configResources<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   String<span class="token punctuation">[</span><span class="token punctuation">]</span> configLocations <span class="token operator">=</span> <span class="token function">getConfigLocations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>configLocations <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 2</span>      reader<span class="token punctuation">.</span><span class="token function">loadBeanDefinitions</span><span class="token punctuation">(</span>configLocations<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 上面虽然有两个分支，不过第二个分支很快通过解析路径转换为 Resource 以后也会进到这里</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">loadBeanDefinitions</span><span class="token punctuation">(</span>Resource<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> resources<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeanDefinitionStoreException <span class="token punctuation">{</span>   Assert<span class="token punctuation">.</span><span class="token function">notNull</span><span class="token punctuation">(</span>resources<span class="token punctuation">,</span> <span class="token string">"Resource array must not be null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">int</span> counter <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 注意这里是个 for 循环，也就是每个文件是一个 resource</span>   <span class="token keyword">for</span> <span class="token punctuation">(</span>Resource resource <span class="token operator">:</span> resources<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 继续往下看</span>      counter <span class="token operator">+=</span> <span class="token function">loadBeanDefinitions</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">// 最后返回 counter，表示总共加载了多少的 BeanDefinition</span>   <span class="token keyword">return</span> counter<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// XmlBeanDefinitionReader 303</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">loadBeanDefinitions</span><span class="token punctuation">(</span>Resource resource<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeanDefinitionStoreException <span class="token punctuation">{</span>   <span class="token keyword">return</span> <span class="token function">loadBeanDefinitions</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">EncodedResource</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// XmlBeanDefinitionReader 314</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">loadBeanDefinitions</span><span class="token punctuation">(</span>EncodedResource encodedResource<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeanDefinitionStoreException <span class="token punctuation">{</span>   Assert<span class="token punctuation">.</span><span class="token function">notNull</span><span class="token punctuation">(</span>encodedResource<span class="token punctuation">,</span> <span class="token string">"EncodedResource must not be null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isInfoEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Loading XML bean definitions from "</span> <span class="token operator">+</span> encodedResource<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">// 用一个 ThreadLocal 来存放配置文件资源</span>   Set<span class="token operator">&lt;</span>EncodedResource<span class="token operator">></span> currentResources <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>resourcesCurrentlyBeingLoaded<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>currentResources <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      currentResources <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span>EncodedResource<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>resourcesCurrentlyBeingLoaded<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>currentResources<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>currentResources<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>encodedResource<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanDefinitionStoreException</span><span class="token punctuation">(</span>            <span class="token string">"Detected cyclic loading of "</span> <span class="token operator">+</span> encodedResource <span class="token operator">+</span> <span class="token string">" - check your import definitions!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">try</span> <span class="token punctuation">{</span>      InputStream inputStream <span class="token operator">=</span> encodedResource<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>         InputSource inputSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InputSource</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>encodedResource<span class="token punctuation">.</span><span class="token function">getEncoding</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            inputSource<span class="token punctuation">.</span><span class="token function">setEncoding</span><span class="token punctuation">(</span>encodedResource<span class="token punctuation">.</span><span class="token function">getEncoding</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token comment" spellcheck="true">// 核心部分是这里，往下面看</span>         <span class="token keyword">return</span> <span class="token function">doLoadBeanDefinitions</span><span class="token punctuation">(</span>inputSource<span class="token punctuation">,</span> encodedResource<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">finally</span> <span class="token punctuation">{</span>         inputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span>   <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanDefinitionStoreException</span><span class="token punctuation">(</span>            <span class="token string">"IOException parsing XML document from "</span> <span class="token operator">+</span> encodedResource<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">finally</span> <span class="token punctuation">{</span>      currentResources<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>encodedResource<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>currentResources<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>resourcesCurrentlyBeingLoaded<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 还在这个文件中，第 388 行</span><span class="token keyword">protected</span> <span class="token keyword">int</span> <span class="token function">doLoadBeanDefinitions</span><span class="token punctuation">(</span>InputSource inputSource<span class="token punctuation">,</span> Resource resource<span class="token punctuation">)</span>      <span class="token keyword">throws</span> BeanDefinitionStoreException <span class="token punctuation">{</span>   <span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 这里就不看了，将 xml 文件转换为 Document 对象</span>      Document doc <span class="token operator">=</span> <span class="token function">doLoadDocument</span><span class="token punctuation">(</span>inputSource<span class="token punctuation">,</span> resource<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 继续</span>      <span class="token keyword">return</span> <span class="token function">registerBeanDefinitions</span><span class="token punctuation">(</span>doc<span class="token punctuation">,</span> resource<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 还在这个文件中，第 505 行</span><span class="token comment" spellcheck="true">// 返回值：返回从当前配置文件加载了多少数量的 Bean</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">registerBeanDefinitions</span><span class="token punctuation">(</span>Document doc<span class="token punctuation">,</span> Resource resource<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeanDefinitionStoreException <span class="token punctuation">{</span>   BeanDefinitionDocumentReader documentReader <span class="token operator">=</span> <span class="token function">createBeanDefinitionDocumentReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">int</span> countBefore <span class="token operator">=</span> <span class="token function">getRegistry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBeanDefinitionCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 这里</span>   documentReader<span class="token punctuation">.</span><span class="token function">registerBeanDefinitions</span><span class="token punctuation">(</span>doc<span class="token punctuation">,</span> <span class="token function">createReaderContext</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> <span class="token function">getRegistry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBeanDefinitionCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> countBefore<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// DefaultBeanDefinitionDocumentReader 90</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registerBeanDefinitions</span><span class="token punctuation">(</span>Document doc<span class="token punctuation">,</span> XmlReaderContext readerContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">this</span><span class="token punctuation">.</span>readerContext <span class="token operator">=</span> readerContext<span class="token punctuation">;</span>   logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Loading bean definitions"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   Element root <span class="token operator">=</span> doc<span class="token punctuation">.</span><span class="token function">getDocumentElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 从 xml 根节点开始解析文件</span>   <span class="token function">doRegisterBeanDefinitions</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>         </code></pre><p>经过漫长的链路，一个配置文件终于转换为一颗 DOM 树了，注意，这里指的是其中一个配置文件，不是所有的，读者可以看到上面有个 for 循环的。下面开始从根节点开始解析：</p><h5 id="doRegisterBeanDefinitions：（内含bean解析方法）"><a href="#doRegisterBeanDefinitions：（内含bean解析方法）" class="headerlink" title="doRegisterBeanDefinitions：（内含bean解析方法）"></a>doRegisterBeanDefinitions：（内含bean解析方法）</h5><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// DefaultBeanDefinitionDocumentReader 116</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doRegisterBeanDefinitions</span><span class="token punctuation">(</span>Element root<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 我们看名字就知道，BeanDefinitionParserDelegate 必定是一个重要的类，它负责解析 Bean 定义，</span>   <span class="token comment" spellcheck="true">// 这里为什么要定义一个 parent? 看到后面就知道了，是递归问题，</span>   <span class="token comment" spellcheck="true">// 因为 &lt;beans /> 内部是可以定义 &lt;beans /> 的，所以这个方法的 root 其实不一定就是 xml 的根节点，也可以是嵌套在里面的 &lt;beans /> 节点，从源码分析的角度，我们当做根节点就好了</span>   BeanDefinitionParserDelegate parent <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>delegate<span class="token punctuation">;</span>   <span class="token keyword">this</span><span class="token punctuation">.</span>delegate <span class="token operator">=</span> <span class="token function">createDelegate</span><span class="token punctuation">(</span><span class="token function">getReaderContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> root<span class="token punctuation">,</span> parent<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>delegate<span class="token punctuation">.</span><span class="token function">isDefaultNamespace</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 这块说的是根节点 &lt;beans ... profile="dev" /> 中的 profile 是否是当前环境需要的，</span>      <span class="token comment" spellcheck="true">// 如果当前环境配置的 profile 不包含此 profile，那就直接 return 了，不对此 &lt;beans /> 解析</span>      <span class="token comment" spellcheck="true">// 不熟悉 profile 为何物，不熟悉怎么配置 profile 读者的请移步附录区</span>      String profileSpec <span class="token operator">=</span> root<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span>PROFILE_ATTRIBUTE<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">hasText</span><span class="token punctuation">(</span>profileSpec<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         String<span class="token punctuation">[</span><span class="token punctuation">]</span> specifiedProfiles <span class="token operator">=</span> StringUtils<span class="token punctuation">.</span><span class="token function">tokenizeToStringArray</span><span class="token punctuation">(</span>               profileSpec<span class="token punctuation">,</span> BeanDefinitionParserDelegate<span class="token punctuation">.</span>MULTI_VALUE_ATTRIBUTE_DELIMITERS<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">getReaderContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">acceptsProfiles</span><span class="token punctuation">(</span>specifiedProfiles<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isInfoEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>               logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Skipped XML bean definition file due to specified profiles ["</span> <span class="token operator">+</span> profileSpec <span class="token operator">+</span>                     <span class="token string">"] not matching: "</span> <span class="token operator">+</span> <span class="token function">getReaderContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span>   <span class="token function">preProcessXml</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 钩子</span>   <span class="token comment" spellcheck="true">// 往下看</span>   <span class="token function">parseBeanDefinitions</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>delegate<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">postProcessXml</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 钩子</span>   <span class="token keyword">this</span><span class="token punctuation">.</span>delegate <span class="token operator">=</span> parent<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>preProcessXml(root) 和 postProcessXml(root) 是给子类用的钩子方法，鉴于没有被使用到，也不是我们的重点，我们直接跳过。</p><p>这里涉及到了 profile 的问题，对于不了解的读者，我在附录中对 profile 做了简单的解释，读者可以参考一下。</p><p>接下来，看核心解析方法 <strong>parseBeanDefinitions</strong>(root, this.delegate) :</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// default namespace 涉及到的就四个标签 &lt;import />、&lt;alias />、&lt;bean /> 和 &lt;beans />，</span><span class="token comment" spellcheck="true">// 其他的属于 custom 的，alias别名</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">parseBeanDefinitions</span><span class="token punctuation">(</span>Element root<span class="token punctuation">,</span> BeanDefinitionParserDelegate delegate<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>delegate<span class="token punctuation">.</span><span class="token function">isDefaultNamespace</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      NodeList nl <span class="token operator">=</span> root<span class="token punctuation">.</span><span class="token function">getChildNodes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nl<span class="token punctuation">.</span><span class="token function">getLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         Node node <span class="token operator">=</span> nl<span class="token punctuation">.</span><span class="token function">item</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token keyword">instanceof</span> <span class="token class-name">Element</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Element ele <span class="token operator">=</span> <span class="token punctuation">(</span>Element<span class="token punctuation">)</span> node<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>delegate<span class="token punctuation">.</span><span class="token function">isDefaultNamespace</span><span class="token punctuation">(</span>ele<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token comment" spellcheck="true">// 解析 default namespace 下面的几个元素</span>               <span class="token function">parseDefaultElement</span><span class="token punctuation">(</span>ele<span class="token punctuation">,</span> delegate<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>               <span class="token comment" spellcheck="true">// 解析其他 namespace 的元素</span>               delegate<span class="token punctuation">.</span><span class="token function">parseCustomElement</span><span class="token punctuation">(</span>ele<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>         <span class="token punctuation">}</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span>   <span class="token keyword">else</span> <span class="token punctuation">{</span>      delegate<span class="token punctuation">.</span><span class="token function">parseCustomElement</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>从上面的代码，我们可以看到，对于每个配置来说，分别进入到 parseDefaultElement(ele, delegate); 和 delegate.parseCustomElement(ele); 这两个分支了。</p><p>parseDefaultElement(ele, delegate) 代表解析的节点是<import>、<alias>、<bean>、<beans> 这几个。</beans></bean></alias></import></p><blockquote><p>这里的四个标签之所以是 <strong>default</strong> 的，是因为它们是处于这个 namespace 下定义的：</p><pre><code>http://www.springframework.org/schema/beans</code></pre><p>又到初学者科普时间，不熟悉 namespace 的读者请看下面贴出来的 xml，这里的第二行 <strong>xmlns</strong> 就是咯。</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>            http://www.springframework.org/schema/beans          http://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span>       <span class="token attr-name">default-autowire</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>byName<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><p>而对于其他的标签，将进入到 delegate.parseCustomElement(element) 这个分支。如我们经常会使用到的 <mvc>、<task>、<context>、<aop>等。</aop></context></task></mvc></p><p>这些属于扩展，如果需要使用上面这些 ”非 default“ 标签，那么上面的 xml 头部的地方也要引入相应的 namespace 和 .xsd 文件的路径，如下所示。同时代码中需要提供相应的 parser 来解析，如 MvcNamespaceHandler、TaskNamespaceHandler、ContextNamespaceHandler、AopNamespaceHandler 等。</p><p>假如读者想分析&lt;context:property-placeholder location=”classpath:xx.properties” /&gt;  的实现原理，就应该到 ContextNamespaceHandler 中找答案。</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>      <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>      <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>      <span class="token attr-name"><span class="token namespace">xmlns:</span>mvc</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/mvc<span class="token punctuation">"</span></span>      <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>           http://www.springframework.org/schema/beans            http://www.springframework.org/schema/beans/spring-beans.xsd           http://www.springframework.org/schema/context           http://www.springframework.org/schema/context/spring-context.xsd           http://www.springframework.org/schema/mvc              http://www.springframework.org/schema/mvc/spring-mvc.xsd         <span class="token punctuation">"</span></span>      <span class="token attr-name">default-autowire</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>byName<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><p>同理，以后你要是碰到 <dubbo> 这种标签，那么就应该搜一搜是不是有 DubboNamespaceHandler 这个处理类。</dubbo></p></blockquote><p>回过神来，看看处理 default 标签的方法：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">parseDefaultElement</span><span class="token punctuation">(</span>Element ele<span class="token punctuation">,</span> BeanDefinitionParserDelegate delegate<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>delegate<span class="token punctuation">.</span><span class="token function">nodeNameEquals</span><span class="token punctuation">(</span>ele<span class="token punctuation">,</span> IMPORT_ELEMENT<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 处理 &lt;import /> 标签</span>      <span class="token function">importBeanDefinitionResource</span><span class="token punctuation">(</span>ele<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>delegate<span class="token punctuation">.</span><span class="token function">nodeNameEquals</span><span class="token punctuation">(</span>ele<span class="token punctuation">,</span> ALIAS_ELEMENT<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 处理 &lt;alias /> 标签定义</span>      <span class="token comment" spellcheck="true">// &lt;alias name="fromName" alias="toName"/></span>      <span class="token function">processAliasRegistration</span><span class="token punctuation">(</span>ele<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>delegate<span class="token punctuation">.</span><span class="token function">nodeNameEquals</span><span class="token punctuation">(</span>ele<span class="token punctuation">,</span> BEAN_ELEMENT<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 处理 &lt;bean /> 标签定义，这也算是我们的重点吧</span>      <span class="token function">processBeanDefinition</span><span class="token punctuation">(</span>ele<span class="token punctuation">,</span> delegate<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>delegate<span class="token punctuation">.</span><span class="token function">nodeNameEquals</span><span class="token punctuation">(</span>ele<span class="token punctuation">,</span> NESTED_BEANS_ELEMENT<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 如果碰到的是嵌套的 &lt;beans /> 标签，需要递归</span>      <span class="token function">doRegisterBeanDefinitions</span><span class="token punctuation">(</span>ele<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>如果每个标签都说，那我不吐血，你们都要吐血了。我们挑我们的重点  <bean> 标签出来说。</bean></p><h5 id="processBeanDefinition-解析-bean-标签"><a href="#processBeanDefinition-解析-bean-标签" class="headerlink" title="processBeanDefinition 解析 bean 标签"></a>processBeanDefinition 解析 bean 标签</h5><p>下面是 processBeanDefinition 解析 <bean> 标签：</bean></p><p>// DefaultBeanDefinitionDocumentReader 298</p><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">processBeanDefinition</span><span class="token punctuation">(</span>Element ele<span class="token punctuation">,</span> BeanDefinitionParserDelegate delegate<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 将 &lt;bean /> 节点中的信息提取出来，然后封装到一个 BeanDefinitionHolder 中，细节往下看</span>   BeanDefinitionHolder bdHolder <span class="token operator">=</span> delegate<span class="token punctuation">.</span><span class="token function">parseBeanDefinitionElement</span><span class="token punctuation">(</span>ele<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 下面的几行先不要看，跳过先，跳过先，跳过先，后面会继续说的</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>bdHolder <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      bdHolder <span class="token operator">=</span> delegate<span class="token punctuation">.</span><span class="token function">decorateBeanDefinitionIfRequired</span><span class="token punctuation">(</span>ele<span class="token punctuation">,</span> bdHolder<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// Register the final decorated instance.</span>         BeanDefinitionReaderUtils<span class="token punctuation">.</span><span class="token function">registerBeanDefinition</span><span class="token punctuation">(</span>bdHolder<span class="token punctuation">,</span> <span class="token function">getReaderContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRegistry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BeanDefinitionStoreException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token function">getReaderContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Failed to register bean definition with name '"</span> <span class="token operator">+</span>               bdHolder<span class="token punctuation">.</span><span class="token function">getBeanName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"'"</span><span class="token punctuation">,</span> ele<span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// Send registration event.</span>      <span class="token function">getReaderContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fireComponentRegistered</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BeanComponentDefinition</span><span class="token punctuation">(</span>bdHolder<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>继续往下看怎么解析之前，我们先看下<bean> 标签中可以定义哪些属性：</bean></p><table><thead><tr><th>Property</th><th></th></tr></thead><tbody><tr><td>class</td><td>类的全限定名</td></tr><tr><td>name</td><td>可指定 id、name(用逗号、分号、空格分隔)</td></tr><tr><td>scope</td><td>作用域</td></tr><tr><td>constructor arguments</td><td>指定构造参数</td></tr><tr><td>properties</td><td>设置属性的值</td></tr><tr><td>autowiring mode</td><td>no(默认值)、byName、byType、 constructor</td></tr><tr><td>lazy-initialization mode</td><td>是否懒加载(如果被非懒加载的bean依赖了那么其实也就不能懒加载了)</td></tr><tr><td>initialization method</td><td>bean 属性设置完成后，会调用这个方法</td></tr><tr><td>destruction method</td><td>bean 销毁后的回调方法</td></tr></tbody></table><p>上面表格中的内容我想大家都非常熟悉吧，如果不熟悉，那就是你不够了解 Spring 的配置了。</p><p>简单地说就是像下面这样子：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>exampleBean<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name1, name2, name3<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.javadoop.ExampleBean<span class="token punctuation">"</span></span>      <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>singleton<span class="token punctuation">"</span></span> <span class="token attr-name">lazy-init</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token attr-name">init-method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>init<span class="token punctuation">"</span></span> <span class="token attr-name">destroy-method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cleanup<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 可以用下面三种形式指定构造参数 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>7500000<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>years<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>7500000<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>7500000<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!-- property 的几种情况 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>beanOne<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ref</span> <span class="token attr-name">bean</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>anotherExampleBean<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>beanTwo<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>yetAnotherBean<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>integerProperty<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><p>当然，除了上面举例出来的这些，还有 factory-bean、factory-method、<lockup-method>、<replaced-method>、<meta>、<qualifier> 这几个，大家是不是熟悉呢？自己检验一下自己对 Spring 中 bean 的了解程度。</qualifier></replaced-method></lockup-method></p><p>有了以上这些知识以后，我们再继续往里看怎么解析 bean 元素，是怎么转换到 BeanDefinitionHolder 的。</p><p>// BeanDefinitionParserDelegate 428</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> BeanDefinitionHolder <span class="token function">parseBeanDefinitionElement</span><span class="token punctuation">(</span>Element ele<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">parseBeanDefinitionElement</span><span class="token punctuation">(</span>ele<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> BeanDefinitionHolder <span class="token function">parseBeanDefinitionElement</span><span class="token punctuation">(</span>Element ele<span class="token punctuation">,</span> BeanDefinition containingBean<span class="token punctuation">)</span> <span class="token punctuation">{</span>   String id <span class="token operator">=</span> ele<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span>ID_ATTRIBUTE<span class="token punctuation">)</span><span class="token punctuation">;</span>   String nameAttr <span class="token operator">=</span> ele<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span>NAME_ATTRIBUTE<span class="token punctuation">)</span><span class="token punctuation">;</span>   List<span class="token operator">&lt;</span>String<span class="token operator">></span> aliases <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 将 name 属性的定义按照 “逗号、分号、空格” 切分，形成一个 别名列表数组，</span>   <span class="token comment" spellcheck="true">// 当然，如果你不定义 name 属性的话，就是空的了</span>   <span class="token comment" spellcheck="true">// 我在附录中简单介绍了一下 id 和 name 的配置，大家可以看一眼，有个20秒就可以了</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">hasLength</span><span class="token punctuation">(</span>nameAttr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      String<span class="token punctuation">[</span><span class="token punctuation">]</span> nameArr <span class="token operator">=</span> StringUtils<span class="token punctuation">.</span><span class="token function">tokenizeToStringArray</span><span class="token punctuation">(</span>nameAttr<span class="token punctuation">,</span> MULTI_VALUE_ATTRIBUTE_DELIMITERS<span class="token punctuation">)</span><span class="token punctuation">;</span>      aliases<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>nameArr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   String beanName <span class="token operator">=</span> id<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 如果没有指定id, 那么用别名列表的第一个名字作为beanName</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>StringUtils<span class="token punctuation">.</span><span class="token function">hasText</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>aliases<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      beanName <span class="token operator">=</span> aliases<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"No XML 'id' specified - using '"</span> <span class="token operator">+</span> beanName <span class="token operator">+</span>               <span class="token string">"' as bean name and "</span> <span class="token operator">+</span> aliases <span class="token operator">+</span> <span class="token string">" as aliases"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>containingBean <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">checkNameUniqueness</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> aliases<span class="token punctuation">,</span> ele<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">// 根据 &lt;bean ...>...&lt;/bean> 中的配置创建 BeanDefinition，然后把配置中的信息都设置到实例中,</span>   <span class="token comment" spellcheck="true">// 细节后面细说，先知道下面这行结束后，一个 BeanDefinition 实例就出来了。</span>   AbstractBeanDefinition beanDefinition <span class="token operator">=</span> <span class="token function">parseBeanDefinitionElement</span><span class="token punctuation">(</span>ele<span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> containingBean<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 到这里，整个 &lt;bean /> 标签就算解析结束了，一个 BeanDefinition 就形成了。</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>beanDefinition <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 如果都没有设置 id 和 name，那么此时的 beanName 就会为 null，进入下面这块代码产生</span>      <span class="token comment" spellcheck="true">// 如果读者不感兴趣的话，我觉得不需要关心这块代码，对本文源码分析来说，这些东西不重要</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>StringUtils<span class="token punctuation">.</span><span class="token function">hasText</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>containingBean <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 按照我们的思路，这里 containingBean 是 null 的</span>               beanName <span class="token operator">=</span> BeanDefinitionReaderUtils<span class="token punctuation">.</span><span class="token function">generateBeanName</span><span class="token punctuation">(</span>                     beanDefinition<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>readerContext<span class="token punctuation">.</span><span class="token function">getRegistry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>               <span class="token comment" spellcheck="true">// 如果我们不定义 id 和 name，那么我们引言里的那个例子：</span>               <span class="token comment" spellcheck="true">//   1. beanName 为：com.javadoop.example.MessageServiceImpl#0</span>               <span class="token comment" spellcheck="true">//   2. beanClassName 为：com.javadoop.example.MessageServiceImpl</span>               beanName <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>readerContext<span class="token punctuation">.</span><span class="token function">generateBeanName</span><span class="token punctuation">(</span>beanDefinition<span class="token punctuation">)</span><span class="token punctuation">;</span>               String beanClassName <span class="token operator">=</span> beanDefinition<span class="token punctuation">.</span><span class="token function">getBeanClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token keyword">if</span> <span class="token punctuation">(</span>beanClassName <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span>                     beanName<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span>beanClassName<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> beanName<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> beanClassName<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                     <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>readerContext<span class="token punctuation">.</span><span class="token function">getRegistry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isBeanNameInUse</span><span class="token punctuation">(</span>beanClassName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  <span class="token comment" spellcheck="true">// 把 beanClassName 设置为 Bean 的别名</span>                  aliases<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>beanClassName<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>               logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Neither XML 'id' nor 'name' specified - "</span> <span class="token operator">+</span>                     <span class="token string">"using generated bean name ["</span> <span class="token operator">+</span> beanName <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>         <span class="token punctuation">}</span>         <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">error</span><span class="token punctuation">(</span>ex<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ele<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>         <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      String<span class="token punctuation">[</span><span class="token punctuation">]</span> aliasesArray <span class="token operator">=</span> StringUtils<span class="token punctuation">.</span><span class="token function">toStringArray</span><span class="token punctuation">(</span>aliases<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 返回 BeanDefinitionHolder</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">BeanDefinitionHolder</span><span class="token punctuation">(</span>beanDefinition<span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> aliasesArray<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">return</span> null<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>然后，我们再看看怎么根据配置创建 BeanDefinition 实例的：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> AbstractBeanDefinition <span class="token function">parseBeanDefinitionElement</span><span class="token punctuation">(</span>      Element ele<span class="token punctuation">,</span> String beanName<span class="token punctuation">,</span> BeanDefinition containingBean<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">this</span><span class="token punctuation">.</span>parseState<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BeanEntry</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   String className <span class="token operator">=</span> null<span class="token punctuation">;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>ele<span class="token punctuation">.</span><span class="token function">hasAttribute</span><span class="token punctuation">(</span>CLASS_ATTRIBUTE<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      className <span class="token operator">=</span> ele<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span>CLASS_ATTRIBUTE<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">try</span> <span class="token punctuation">{</span>      String parent <span class="token operator">=</span> null<span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>ele<span class="token punctuation">.</span><span class="token function">hasAttribute</span><span class="token punctuation">(</span>PARENT_ATTRIBUTE<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         parent <span class="token operator">=</span> ele<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span>PARENT_ATTRIBUTE<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// 创建 BeanDefinition，然后设置类信息而已，很简单，就不贴代码了</span>      AbstractBeanDefinition bd <span class="token operator">=</span> <span class="token function">createBeanDefinition</span><span class="token punctuation">(</span>className<span class="token punctuation">,</span> parent<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 设置 BeanDefinition 的一堆属性，这些属性定义在 AbstractBeanDefinition 中</span>      <span class="token function">parseBeanDefinitionAttributes</span><span class="token punctuation">(</span>ele<span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> containingBean<span class="token punctuation">,</span> bd<span class="token punctuation">)</span><span class="token punctuation">;</span>      bd<span class="token punctuation">.</span><span class="token function">setDescription</span><span class="token punctuation">(</span>DomUtils<span class="token punctuation">.</span><span class="token function">getChildElementValueByTagName</span><span class="token punctuation">(</span>ele<span class="token punctuation">,</span> DESCRIPTION_ELEMENT<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/**       * 下面的一堆是解析 &lt;bean>......&lt;/bean> 内部的子元素，       * 解析出来以后的信息都放到 bd 的属性中       */</span>      <span class="token comment" spellcheck="true">// 解析 &lt;meta /></span>      <span class="token function">parseMetaElements</span><span class="token punctuation">(</span>ele<span class="token punctuation">,</span> bd<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 解析 &lt;lookup-method /></span>      <span class="token function">parseLookupOverrideSubElements</span><span class="token punctuation">(</span>ele<span class="token punctuation">,</span> bd<span class="token punctuation">.</span><span class="token function">getMethodOverrides</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 解析 &lt;replaced-method /></span>      <span class="token function">parseReplacedMethodSubElements</span><span class="token punctuation">(</span>ele<span class="token punctuation">,</span> bd<span class="token punctuation">.</span><span class="token function">getMethodOverrides</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 解析 &lt;constructor-arg /></span>      <span class="token function">parseConstructorArgElements</span><span class="token punctuation">(</span>ele<span class="token punctuation">,</span> bd<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 解析 &lt;property /></span>      <span class="token function">parsePropertyElements</span><span class="token punctuation">(</span>ele<span class="token punctuation">,</span> bd<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 解析 &lt;qualifier /></span>      <span class="token function">parseQualifierElements</span><span class="token punctuation">(</span>ele<span class="token punctuation">,</span> bd<span class="token punctuation">)</span><span class="token punctuation">;</span>      bd<span class="token punctuation">.</span><span class="token function">setResource</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>readerContext<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      bd<span class="token punctuation">.</span><span class="token function">setSource</span><span class="token punctuation">(</span><span class="token function">extractSource</span><span class="token punctuation">(</span>ele<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> bd<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Bean class ["</span> <span class="token operator">+</span> className <span class="token operator">+</span> <span class="token string">"] not found"</span><span class="token punctuation">,</span> ele<span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoClassDefFoundError</span> err<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Class that bean class ["</span> <span class="token operator">+</span> className <span class="token operator">+</span> <span class="token string">"] depends on not found"</span><span class="token punctuation">,</span> ele<span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Unexpected failure during bean definition parsing"</span><span class="token punctuation">,</span> ele<span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">finally</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>parseState<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">return</span> null<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>到这里，我们已经完成了根据 <bean> 配置创建了一个 BeanDefinitionHolder 实例。注意，是一个。</bean></p><p>我们回到解析 <bean> 的入口方法:</bean></p><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">processBeanDefinition</span><span class="token punctuation">(</span>Element ele<span class="token punctuation">,</span> BeanDefinitionParserDelegate delegate<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 将 &lt;bean /> 节点转换为 BeanDefinitionHolder，就是上面说的一堆</span>   BeanDefinitionHolder bdHolder <span class="token operator">=</span> delegate<span class="token punctuation">.</span><span class="token function">parseBeanDefinitionElement</span><span class="token punctuation">(</span>ele<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>bdHolder <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 如果有自定义属性的话，进行相应的解析，先忽略</span>      bdHolder <span class="token operator">=</span> delegate<span class="token punctuation">.</span><span class="token function">decorateBeanDefinitionIfRequired</span><span class="token punctuation">(</span>ele<span class="token punctuation">,</span> bdHolder<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 我们把这步叫做 注册Bean 吧</span>         BeanDefinitionReaderUtils<span class="token punctuation">.</span><span class="token function">registerBeanDefinition</span><span class="token punctuation">(</span>bdHolder<span class="token punctuation">,</span> <span class="token function">getReaderContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRegistry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BeanDefinitionStoreException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token function">getReaderContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Failed to register bean definition with name '"</span> <span class="token operator">+</span>               bdHolder<span class="token punctuation">.</span><span class="token function">getBeanName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"'"</span><span class="token punctuation">,</span> ele<span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// 注册完成后，发送事件，本文不展开说这个</span>      <span class="token function">getReaderContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fireComponentRegistered</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BeanComponentDefinition</span><span class="token punctuation">(</span>bdHolder<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>大家再仔细看一下这块吧，我们后面就不回来说这个了。这里已经根据一个 <bean> 标签产生了一个 BeanDefinitionHolder 的实例，这个实例里面也就是一个 BeanDefinition 的实例和它的 beanName、aliases 这三个信息，注意，我们的关注点始终在 BeanDefinition 上：</bean></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BeanDefinitionHolder</span> <span class="token keyword">implements</span> <span class="token class-name">BeanMetadataElement</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> <span class="token keyword">final</span> BeanDefinition beanDefinition<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token keyword">final</span> String beanName<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token keyword">final</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> aliases<span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre><p>然后我们准备注册这个 BeanDefinition，最后，把这个注册事件发送出去。</p><p>下面，我们开始说说注册 Bean 吧。</p><h5 id="注册-Bean"><a href="#注册-Bean" class="headerlink" title="注册 Bean"></a>注册 Bean</h5><p>// BeanDefinitionReaderUtils 143</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">registerBeanDefinition</span><span class="token punctuation">(</span>      BeanDefinitionHolder definitionHolder<span class="token punctuation">,</span> BeanDefinitionRegistry registry<span class="token punctuation">)</span>      <span class="token keyword">throws</span> BeanDefinitionStoreException <span class="token punctuation">{</span>   String beanName <span class="token operator">=</span> definitionHolder<span class="token punctuation">.</span><span class="token function">getBeanName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 注册这个 Bean</span>   registry<span class="token punctuation">.</span><span class="token function">registerBeanDefinition</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> definitionHolder<span class="token punctuation">.</span><span class="token function">getBeanDefinition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 如果还有别名的话，也要根据别名全部注册一遍，不然根据别名就会找不到 Bean 了</span>   String<span class="token punctuation">[</span><span class="token punctuation">]</span> aliases <span class="token operator">=</span> definitionHolder<span class="token punctuation">.</span><span class="token function">getAliases</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>aliases <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span>String alias <span class="token operator">:</span> aliases<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// alias -> beanName 保存它们的别名信息，这个很简单，用一个 map 保存一下就可以了，</span>         <span class="token comment" spellcheck="true">// 获取的时候，会先将 alias 转换为 beanName，然后再查找</span>         registry<span class="token punctuation">.</span><span class="token function">registerAlias</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> alias<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>别名注册的放一边，毕竟它很简单，我们看看怎么注册 Bean。</p><p>// DefaultListableBeanFactory 793</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registerBeanDefinition</span><span class="token punctuation">(</span>String beanName<span class="token punctuation">,</span> BeanDefinition beanDefinition<span class="token punctuation">)</span>      <span class="token keyword">throws</span> BeanDefinitionStoreException <span class="token punctuation">{</span>   Assert<span class="token punctuation">.</span><span class="token function">hasText</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> <span class="token string">"Bean name must not be empty"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   Assert<span class="token punctuation">.</span><span class="token function">notNull</span><span class="token punctuation">(</span>beanDefinition<span class="token punctuation">,</span> <span class="token string">"BeanDefinition must not be null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>beanDefinition <span class="token keyword">instanceof</span> <span class="token class-name">AbstractBeanDefinition</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>         <span class="token punctuation">(</span><span class="token punctuation">(</span>AbstractBeanDefinition<span class="token punctuation">)</span> beanDefinition<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">validate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BeanDefinitionValidationException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanDefinitionStoreException</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">// old? 还记得 “允许 bean 覆盖” 这个配置吗？allowBeanDefinitionOverriding</span>   BeanDefinition oldBeanDefinition<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 之后会看到，所有的 Bean 注册后会放入这个 beanDefinitionMap 中</span>   oldBeanDefinition <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>beanDefinitionMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 处理重复名称的 Bean 定义的情况</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>oldBeanDefinition <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isAllowBeanDefinitionOverriding</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 如果不允许覆盖的话，抛异常</span>         <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanDefinitionStoreException</span><span class="token punctuation">(</span>beanDefinition<span class="token punctuation">.</span><span class="token function">getResourceDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>      <span class="token punctuation">}</span>      <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>oldBeanDefinition<span class="token punctuation">.</span><span class="token function">getRole</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> beanDefinition<span class="token punctuation">.</span><span class="token function">getRole</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// log...用框架定义的 Bean 覆盖用户自定义的 Bean </span>      <span class="token punctuation">}</span>      <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>beanDefinition<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>oldBeanDefinition<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// log...用新的 Bean 覆盖旧的 Bean</span>      <span class="token punctuation">}</span>      <span class="token keyword">else</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// log...用同等的 Bean 覆盖旧的 Bean，这里指的是 equals 方法返回 true 的 Bean</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// 覆盖</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>beanDefinitionMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> beanDefinition<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 判断是否已经有其他的 Bean 开始初始化了.</span>      <span class="token comment" spellcheck="true">// 注意，"注册Bean" 这个动作结束，Bean 依然还没有初始化，我们后面会有大篇幅说初始化过程，</span>      <span class="token comment" spellcheck="true">// 在 Spring 容器启动的最后，会 预初始化 所有的 singleton beans</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">hasBeanCreationStarted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// Cannot modify startup-time collection elements anymore (for stable iteration)</span>         <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>beanDefinitionMap<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>beanDefinitionMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> beanDefinition<span class="token punctuation">)</span><span class="token punctuation">;</span>            List<span class="token operator">&lt;</span>String<span class="token operator">></span> updatedDefinitions <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>beanDefinitionNames<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            updatedDefinitions<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>beanDefinitionNames<span class="token punctuation">)</span><span class="token punctuation">;</span>            updatedDefinitions<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>beanDefinitionNames <span class="token operator">=</span> updatedDefinitions<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>manualSingletonNames<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>               Set<span class="token operator">&lt;</span>String<span class="token operator">></span> updatedSingletons <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashSet</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>manualSingletonNames<span class="token punctuation">)</span><span class="token punctuation">;</span>               updatedSingletons<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token keyword">this</span><span class="token punctuation">.</span>manualSingletonNames <span class="token operator">=</span> updatedSingletons<span class="token punctuation">;</span>            <span class="token punctuation">}</span>         <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token keyword">else</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 最正常的应该是进到这个分支。</span>         <span class="token comment" spellcheck="true">// 将 BeanDefinition 放到这个 map 中，这个 map 保存了所有的 BeanDefinition</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>beanDefinitionMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> beanDefinition<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 这是个 ArrayList，所以会按照 bean 配置的顺序保存每一个注册的 Bean 的名字</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>beanDefinitionNames<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 这是个 LinkedHashSet，代表的是手动注册的 singleton bean，</span>         <span class="token comment" spellcheck="true">// 注意这里是 remove 方法，到这里的 Bean 当然不是手动注册的</span>         <span class="token comment" spellcheck="true">// 手动指的是通过调用以下方法注册的 bean ：</span>         <span class="token comment" spellcheck="true">//     registerSingleton(String beanName, Object singletonObject)</span>         <span class="token comment" spellcheck="true">// 这不是重点，解释只是为了不让大家疑惑。Spring 会在后面"手动"注册一些 Bean，</span>         <span class="token comment" spellcheck="true">// 如 "environment"、"systemProperties" 等 bean，我们自己也可以在运行时注册 Bean 到容器中的</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>manualSingletonNames<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// 这个不重要，在预初始化的时候会用到，不必管它。</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>frozenBeanDefinitionNames <span class="token operator">=</span> null<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>oldBeanDefinition <span class="token operator">!=</span> null <span class="token operator">||</span> <span class="token function">containsSingleton</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">resetBeanDefinition</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>总结一下，到这里已经初始化了 Bean 容器，<bean> 配置也相应的转换为了一个个 BeanDefinition，然后注册了各个 BeanDefinition 到注册中心，并且发送了注册事件。</bean></p><p>——— 分割线 ———</p><p>到这里是一个分水岭，前面的内容都还算比较简单，不过应该也比较繁琐，大家要清楚地知道前面都做了哪些事情。</p><h3 id="4-3Bean-容器实例化完成后"><a href="#4-3Bean-容器实例化完成后" class="headerlink" title="4.3Bean 容器实例化完成后"></a>4.3Bean 容器实例化完成后</h3><p>说到这里，我们回到 refresh() 方法，我重新贴了一遍代码，看看我们说到哪了。是的，我们才说完 obtainFreshBeanFactory() 方法。</p><p>考虑到篇幅，这里开始大幅缩减掉没必要详细介绍的部分，大家直接看下面的代码中的注释就好了。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException<span class="token punctuation">,</span> IllegalStateException <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 来个锁，不然 refresh() 还没结束，你又来个启动或销毁容器的操作，那不就乱套了嘛</span>   <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>startupShutdownMonitor<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 准备工作，记录下容器的启动时间、标记“已启动”状态、处理配置文件中的占位符</span>      <span class="token function">prepareRefresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 这步比较关键，这步完成后，配置文件就会解析成一个个 Bean 定义，注册到 BeanFactory 中，</span>      <span class="token comment" spellcheck="true">// 当然，这里说的 Bean 还没有初始化，只是配置信息都提取出来了，</span>      <span class="token comment" spellcheck="true">// 注册也只是将这些信息都保存到了注册中心(说到底核心是一个 beanName-> beanDefinition 的 map)</span>      ConfigurableListableBeanFactory beanFactory <span class="token operator">=</span> <span class="token function">obtainFreshBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 设置 BeanFactory 的类加载器，添加几个 BeanPostProcessor，手动注册几个特殊的 bean</span>      <span class="token comment" spellcheck="true">// 这块待会会展开说</span>      <span class="token function">prepareBeanFactory</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 【这里需要知道 BeanFactoryPostProcessor 这个知识点，Bean 如果实现了此接口，</span>         <span class="token comment" spellcheck="true">// 那么在容器初始化以后，Spring 会负责调用里面的 postProcessBeanFactory 方法。】</span>         <span class="token comment" spellcheck="true">// 这里是提供给子类的扩展点，到这里的时候，所有的 Bean 都加载、注册完成了，但是都还没有初始化</span>         <span class="token comment" spellcheck="true">// 具体的子类可以在这步的时候添加一些特殊的 BeanFactoryPostProcessor 的实现类或做点什么事</span>         <span class="token function">postProcessBeanFactory</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 调用 BeanFactoryPostProcessor 各个实现类的 postProcessBeanFactory(factory) 回调方法</span>         <span class="token function">invokeBeanFactoryPostProcessors</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token comment" spellcheck="true">// 注册 BeanPostProcessor 的实现类，注意看和 BeanFactoryPostProcessor 的区别</span>         <span class="token comment" spellcheck="true">// 此接口两个方法: postProcessBeforeInitialization 和 postProcessAfterInitialization</span>         <span class="token comment" spellcheck="true">// 两个方法分别在 Bean 初始化之前和初始化之后得到执行。这里仅仅是注册，之后会看到回调这两方法的时机</span>         <span class="token function">registerBeanPostProcessors</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 初始化当前 ApplicationContext 的 MessageSource，初始化这里就不展开说了，不然没完没了了</span>         <span class="token function">initMessageSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 初始化当前 ApplicationContext 的事件广播器，这里也不展开了</span>         <span class="token function">initApplicationEventMulticaster</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 从方法名就可以知道，典型的模板方法(钩子方法)，不展开说</span>         <span class="token comment" spellcheck="true">// 具体的子类可以在这里初始化一些特殊的 Bean（在初始化 singleton beans 之前）</span>         <span class="token function">onRefresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 注册事件监听器，监听器需要实现 ApplicationListener 接口。这也不是我们的重点，过</span>         <span class="token function">registerListeners</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 重点，重点，重点</span>         <span class="token comment" spellcheck="true">// 初始化所有的 singleton beans</span>         <span class="token comment" spellcheck="true">//（lazy-init 的除外）</span>         <span class="token function">finishBeanFactoryInitialization</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 最后，广播事件，ApplicationContext 初始化完成，不展开</span>         <span class="token function">finishRefresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BeansException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isWarnEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"Exception encountered during context initialization - "</span> <span class="token operator">+</span>                  <span class="token string">"cancelling refresh attempt: "</span> <span class="token operator">+</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token comment" spellcheck="true">// Destroy already created singletons to avoid dangling resources.</span>         <span class="token comment" spellcheck="true">// 销毁已经初始化的 singleton 的 Beans，以免有些 bean 会一直占用资源</span>         <span class="token function">destroyBeans</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// Reset 'active' flag.</span>         <span class="token function">cancelRefresh</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 把异常往外抛</span>         <span class="token keyword">throw</span> ex<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">finally</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// Reset common introspection caches in Spring's core, since we</span>         <span class="token comment" spellcheck="true">// might not ever need metadata for singleton beans anymore...</span>         <span class="token function">resetCommonCaches</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="4-4准备-Bean-容器-prepareBeanFactory"><a href="#4-4准备-Bean-容器-prepareBeanFactory" class="headerlink" title="4.4准备 Bean 容器: prepareBeanFactory"></a>4.4准备 Bean 容器: prepareBeanFactory</h3><p>之前我们说过，Spring 把我们在 xml 配置的 bean 都注册以后，会”手动”注册一些特殊的 bean。</p><p>这里简单介绍下 prepareBeanFactory(factory) 方法：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Configure the factory's standard context characteristics, * such as the context's ClassLoader and post-processors. * @param beanFactory the BeanFactory to configure */</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">prepareBeanFactory</span><span class="token punctuation">(</span>ConfigurableListableBeanFactory beanFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 设置 BeanFactory 的类加载器，我们知道 BeanFactory 需要加载类，也就需要类加载器，</span>   <span class="token comment" spellcheck="true">// 这里设置为加载当前 ApplicationContext 类的类加载器</span>   beanFactory<span class="token punctuation">.</span><span class="token function">setBeanClassLoader</span><span class="token punctuation">(</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 设置 BeanExpressionResolver</span>   beanFactory<span class="token punctuation">.</span><span class="token function">setBeanExpressionResolver</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StandardBeanExpressionResolver</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">.</span><span class="token function">getBeanClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// </span>   beanFactory<span class="token punctuation">.</span><span class="token function">addPropertyEditorRegistrar</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ResourceEditorRegistrar</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token function">getEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 添加一个 BeanPostProcessor，这个 processor 比较简单：</span>   <span class="token comment" spellcheck="true">// 实现了 Aware 接口的 beans 在初始化的时候，这个 processor 负责回调，</span>   <span class="token comment" spellcheck="true">// 这个我们很常用，如我们会为了获取 ApplicationContext 而 implement ApplicationContextAware</span>   <span class="token comment" spellcheck="true">// 注意：它不仅仅回调 ApplicationContextAware，</span>   <span class="token comment" spellcheck="true">//   还会负责回调 EnvironmentAware、ResourceLoaderAware 等，看下源码就清楚了</span>   beanFactory<span class="token punctuation">.</span><span class="token function">addBeanPostProcessor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ApplicationContextAwareProcessor</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 下面几行的意思就是，如果某个 bean 依赖于以下几个接口的实现类，在自动装配的时候忽略它们，</span>   <span class="token comment" spellcheck="true">// Spring 会通过其他方式来处理这些依赖。</span>   beanFactory<span class="token punctuation">.</span><span class="token function">ignoreDependencyInterface</span><span class="token punctuation">(</span>EnvironmentAware<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   beanFactory<span class="token punctuation">.</span><span class="token function">ignoreDependencyInterface</span><span class="token punctuation">(</span>EmbeddedValueResolverAware<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   beanFactory<span class="token punctuation">.</span><span class="token function">ignoreDependencyInterface</span><span class="token punctuation">(</span>ResourceLoaderAware<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   beanFactory<span class="token punctuation">.</span><span class="token function">ignoreDependencyInterface</span><span class="token punctuation">(</span>ApplicationEventPublisherAware<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   beanFactory<span class="token punctuation">.</span><span class="token function">ignoreDependencyInterface</span><span class="token punctuation">(</span>MessageSourceAware<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   beanFactory<span class="token punctuation">.</span><span class="token function">ignoreDependencyInterface</span><span class="token punctuation">(</span>ApplicationContextAware<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">/**    * 下面几行就是为特殊的几个 bean 赋值，如果有 bean 依赖了以下几个，会注入这边相应的值，    * 之前我们说过，"当前 ApplicationContext 持有一个 BeanFactory"，这里解释了第一行。    * ApplicationContext 还继承了 ResourceLoader、ApplicationEventPublisher、MessageSource    * 所以对于这几个依赖，可以赋值为 this，注意 this 是一个 ApplicationContext    * 那这里怎么没看到为 MessageSource 赋值呢？那是因为 MessageSource 被注册成为了一个普通的 bean    */</span>   beanFactory<span class="token punctuation">.</span><span class="token function">registerResolvableDependency</span><span class="token punctuation">(</span>BeanFactory<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>   beanFactory<span class="token punctuation">.</span><span class="token function">registerResolvableDependency</span><span class="token punctuation">(</span>ResourceLoader<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   beanFactory<span class="token punctuation">.</span><span class="token function">registerResolvableDependency</span><span class="token punctuation">(</span>ApplicationEventPublisher<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   beanFactory<span class="token punctuation">.</span><span class="token function">registerResolvableDependency</span><span class="token punctuation">(</span>ApplicationContext<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 这个 BeanPostProcessor 也很简单，在 bean 实例化后，如果是 ApplicationListener 的子类，</span>   <span class="token comment" spellcheck="true">// 那么将其添加到 listener 列表中，可以理解成：注册 事件监听器</span>   beanFactory<span class="token punctuation">.</span><span class="token function">addBeanPostProcessor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ApplicationListenerDetector</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 这里涉及到特殊的 bean，名为：loadTimeWeaver，这不是我们的重点，忽略它</span>   <span class="token comment" spellcheck="true">// tips: ltw 是 AspectJ 的概念，指的是在运行期进行织入，这个和 Spring AOP 不一样，</span>   <span class="token comment" spellcheck="true">//    感兴趣的读者请参考我写的关于 AspectJ 的另一篇文章 https://www.javadoop.com/post/aspectj</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>beanFactory<span class="token punctuation">.</span><span class="token function">containsBean</span><span class="token punctuation">(</span>LOAD_TIME_WEAVER_BEAN_NAME<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      beanFactory<span class="token punctuation">.</span><span class="token function">addBeanPostProcessor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LoadTimeWeaverAwareProcessor</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// Set a temporary ClassLoader for type matching.</span>      beanFactory<span class="token punctuation">.</span><span class="token function">setTempClassLoader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ContextTypeMatchClassLoader</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">.</span><span class="token function">getBeanClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">/**    * 从下面几行代码我们可以知道，Spring 往往很 "智能" 就是因为它会帮我们默认注册一些有用的 bean，    * 我们也可以选择覆盖    */</span>   <span class="token comment" spellcheck="true">// 如果没有定义 "environment" 这个 bean，那么 Spring 会 "手动" 注册一个</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>beanFactory<span class="token punctuation">.</span><span class="token function">containsLocalBean</span><span class="token punctuation">(</span>ENVIRONMENT_BEAN_NAME<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      beanFactory<span class="token punctuation">.</span><span class="token function">registerSingleton</span><span class="token punctuation">(</span>ENVIRONMENT_BEAN_NAME<span class="token punctuation">,</span> <span class="token function">getEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">// 如果没有定义 "systemProperties" 这个 bean，那么 Spring 会 "手动" 注册一个</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>beanFactory<span class="token punctuation">.</span><span class="token function">containsLocalBean</span><span class="token punctuation">(</span>SYSTEM_PROPERTIES_BEAN_NAME<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      beanFactory<span class="token punctuation">.</span><span class="token function">registerSingleton</span><span class="token punctuation">(</span>SYSTEM_PROPERTIES_BEAN_NAME<span class="token punctuation">,</span> <span class="token function">getEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSystemProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">// 如果没有定义 "systemEnvironment" 这个 bean，那么 Spring 会 "手动" 注册一个</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>beanFactory<span class="token punctuation">.</span><span class="token function">containsLocalBean</span><span class="token punctuation">(</span>SYSTEM_ENVIRONMENT_BEAN_NAME<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      beanFactory<span class="token punctuation">.</span><span class="token function">registerSingleton</span><span class="token punctuation">(</span>SYSTEM_ENVIRONMENT_BEAN_NAME<span class="token punctuation">,</span> <span class="token function">getEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSystemEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>在上面这块代码中，Spring 对一些特殊的 bean 进行了处理，读者如果暂时还不能消化它们也没有关系，慢慢往下看。</p><h3 id="4-5初始化所有的-singleton-beans"><a href="#4-5初始化所有的-singleton-beans" class="headerlink" title="4.5初始化所有的 singleton beans"></a>4.5初始化所有的 singleton beans</h3><p>我们的重点当然是 <code>finishBeanFactoryInitialization(beanFactory);</code> 这个巨头了，这里会负责初始化所有的 singleton beans。</p><p>注意，后面的描述中，我都会使用<strong>初始化</strong>或<strong>预初始化</strong>来代表这个阶段，Spring 会在这个阶段完成所有的 singleton beans 的实例化。</p><p>我们来总结一下，到目前为止，应该说 BeanFactory 已经创建完成，并且所有的实现了 BeanFactoryPostProcessor 接口的 Bean 都已经初始化并且其中的 postProcessBeanFactory(factory) 方法已经得到回调执行了。而且 Spring 已经“手动”注册了一些特殊的 Bean，如 <code>environment</code>、<code>systemProperties</code> 等。</p><p>剩下的就是初始化 singleton beans 了，我们知道它们是单例的，如果没有设置懒加载，那么 Spring 会在接下来初始化所有的 singleton beans。</p><p>// AbstractApplicationContext.java 834</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 初始化剩余的 singleton beans</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">finishBeanFactoryInitialization</span><span class="token punctuation">(</span>ConfigurableListableBeanFactory beanFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 首先，初始化名字为 conversionService 的 Bean。本着送佛送到西的精神，我在附录中简单介绍了一下 ConversionService，因为这实在太实用了</span>   <span class="token comment" spellcheck="true">// 什么，看代码这里没有初始化 Bean 啊！</span>   <span class="token comment" spellcheck="true">// 注意了，初始化的动作包装在 beanFactory.getBean(...) 中，这里先不说细节，先往下看吧</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>beanFactory<span class="token punctuation">.</span><span class="token function">containsBean</span><span class="token punctuation">(</span>CONVERSION_SERVICE_BEAN_NAME<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>         beanFactory<span class="token punctuation">.</span><span class="token function">isTypeMatch</span><span class="token punctuation">(</span>CONVERSION_SERVICE_BEAN_NAME<span class="token punctuation">,</span> ConversionService<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      beanFactory<span class="token punctuation">.</span><span class="token function">setConversionService</span><span class="token punctuation">(</span>            beanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>CONVERSION_SERVICE_BEAN_NAME<span class="token punctuation">,</span> ConversionService<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">// Register a default embedded value resolver if no bean post-processor</span>   <span class="token comment" spellcheck="true">// (such as a PropertyPlaceholderConfigurer bean) registered any before:</span>   <span class="token comment" spellcheck="true">// at this point, primarily for resolution in annotation attribute values.</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>beanFactory<span class="token punctuation">.</span><span class="token function">hasEmbeddedValueResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      beanFactory<span class="token punctuation">.</span><span class="token function">addEmbeddedValueResolver</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringValueResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token annotation punctuation">@Override</span>         <span class="token keyword">public</span> String <span class="token function">resolveStringValue</span><span class="token punctuation">(</span>String strVal<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">getEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">resolvePlaceholders</span><span class="token punctuation">(</span>strVal<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">// 先初始化 LoadTimeWeaverAware 类型的 Bean</span>   <span class="token comment" spellcheck="true">// 之前也说过，这是 AspectJ 相关的内容，放心跳过吧</span>   String<span class="token punctuation">[</span><span class="token punctuation">]</span> weaverAwareNames <span class="token operator">=</span> beanFactory<span class="token punctuation">.</span><span class="token function">getBeanNamesForType</span><span class="token punctuation">(</span>LoadTimeWeaverAware<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">for</span> <span class="token punctuation">(</span>String weaverAwareName <span class="token operator">:</span> weaverAwareNames<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">getBean</span><span class="token punctuation">(</span>weaverAwareName<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">// Stop using the temporary ClassLoader for type matching.</span>   beanFactory<span class="token punctuation">.</span><span class="token function">setTempClassLoader</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 没什么别的目的，因为到这一步的时候，Spring 已经开始预初始化 singleton beans 了，</span>   <span class="token comment" spellcheck="true">// 肯定不希望这个时候还出现 bean 定义解析、加载、注册。</span>   beanFactory<span class="token punctuation">.</span><span class="token function">freezeConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 开始初始化</span>   beanFactory<span class="token punctuation">.</span><span class="token function">preInstantiateSingletons</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>从上面最后一行往里看，我们就又回到 DefaultListableBeanFactory 这个类了，这个类大家应该都不陌生了吧。</p><h4 id="4-5-1preInstantiateSingletons"><a href="#4-5-1preInstantiateSingletons" class="headerlink" title="4.5.1preInstantiateSingletons"></a>4.5.1preInstantiateSingletons</h4><p>// DefaultListableBeanFactory 728</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">preInstantiateSingletons</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException <span class="token punctuation">{</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Pre-instantiating singletons in "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">// this.beanDefinitionNames 保存了所有的 beanNames</span>   List<span class="token operator">&lt;</span>String<span class="token operator">></span> beanNames <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>beanDefinitionNames<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 下面这个循环，触发所有的非懒加载的 singleton beans 的初始化操作</span>   <span class="token keyword">for</span> <span class="token punctuation">(</span>String beanName <span class="token operator">:</span> beanNames<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 合并父 Bean 中的配置，注意 &lt;bean id="" class="" parent="" /> 中的 parent，用的不多吧，</span>      <span class="token comment" spellcheck="true">// 考虑到这可能会影响大家的理解，我在附录中解释了一下 "Bean 继承"，不了解的请到附录中看一下</span>      RootBeanDefinition bd <span class="token operator">=</span> <span class="token function">getMergedLocalBeanDefinition</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 非抽象、非懒加载的 singletons。如果配置了 'abstract = true'，那是不需要初始化的</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>bd<span class="token punctuation">.</span><span class="token function">isAbstract</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> bd<span class="token punctuation">.</span><span class="token function">isSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>bd<span class="token punctuation">.</span><span class="token function">isLazyInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 处理 FactoryBean(读者如果不熟悉 FactoryBean，请移步附录区了解)</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isFactoryBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// FactoryBean 的话，在 beanName 前面加上 ‘&amp;’ 符号。再调用 getBean，getBean 方法别急</span>            <span class="token keyword">final</span> FactoryBean<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> factory <span class="token operator">=</span> <span class="token punctuation">(</span>FactoryBean<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">)</span> <span class="token function">getBean</span><span class="token punctuation">(</span>FACTORY_BEAN_PREFIX <span class="token operator">+</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 判断当前 FactoryBean 是否是 SmartFactoryBean 的实现，此处忽略，直接跳过</span>            <span class="token keyword">boolean</span> isEagerInit<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">getSecurityManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> factory <span class="token keyword">instanceof</span> <span class="token class-name">SmartFactoryBean</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>               isEagerInit <span class="token operator">=</span> AccessController<span class="token punctuation">.</span><span class="token function">doPrivileged</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PrivilegedAction</span><span class="token operator">&lt;</span>Boolean<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  <span class="token annotation punctuation">@Override</span>                  <span class="token keyword">public</span> Boolean <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                     <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>SmartFactoryBean<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">)</span> factory<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEagerInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token punctuation">}</span>               <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token function">getAccessControlContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>               isEagerInit <span class="token operator">=</span> <span class="token punctuation">(</span>factory <span class="token keyword">instanceof</span> <span class="token class-name">SmartFactoryBean</span> <span class="token operator">&amp;&amp;</span>                     <span class="token punctuation">(</span><span class="token punctuation">(</span>SmartFactoryBean<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">)</span> factory<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEagerInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>isEagerInit<span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token function">getBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>         <span class="token punctuation">}</span>         <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 对于普通的 Bean，只要调用 getBean(beanName) 这个方法就可以进行初始化了</span>            <span class="token function">getBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">// 到这里说明所有的非懒加载的 singleton beans 已经完成了初始化</span>   <span class="token comment" spellcheck="true">// 如果我们定义的 bean 是实现了 SmartInitializingSingleton 接口的，那么在这里得到回调，忽略</span>   <span class="token keyword">for</span> <span class="token punctuation">(</span>String beanName <span class="token operator">:</span> beanNames<span class="token punctuation">)</span> <span class="token punctuation">{</span>      Object singletonInstance <span class="token operator">=</span> <span class="token function">getSingleton</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>singletonInstance <span class="token keyword">instanceof</span> <span class="token class-name">SmartInitializingSingleton</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">final</span> SmartInitializingSingleton smartSingleton <span class="token operator">=</span> <span class="token punctuation">(</span>SmartInitializingSingleton<span class="token punctuation">)</span> singletonInstance<span class="token punctuation">;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">getSecurityManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            AccessController<span class="token punctuation">.</span><span class="token function">doPrivileged</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PrivilegedAction</span><span class="token operator">&lt;</span>Object<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token annotation punctuation">@Override</span>               <span class="token keyword">public</span> Object <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  smartSingleton<span class="token punctuation">.</span><span class="token function">afterSingletonsInstantiated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token keyword">return</span> null<span class="token punctuation">;</span>               <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token function">getAccessControlContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token keyword">else</span> <span class="token punctuation">{</span>            smartSingleton<span class="token punctuation">.</span><span class="token function">afterSingletonsInstantiated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>接下来，我们就进入到 getBean(beanName) 方法了，这个方法我们经常用来从 BeanFactory 中获取一个 Bean，而初始化的过程也封装到了这个方法里。</p><h4 id="4-5-2getBean"><a href="#4-5-2getBean" class="headerlink" title="4.5.2getBean"></a>4.5.2getBean</h4><p>在继续前进之前，读者应该具备 FactoryBean 的知识，如果读者还不熟悉，请移步附录部分了解 FactoryBean。</p><p>// AbstractBeanFactory 196</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> Object <span class="token function">getBean</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException <span class="token punctuation">{</span>   <span class="token keyword">return</span> <span class="token function">doGetBean</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> null<span class="token punctuation">,</span> null<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 我们在剖析初始化 Bean 的过程，但是 getBean 方法我们经常是用来从容器中获取 Bean 用的，注意切换思路，</span><span class="token comment" spellcheck="true">// 已经初始化过了就从容器中直接返回，否则就先初始化再返回</span><span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span><span class="token keyword">protected</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> T <span class="token function">doGetBean</span><span class="token punctuation">(</span>      <span class="token keyword">final</span> String name<span class="token punctuation">,</span> <span class="token keyword">final</span> Class<span class="token operator">&lt;</span>T<span class="token operator">></span> requiredType<span class="token punctuation">,</span> <span class="token keyword">final</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">,</span> <span class="token keyword">boolean</span> typeCheckOnly<span class="token punctuation">)</span>      <span class="token keyword">throws</span> BeansException <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 获取一个 “正统的” beanName，处理两种情况，一个是前面说的 FactoryBean(前面带 ‘&amp;’)，</span>   <span class="token comment" spellcheck="true">// 一个是别名问题，因为这个方法是 getBean，获取 Bean 用的，你要是传一个别名进来，是完全可以的</span>   <span class="token keyword">final</span> String beanName <span class="token operator">=</span> <span class="token function">transformedBeanName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 注意跟着这个，这个是返回值</span>   Object bean<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 检查下是不是已经创建过了</span>   Object sharedInstance <span class="token operator">=</span> <span class="token function">getSingleton</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 这里说下 args 呗，虽然看上去一点不重要。前面我们一路进来的时候都是 getBean(beanName)，</span>   <span class="token comment" spellcheck="true">// 所以 args 传参其实是 null 的，但是如果 args 不为空的时候，那么意味着调用方不是希望获取 Bean，而是创建 Bean</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>sharedInstance <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> args <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isSingletonCurrentlyInCreation</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token keyword">else</span> <span class="token punctuation">{</span>            logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Returning cached instance of singleton bean '"</span> <span class="token operator">+</span> beanName <span class="token operator">+</span> <span class="token string">"'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// 下面这个方法：如果是普通 Bean 的话，直接返回 sharedInstance，</span>      <span class="token comment" spellcheck="true">// 如果是 FactoryBean 的话，返回它创建的那个实例对象</span>      <span class="token comment" spellcheck="true">// (FactoryBean 知识，读者若不清楚请移步附录)</span>      bean <span class="token operator">=</span> <span class="token function">getObjectForBeanInstance</span><span class="token punctuation">(</span>sharedInstance<span class="token punctuation">,</span> name<span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isPrototypeCurrentlyInCreation</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 创建过了此 beanName 的 prototype 类型的 bean，那么抛异常，</span>         <span class="token comment" spellcheck="true">// 往往是因为陷入了循环引用</span>         <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanCurrentlyInCreationException</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// 检查一下这个 BeanDefinition 在容器中是否存在</span>      BeanFactory parentBeanFactory <span class="token operator">=</span> <span class="token function">getParentBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>parentBeanFactory <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">containsBeanDefinition</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 如果当前容器不存在这个 BeanDefinition，试试父容器中有没有</span>         String nameToLookup <span class="token operator">=</span> <span class="token function">originalBeanName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>args <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 返回父容器的查询结果</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span>T<span class="token punctuation">)</span> parentBeanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>nameToLookup<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// No args -> delegate to standard getBean method.</span>            <span class="token keyword">return</span> parentBeanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>nameToLookup<span class="token punctuation">,</span> requiredType<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>typeCheckOnly<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// typeCheckOnly 为 false，将当前 beanName 放入一个 alreadyCreated 的 Set 集合中。</span>         <span class="token function">markBeanAsCreated</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">/*       * 稍稍总结一下：       * 到这里的话，要准备创建 Bean 了，对于 singleton 的 Bean 来说，容器中还没创建过此 Bean；       * 对于 prototype 的 Bean 来说，本来就是要创建一个新的 Bean。       */</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>         <span class="token keyword">final</span> RootBeanDefinition mbd <span class="token operator">=</span> <span class="token function">getMergedLocalBeanDefinition</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token function">checkMergedBeanDefinition</span><span class="token punctuation">(</span>mbd<span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 先初始化依赖的所有 Bean，这个很好理解。</span>         <span class="token comment" spellcheck="true">// 注意，这里的依赖指的是 depends-on 中定义的依赖</span>         String<span class="token punctuation">[</span><span class="token punctuation">]</span> dependsOn <span class="token operator">=</span> mbd<span class="token punctuation">.</span><span class="token function">getDependsOn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>dependsOn <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>String dep <span class="token operator">:</span> dependsOn<span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token comment" spellcheck="true">// 检查是不是有循环依赖，这里的循环依赖和我们前面说的循环依赖又不一样，这里肯定是不允许出现的，不然要乱套了，读者想一下就知道了</span>               <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDependent</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> dep<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanCreationException</span><span class="token punctuation">(</span>mbd<span class="token punctuation">.</span><span class="token function">getResourceDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> beanName<span class="token punctuation">,</span>                        <span class="token string">"Circular depends-on relationship between '"</span> <span class="token operator">+</span> beanName <span class="token operator">+</span> <span class="token string">"' and '"</span> <span class="token operator">+</span> dep <span class="token operator">+</span> <span class="token string">"'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">}</span>               <span class="token comment" spellcheck="true">// 注册一下依赖关系</span>               <span class="token function">registerDependentBean</span><span class="token punctuation">(</span>dep<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">// 先初始化被依赖项</span>               <span class="token function">getBean</span><span class="token punctuation">(</span>dep<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>         <span class="token punctuation">}</span>         <span class="token comment" spellcheck="true">// 如果是 singleton scope 的，创建 singleton 的实例</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>mbd<span class="token punctuation">.</span><span class="token function">isSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            sharedInstance <span class="token operator">=</span> <span class="token function">getSingleton</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ObjectFactory</span><span class="token operator">&lt;</span>Object<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token annotation punctuation">@Override</span>               <span class="token keyword">public</span> Object <span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException <span class="token punctuation">{</span>                  <span class="token keyword">try</span> <span class="token punctuation">{</span>                     <span class="token comment" spellcheck="true">// 执行创建 Bean，详情后面再说</span>                     <span class="token keyword">return</span> <span class="token function">createBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> mbd<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token punctuation">}</span>                  <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BeansException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                     <span class="token function">destroySingleton</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>                     <span class="token keyword">throw</span> ex<span class="token punctuation">;</span>                  <span class="token punctuation">}</span>               <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            bean <span class="token operator">=</span> <span class="token function">getObjectForBeanInstance</span><span class="token punctuation">(</span>sharedInstance<span class="token punctuation">,</span> name<span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> mbd<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token comment" spellcheck="true">// 如果是 prototype scope 的，创建 prototype 的实例</span>         <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>mbd<span class="token punctuation">.</span><span class="token function">isPrototype</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// It's a prototype -> create a new instance.</span>            Object prototypeInstance <span class="token operator">=</span> null<span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>               <span class="token function">beforePrototypeCreation</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">// 执行创建 Bean</span>               prototypeInstance <span class="token operator">=</span> <span class="token function">createBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> mbd<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">finally</span> <span class="token punctuation">{</span>               <span class="token function">afterPrototypeCreation</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            bean <span class="token operator">=</span> <span class="token function">getObjectForBeanInstance</span><span class="token punctuation">(</span>prototypeInstance<span class="token punctuation">,</span> name<span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> mbd<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token comment" spellcheck="true">// 如果不是 singleton 和 prototype 的话，需要委托给相应的实现类来处理</span>         <span class="token keyword">else</span> <span class="token punctuation">{</span>            String scopeName <span class="token operator">=</span> mbd<span class="token punctuation">.</span><span class="token function">getScope</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">final</span> Scope scope <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>scopes<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>scopeName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>scope <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"No Scope registered for scope name '"</span> <span class="token operator">+</span> scopeName <span class="token operator">+</span> <span class="token string">"'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>               Object scopedInstance <span class="token operator">=</span> scope<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ObjectFactory</span><span class="token operator">&lt;</span>Object<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  <span class="token annotation punctuation">@Override</span>                  <span class="token keyword">public</span> Object <span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException <span class="token punctuation">{</span>                     <span class="token function">beforePrototypeCreation</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>                     <span class="token keyword">try</span> <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">// 执行创建 Bean</span>                        <span class="token keyword">return</span> <span class="token function">createBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> mbd<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>                     <span class="token punctuation">}</span>                     <span class="token keyword">finally</span> <span class="token punctuation">{</span>                        <span class="token function">afterPrototypeCreation</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>                     <span class="token punctuation">}</span>                  <span class="token punctuation">}</span>               <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               bean <span class="token operator">=</span> <span class="token function">getObjectForBeanInstance</span><span class="token punctuation">(</span>scopedInstance<span class="token punctuation">,</span> name<span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> mbd<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IllegalStateException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanCreationException</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span>                     <span class="token string">"Scope '"</span> <span class="token operator">+</span> scopeName <span class="token operator">+</span> <span class="token string">"' is not active for the current thread; consider "</span> <span class="token operator">+</span>                     <span class="token string">"defining a scoped proxy for this bean if you intend to refer to it from a singleton"</span><span class="token punctuation">,</span>                     ex<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>         <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BeansException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token function">cleanupAfterBeanCreationFailure</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">throw</span> ex<span class="token punctuation">;</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">// 最后，检查一下类型对不对，不对的话就抛异常，对的话就返回了</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>requiredType <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> bean <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>requiredType<span class="token punctuation">.</span><span class="token function">isInstance</span><span class="token punctuation">(</span>bean<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span> <span class="token function">getTypeConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">convertIfNecessary</span><span class="token punctuation">(</span>bean<span class="token punctuation">,</span> requiredType<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">TypeMismatchException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Failed to convert bean '"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">"' to required type '"</span> <span class="token operator">+</span>                  ClassUtils<span class="token punctuation">.</span><span class="token function">getQualifiedName</span><span class="token punctuation">(</span>requiredType<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"'"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanNotOfRequiredTypeException</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> requiredType<span class="token punctuation">,</span> bean<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span>   <span class="token keyword">return</span> <span class="token punctuation">(</span>T<span class="token punctuation">)</span> bean<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>大家应该也猜到了，接下来当然是分析 createBean 方法：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">abstract</span> Object <span class="token function">createBean</span><span class="token punctuation">(</span>String beanName<span class="token punctuation">,</span> RootBeanDefinition mbd<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeanCreationException<span class="token punctuation">;</span></code></pre><p>第三个参数 args 数组代表创建实例需要的参数，不就是给构造方法用的参数，或者是工厂 Bean 的参数嘛，不过要注意，在我们的初始化阶段，args 是 null。</p><p>这回我们要到一个新的类了 AbstractAutowireCapableBeanFactory，看类名，AutowireCapable？类名是不是也说明了点问题了。</p><p>主要是为了以下场景，采用 @Autowired 注解注入属性值：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MessageServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">MessageService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> UserService userService<span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userService<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"messageService"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"com.javadoop.example.MessageServiceImpl"</span> <span class="token operator">/</span><span class="token operator">></span></code></pre><p>以上这种属于混用了 xml 和 注解 两种方式的配置方式，Spring 会处理这种情况。</p><p>好了，读者要知道这么回事就可以了，继续向前。</p><p>// AbstractAutowireCapableBeanFactory 447</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Central method of this class: creates a bean instance, * populates the bean instance, applies post-processors, etc. * @see #doCreateBean */</span><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> Object <span class="token function">createBean</span><span class="token punctuation">(</span>String beanName<span class="token punctuation">,</span> RootBeanDefinition mbd<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeanCreationException <span class="token punctuation">{</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Creating instance of bean '"</span> <span class="token operator">+</span> beanName <span class="token operator">+</span> <span class="token string">"'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   RootBeanDefinition mbdToUse <span class="token operator">=</span> mbd<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 确保 BeanDefinition 中的 Class 被加载</span>   Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> resolvedClass <span class="token operator">=</span> <span class="token function">resolveBeanClass</span><span class="token punctuation">(</span>mbd<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>resolvedClass <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>mbd<span class="token punctuation">.</span><span class="token function">hasBeanClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> mbd<span class="token punctuation">.</span><span class="token function">getBeanClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      mbdToUse <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RootBeanDefinition</span><span class="token punctuation">(</span>mbd<span class="token punctuation">)</span><span class="token punctuation">;</span>      mbdToUse<span class="token punctuation">.</span><span class="token function">setBeanClass</span><span class="token punctuation">(</span>resolvedClass<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">// 准备方法覆写，这里又涉及到一个概念：MethodOverrides，它来自于 bean 定义中的 &lt;lookup-method /> </span>   <span class="token comment" spellcheck="true">// 和 &lt;replaced-method />，如果读者感兴趣，回到 bean 解析的地方看看对这两个标签的解析。</span>   <span class="token comment" spellcheck="true">// 我在附录中也对这两个标签的相关知识点进行了介绍，读者可以移步去看看</span>   <span class="token keyword">try</span> <span class="token punctuation">{</span>      mbdToUse<span class="token punctuation">.</span><span class="token function">prepareMethodOverrides</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BeanDefinitionValidationException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanDefinitionStoreException</span><span class="token punctuation">(</span>mbdToUse<span class="token punctuation">.</span><span class="token function">getResourceDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            beanName<span class="token punctuation">,</span> <span class="token string">"Validation of method overrides failed"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 让 InstantiationAwareBeanPostProcessor 在这一步有机会返回代理，</span>      <span class="token comment" spellcheck="true">// 在 《Spring AOP 源码分析》那篇文章中有解释，这里先跳过</span>      Object bean <span class="token operator">=</span> <span class="token function">resolveBeforeInstantiation</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> mbdToUse<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>bean <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span> bean<span class="token punctuation">;</span>       <span class="token punctuation">}</span>   <span class="token punctuation">}</span>   <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanCreationException</span><span class="token punctuation">(</span>mbdToUse<span class="token punctuation">.</span><span class="token function">getResourceDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> beanName<span class="token punctuation">,</span>            <span class="token string">"BeanPostProcessor before instantiation of bean failed"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">// 重头戏，创建 bean</span>   Object beanInstance <span class="token operator">=</span> <span class="token function">doCreateBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> mbdToUse<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Finished creating instance of bean '"</span> <span class="token operator">+</span> beanName <span class="token operator">+</span> <span class="token string">"'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">return</span> beanInstance<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="4-5-3创建-Bean"><a href="#4-5-3创建-Bean" class="headerlink" title="4.5.3创建 Bean"></a>4.5.3创建 Bean</h4><p>我们继续往里看 doCreateBean 这个方法：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Actually create the specified bean. Pre-creation processing has already happened * at this point, e.g. checking {@code postProcessBeforeInstantiation} callbacks. * &lt;p>Differentiates between default bean instantiation, use of a * factory method, and autowiring a constructor. * @param beanName the name of the bean * @param mbd the merged bean definition for the bean * @param args explicit arguments to use for constructor or factory method invocation * @return a new instance of the bean * @throws BeanCreationException if the bean could not be created * @see #instantiateBean * @see #instantiateUsingFactoryMethod * @see #autowireConstructor */</span><span class="token keyword">protected</span> Object <span class="token function">doCreateBean</span><span class="token punctuation">(</span><span class="token keyword">final</span> String beanName<span class="token punctuation">,</span> <span class="token keyword">final</span> RootBeanDefinition mbd<span class="token punctuation">,</span> <span class="token keyword">final</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>      <span class="token keyword">throws</span> BeanCreationException <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// Instantiate the bean.</span>   BeanWrapper instanceWrapper <span class="token operator">=</span> null<span class="token punctuation">;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>mbd<span class="token punctuation">.</span><span class="token function">isSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      instanceWrapper <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>factoryBeanInstanceCache<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>instanceWrapper <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 说明不是 FactoryBean，这里实例化 Bean，这里非常关键，细节之后再说</span>      instanceWrapper <span class="token operator">=</span> <span class="token function">createBeanInstance</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> mbd<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">// 这个就是 Bean 里面的 我们定义的类 的实例，很多地方我直接描述成 "bean 实例"</span>   <span class="token keyword">final</span> Object bean <span class="token operator">=</span> <span class="token punctuation">(</span>instanceWrapper <span class="token operator">!=</span> null <span class="token operator">?</span> instanceWrapper<span class="token punctuation">.</span><span class="token function">getWrappedInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 类型</span>   Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> beanType <span class="token operator">=</span> <span class="token punctuation">(</span>instanceWrapper <span class="token operator">!=</span> null <span class="token operator">?</span> instanceWrapper<span class="token punctuation">.</span><span class="token function">getWrappedClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>   mbd<span class="token punctuation">.</span>resolvedTargetType <span class="token operator">=</span> beanType<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 建议跳过吧，涉及接口：MergedBeanDefinitionPostProcessor</span>   <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>mbd<span class="token punctuation">.</span>postProcessingLock<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>mbd<span class="token punctuation">.</span>postProcessed<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// MergedBeanDefinitionPostProcessor，这个我真不展开说了，直接跳过吧，很少用的</span>            <span class="token function">applyMergedBeanDefinitionPostProcessors</span><span class="token punctuation">(</span>mbd<span class="token punctuation">,</span> beanType<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanCreationException</span><span class="token punctuation">(</span>mbd<span class="token punctuation">.</span><span class="token function">getResourceDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> beanName<span class="token punctuation">,</span>                  <span class="token string">"Post-processing of merged bean definition failed"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         mbd<span class="token punctuation">.</span>postProcessed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">// Eagerly cache singletons to be able to resolve circular references</span>   <span class="token comment" spellcheck="true">// even when triggered by lifecycle interfaces like BeanFactoryAware.</span>   <span class="token comment" spellcheck="true">// 下面这块代码是为了解决循环依赖的问题，以后有时间，我再对循环依赖这个问题进行解析吧</span>   <span class="token keyword">boolean</span> earlySingletonExposure <span class="token operator">=</span> <span class="token punctuation">(</span>mbd<span class="token punctuation">.</span><span class="token function">isSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>allowCircularReferences <span class="token operator">&amp;&amp;</span>         <span class="token function">isSingletonCurrentlyInCreation</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>earlySingletonExposure<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Eagerly caching bean '"</span> <span class="token operator">+</span> beanName <span class="token operator">+</span>               <span class="token string">"' to allow for resolving potential circular references"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token function">addSingletonFactory</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ObjectFactory</span><span class="token operator">&lt;</span>Object<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token annotation punctuation">@Override</span>         <span class="token keyword">public</span> Object <span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">getEarlyBeanReference</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> mbd<span class="token punctuation">,</span> bean<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">// Initialize the bean instance.</span>   Object exposedObject <span class="token operator">=</span> bean<span class="token punctuation">;</span>   <span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 这一步也是非常关键的，这一步负责属性装配，因为前面的实例只是实例化了，并没有设值，这里就是设值</span>      <span class="token function">populateBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> mbd<span class="token punctuation">,</span> instanceWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>exposedObject <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 还记得 init-method 吗？还有 InitializingBean 接口？还有 BeanPostProcessor 接口？</span>         <span class="token comment" spellcheck="true">// 这里就是处理 bean 初始化完成后的各种回调</span>         exposedObject <span class="token operator">=</span> <span class="token function">initializeBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> exposedObject<span class="token punctuation">,</span> mbd<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span>   <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>ex <span class="token keyword">instanceof</span> <span class="token class-name">BeanCreationException</span> <span class="token operator">&amp;&amp;</span> beanName<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>BeanCreationException<span class="token punctuation">)</span> ex<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBeanName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">throw</span> <span class="token punctuation">(</span>BeanCreationException<span class="token punctuation">)</span> ex<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">else</span> <span class="token punctuation">{</span>         <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanCreationException</span><span class="token punctuation">(</span>               mbd<span class="token punctuation">.</span><span class="token function">getResourceDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> <span class="token string">"Initialization of bean failed"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>earlySingletonExposure<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// </span>      Object earlySingletonReference <span class="token operator">=</span> <span class="token function">getSingleton</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>earlySingletonReference <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>exposedObject <span class="token operator">==</span> bean<span class="token punctuation">)</span> <span class="token punctuation">{</span>            exposedObject <span class="token operator">=</span> earlySingletonReference<span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>allowRawInjectionDespiteWrapping <span class="token operator">&amp;&amp;</span> <span class="token function">hasDependentBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            String<span class="token punctuation">[</span><span class="token punctuation">]</span> dependentBeans <span class="token operator">=</span> <span class="token function">getDependentBeans</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>            Set<span class="token operator">&lt;</span>String<span class="token operator">></span> actualDependentBeans <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashSet</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span>dependentBeans<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>String dependentBean <span class="token operator">:</span> dependentBeans<span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">removeSingletonIfCreatedForTypeCheckOnly</span><span class="token punctuation">(</span>dependentBean<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  actualDependentBeans<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>dependentBean<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>actualDependentBeans<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanCurrentlyInCreationException</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span>                     <span class="token string">"Bean with name '"</span> <span class="token operator">+</span> beanName <span class="token operator">+</span> <span class="token string">"' has been injected into other beans ["</span> <span class="token operator">+</span>                     StringUtils<span class="token punctuation">.</span><span class="token function">collectionToCommaDelimitedString</span><span class="token punctuation">(</span>actualDependentBeans<span class="token punctuation">)</span> <span class="token operator">+</span>                     <span class="token string">"] in its raw version as part of a circular reference, but has eventually been "</span> <span class="token operator">+</span>                     <span class="token string">"wrapped. This means that said other beans do not use the final version of the "</span> <span class="token operator">+</span>                     <span class="token string">"bean. This is often the result of over-eager type matching - consider using "</span> <span class="token operator">+</span>                     <span class="token string">"'getBeanNamesOfType' with the 'allowEagerInit' flag turned off, for example."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>         <span class="token punctuation">}</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">// Register bean as disposable.</span>   <span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token function">registerDisposableBeanIfNecessary</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> bean<span class="token punctuation">,</span> mbd<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BeanDefinitionValidationException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanCreationException</span><span class="token punctuation">(</span>            mbd<span class="token punctuation">.</span><span class="token function">getResourceDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> <span class="token string">"Invalid destruction signature"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">return</span> exposedObject<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>到这里，我们已经分析完了 doCreateBean 方法，总的来说，我们已经说完了整个初始化流程。</p><p>接下来我们挑 doCreateBean 中的三个细节出来说说。一个是创建 Bean 实例的 createBeanInstance 方法，一个是依赖注入的 populateBean 方法，还有就是回调方法 initializeBean。 </p><p>注意了，接下来的这三个方法要认真说那也是极其复杂的，很多地方我就点到为止了，感兴趣的读者可以自己往里看，最好就是碰到不懂的，自己写代码去调试它。</p><h5 id="创建-Bean-实例"><a href="#创建-Bean-实例" class="headerlink" title="创建 Bean 实例"></a>创建 Bean 实例</h5><p>我们先看看 createBeanInstance 方法。需要说明的是，这个方法如果每个分支都分析下去，必然也是极其复杂冗长的，我们挑重点说。此方法的目的就是实例化我们指定的类。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> BeanWrapper <span class="token function">createBeanInstance</span><span class="token punctuation">(</span>String beanName<span class="token punctuation">,</span> RootBeanDefinition mbd<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 确保已经加载了此 class</span>   Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> beanClass <span class="token operator">=</span> <span class="token function">resolveBeanClass</span><span class="token punctuation">(</span>mbd<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 校验一下这个类的访问权限</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>beanClass <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>Modifier<span class="token punctuation">.</span><span class="token function">isPublic</span><span class="token punctuation">(</span>beanClass<span class="token punctuation">.</span><span class="token function">getModifiers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>mbd<span class="token punctuation">.</span><span class="token function">isNonPublicAccessAllowed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanCreationException</span><span class="token punctuation">(</span>mbd<span class="token punctuation">.</span><span class="token function">getResourceDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> beanName<span class="token punctuation">,</span>            <span class="token string">"Bean class isn't public, and non-public access not allowed: "</span> <span class="token operator">+</span> beanClass<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>mbd<span class="token punctuation">.</span><span class="token function">getFactoryMethodName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span>  <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 采用工厂方法实例化，不熟悉这个概念的读者请看附录，注意，不是 FactoryBean</span>      <span class="token keyword">return</span> <span class="token function">instantiateUsingFactoryMethod</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> mbd<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">// 如果不是第一次创建，比如第二次创建 prototype bean。</span>   <span class="token comment" spellcheck="true">// 这种情况下，我们可以从第一次创建知道，采用无参构造函数，还是构造函数依赖注入 来完成实例化</span>   <span class="token keyword">boolean</span> resolved <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>   <span class="token keyword">boolean</span> autowireNecessary <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>args <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>mbd<span class="token punctuation">.</span>constructorArgumentLock<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>mbd<span class="token punctuation">.</span>resolvedConstructorOrFactoryMethod <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            resolved <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            autowireNecessary <span class="token operator">=</span> mbd<span class="token punctuation">.</span>constructorArgumentsResolved<span class="token punctuation">;</span>         <span class="token punctuation">}</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>resolved<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>autowireNecessary<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 构造函数依赖注入</span>         <span class="token keyword">return</span> <span class="token function">autowireConstructor</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> mbd<span class="token punctuation">,</span> null<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">else</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 无参构造函数</span>         <span class="token keyword">return</span> <span class="token function">instantiateBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> mbd<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">// 判断是否采用有参构造函数</span>   Constructor<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> ctors <span class="token operator">=</span> <span class="token function">determineConstructorsFromBeanPostProcessors</span><span class="token punctuation">(</span>beanClass<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>ctors <span class="token operator">!=</span> null <span class="token operator">||</span>         mbd<span class="token punctuation">.</span><span class="token function">getResolvedAutowireMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> RootBeanDefinition<span class="token punctuation">.</span>AUTOWIRE_CONSTRUCTOR <span class="token operator">||</span>         mbd<span class="token punctuation">.</span><span class="token function">hasConstructorArgumentValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span>ObjectUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 构造函数依赖注入</span>      <span class="token keyword">return</span> <span class="token function">autowireConstructor</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> mbd<span class="token punctuation">,</span> ctors<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">// 调用无参构造函数</span>   <span class="token keyword">return</span> <span class="token function">instantiateBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> mbd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>挑个简单的<strong>无参构造函数</strong>构造实例来看看：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> BeanWrapper <span class="token function">instantiateBean</span><span class="token punctuation">(</span><span class="token keyword">final</span> String beanName<span class="token punctuation">,</span> <span class="token keyword">final</span> RootBeanDefinition mbd<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">try</span> <span class="token punctuation">{</span>      Object beanInstance<span class="token punctuation">;</span>      <span class="token keyword">final</span> BeanFactory parent <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">getSecurityManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>         beanInstance <span class="token operator">=</span> AccessController<span class="token punctuation">.</span><span class="token function">doPrivileged</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PrivilegedAction</span><span class="token operator">&lt;</span>Object<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> Object <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token keyword">return</span> <span class="token function">getInstantiationStrategy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">instantiate</span><span class="token punctuation">(</span>mbd<span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> parent<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>         <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token function">getAccessControlContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">else</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 实例化</span>         beanInstance <span class="token operator">=</span> <span class="token function">getInstantiationStrategy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">instantiate</span><span class="token punctuation">(</span>mbd<span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> parent<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// 包装一下，返回</span>      BeanWrapper bw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BeanWrapperImpl</span><span class="token punctuation">(</span>beanInstance<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">initBeanWrapper</span><span class="token punctuation">(</span>bw<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> bw<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanCreationException</span><span class="token punctuation">(</span>            mbd<span class="token punctuation">.</span><span class="token function">getResourceDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> <span class="token string">"Instantiation of bean failed"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>我们可以看到，关键的地方在于：</p><pre class=" language-java"><code class="language-java">beanInstance <span class="token operator">=</span> <span class="token function">getInstantiationStrategy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">instantiate</span><span class="token punctuation">(</span>mbd<span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> parent<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这里会进行实际的实例化过程，我们进去看看:</p><p>// SimpleInstantiationStrategy 59</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> Object <span class="token function">instantiate</span><span class="token punctuation">(</span>RootBeanDefinition bd<span class="token punctuation">,</span> String beanName<span class="token punctuation">,</span> BeanFactory owner<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 如果不存在方法覆写，那就使用 java 反射进行实例化，否则使用 CGLIB,</span>   <span class="token comment" spellcheck="true">// 方法覆写 请参见附录"方法注入"中对 lookup-method 和 replaced-method 的介绍</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>bd<span class="token punctuation">.</span><span class="token function">getMethodOverrides</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      Constructor<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> constructorToUse<span class="token punctuation">;</span>      <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>bd<span class="token punctuation">.</span>constructorArgumentLock<span class="token punctuation">)</span> <span class="token punctuation">{</span>         constructorToUse <span class="token operator">=</span> <span class="token punctuation">(</span>Constructor<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">)</span> bd<span class="token punctuation">.</span>resolvedConstructorOrFactoryMethod<span class="token punctuation">;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>constructorToUse <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">final</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> clazz <span class="token operator">=</span> bd<span class="token punctuation">.</span><span class="token function">getBeanClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>clazz<span class="token punctuation">.</span><span class="token function">isInterface</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanInstantiationException</span><span class="token punctuation">(</span>clazz<span class="token punctuation">,</span> <span class="token string">"Specified class is an interface"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>               <span class="token keyword">if</span> <span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">getSecurityManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                  constructorToUse <span class="token operator">=</span> AccessController<span class="token punctuation">.</span><span class="token function">doPrivileged</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PrivilegedExceptionAction</span><span class="token operator">&lt;</span>Constructor<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                     <span class="token annotation punctuation">@Override</span>                     <span class="token keyword">public</span> Constructor<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>                        <span class="token keyword">return</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Class<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>                     <span class="token punctuation">}</span>                  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">}</span>               <span class="token keyword">else</span> <span class="token punctuation">{</span>                  constructorToUse <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Class<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">}</span>               bd<span class="token punctuation">.</span>resolvedConstructorOrFactoryMethod <span class="token operator">=</span> constructorToUse<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanInstantiationException</span><span class="token punctuation">(</span>clazz<span class="token punctuation">,</span> <span class="token string">"No default constructor found"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>         <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// 利用构造方法进行实例化</span>      <span class="token keyword">return</span> BeanUtils<span class="token punctuation">.</span><span class="token function">instantiateClass</span><span class="token punctuation">(</span>constructorToUse<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 存在方法覆写，利用 CGLIB 来完成实例化，需要依赖于 CGLIB 生成子类，这里就不展开了。</span>      <span class="token comment" spellcheck="true">// tips: 因为如果不使用 CGLIB 的话，存在 override 的情况 JDK 并没有提供相应的实例化支持</span>      <span class="token keyword">return</span> <span class="token function">instantiateWithMethodInjection</span><span class="token punctuation">(</span>bd<span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> owner<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>到这里，我们就算实例化完成了。我们开始说怎么进行属性注入。</p><h5 id="bean-属性注入"><a href="#bean-属性注入" class="headerlink" title="bean 属性注入"></a>bean 属性注入</h5><p>看完了 createBeanInstance(…) 方法，我们来看看 populateBean(…) 方法，该方法负责进行属性设值，处理依赖。</p><p>// AbstractAutowireCapableBeanFactory 1203</p><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">populateBean</span><span class="token punctuation">(</span>String beanName<span class="token punctuation">,</span> RootBeanDefinition mbd<span class="token punctuation">,</span> BeanWrapper bw<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// bean 实例的所有属性都在这里了</span>   PropertyValues pvs <span class="token operator">=</span> mbd<span class="token punctuation">.</span><span class="token function">getPropertyValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>bw <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>pvs<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanCreationException</span><span class="token punctuation">(</span>               mbd<span class="token punctuation">.</span><span class="token function">getResourceDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> <span class="token string">"Cannot apply property values to null instance"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">else</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// Skip property population phase for null instance.</span>         <span class="token keyword">return</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">// 到这步的时候，bean 实例化完成（通过工厂方法或构造方法），但是还没开始属性设值，</span>   <span class="token comment" spellcheck="true">// InstantiationAwareBeanPostProcessor 的实现类可以在这里对 bean 进行状态修改，</span>   <span class="token comment" spellcheck="true">// 我也没找到有实际的使用，所以我们暂且忽略这块吧</span>   <span class="token keyword">boolean</span> continueWithPropertyPopulation <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>mbd<span class="token punctuation">.</span><span class="token function">isSynthetic</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">hasInstantiationAwareBeanPostProcessors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span>BeanPostProcessor bp <span class="token operator">:</span> <span class="token function">getBeanPostProcessors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>bp <span class="token keyword">instanceof</span> <span class="token class-name">InstantiationAwareBeanPostProcessor</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            InstantiationAwareBeanPostProcessor ibp <span class="token operator">=</span> <span class="token punctuation">(</span>InstantiationAwareBeanPostProcessor<span class="token punctuation">)</span> bp<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 如果返回 false，代表不需要进行后续的属性设值，也不需要再经过其他的 BeanPostProcessor 的处理</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ibp<span class="token punctuation">.</span><span class="token function">postProcessAfterInstantiation</span><span class="token punctuation">(</span>bw<span class="token punctuation">.</span><span class="token function">getWrappedInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>               continueWithPropertyPopulation <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>               <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>         <span class="token punctuation">}</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>continueWithPropertyPopulation<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>mbd<span class="token punctuation">.</span><span class="token function">getResolvedAutowireMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> RootBeanDefinition<span class="token punctuation">.</span>AUTOWIRE_BY_NAME <span class="token operator">||</span>         mbd<span class="token punctuation">.</span><span class="token function">getResolvedAutowireMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> RootBeanDefinition<span class="token punctuation">.</span>AUTOWIRE_BY_TYPE<span class="token punctuation">)</span> <span class="token punctuation">{</span>      MutablePropertyValues newPvs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MutablePropertyValues</span><span class="token punctuation">(</span>pvs<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 通过名字找到所有属性值，如果是 bean 依赖，先初始化依赖的 bean。记录依赖关系</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>mbd<span class="token punctuation">.</span><span class="token function">getResolvedAutowireMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> RootBeanDefinition<span class="token punctuation">.</span>AUTOWIRE_BY_NAME<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token function">autowireByName</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> mbd<span class="token punctuation">,</span> bw<span class="token punctuation">,</span> newPvs<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// 通过类型装配。复杂一些</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>mbd<span class="token punctuation">.</span><span class="token function">getResolvedAutowireMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> RootBeanDefinition<span class="token punctuation">.</span>AUTOWIRE_BY_TYPE<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token function">autowireByType</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> mbd<span class="token punctuation">,</span> bw<span class="token punctuation">,</span> newPvs<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      pvs <span class="token operator">=</span> newPvs<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">boolean</span> hasInstAwareBpps <span class="token operator">=</span> <span class="token function">hasInstantiationAwareBeanPostProcessors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">boolean</span> needsDepCheck <span class="token operator">=</span> <span class="token punctuation">(</span>mbd<span class="token punctuation">.</span><span class="token function">getDependencyCheck</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> RootBeanDefinition<span class="token punctuation">.</span>DEPENDENCY_CHECK_NONE<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>hasInstAwareBpps <span class="token operator">||</span> needsDepCheck<span class="token punctuation">)</span> <span class="token punctuation">{</span>      PropertyDescriptor<span class="token punctuation">[</span><span class="token punctuation">]</span> filteredPds <span class="token operator">=</span> <span class="token function">filterPropertyDescriptorsForDependencyCheck</span><span class="token punctuation">(</span>bw<span class="token punctuation">,</span> mbd<span class="token punctuation">.</span>allowCaching<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>hasInstAwareBpps<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">for</span> <span class="token punctuation">(</span>BeanPostProcessor bp <span class="token operator">:</span> <span class="token function">getBeanPostProcessors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>bp <span class="token keyword">instanceof</span> <span class="token class-name">InstantiationAwareBeanPostProcessor</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>               InstantiationAwareBeanPostProcessor ibp <span class="token operator">=</span> <span class="token punctuation">(</span>InstantiationAwareBeanPostProcessor<span class="token punctuation">)</span> bp<span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">// 这里有个非常有用的 BeanPostProcessor 进到这里: AutowiredAnnotationBeanPostProcessor</span>               <span class="token comment" spellcheck="true">// 对采用 @Autowired、@Value 注解的依赖进行设值，这里的内容也是非常丰富的，不过本文不会展开说了，感兴趣的读者请自行研究</span>               pvs <span class="token operator">=</span> ibp<span class="token punctuation">.</span><span class="token function">postProcessPropertyValues</span><span class="token punctuation">(</span>pvs<span class="token punctuation">,</span> filteredPds<span class="token punctuation">,</span> bw<span class="token punctuation">.</span><span class="token function">getWrappedInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token keyword">if</span> <span class="token punctuation">(</span>pvs <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                  <span class="token keyword">return</span><span class="token punctuation">;</span>               <span class="token punctuation">}</span>            <span class="token punctuation">}</span>         <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>needsDepCheck<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token function">checkDependencies</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> mbd<span class="token punctuation">,</span> filteredPds<span class="token punctuation">,</span> pvs<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">// 设置 bean 实例的属性值</span>   <span class="token function">applyPropertyValues</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> mbd<span class="token punctuation">,</span> bw<span class="token punctuation">,</span> pvs<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h5 id="initializeBean"><a href="#initializeBean" class="headerlink" title="initializeBean"></a>initializeBean</h5><p>属性注入完成后，这一步其实就是处理各种回调了，这块代码比较简单。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> Object <span class="token function">initializeBean</span><span class="token punctuation">(</span><span class="token keyword">final</span> String beanName<span class="token punctuation">,</span> <span class="token keyword">final</span> Object bean<span class="token punctuation">,</span> RootBeanDefinition mbd<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">getSecurityManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      AccessController<span class="token punctuation">.</span><span class="token function">doPrivileged</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PrivilegedAction</span><span class="token operator">&lt;</span>Object<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token annotation punctuation">@Override</span>         <span class="token keyword">public</span> Object <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">invokeAwareMethods</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> bean<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>         <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token function">getAccessControlContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 如果 bean 实现了 BeanNameAware、BeanClassLoaderAware 或 BeanFactoryAware 接口，回调</span>      <span class="token function">invokeAwareMethods</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> bean<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   Object wrappedBean <span class="token operator">=</span> bean<span class="token punctuation">;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>mbd <span class="token operator">==</span> null <span class="token operator">||</span> <span class="token operator">!</span>mbd<span class="token punctuation">.</span><span class="token function">isSynthetic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// BeanPostProcessor 的 postProcessBeforeInitialization 回调</span>      wrappedBean <span class="token operator">=</span> <span class="token function">applyBeanPostProcessorsBeforeInitialization</span><span class="token punctuation">(</span>wrappedBean<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 处理 bean 中定义的 init-method，</span>      <span class="token comment" spellcheck="true">// 或者如果 bean 实现了 InitializingBean 接口，调用 afterPropertiesSet() 方法</span>      <span class="token function">invokeInitMethods</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> wrappedBean<span class="token punctuation">,</span> mbd<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanCreationException</span><span class="token punctuation">(</span>            <span class="token punctuation">(</span>mbd <span class="token operator">!=</span> null <span class="token operator">?</span> mbd<span class="token punctuation">.</span><span class="token function">getResourceDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> null<span class="token punctuation">)</span><span class="token punctuation">,</span>            beanName<span class="token punctuation">,</span> <span class="token string">"Invocation of init method failed"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>mbd <span class="token operator">==</span> null <span class="token operator">||</span> <span class="token operator">!</span>mbd<span class="token punctuation">.</span><span class="token function">isSynthetic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// BeanPostProcessor 的 postProcessAfterInitialization 回调</span>      wrappedBean <span class="token operator">=</span> <span class="token function">applyBeanPostProcessorsAfterInitialization</span><span class="token punctuation">(</span>wrappedBean<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">return</span> wrappedBean<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>大家发现没有，BeanPostProcessor 的两个回调都发生在这边，只不过中间处理了 init-method，是不是和读者原来的认知有点不一样了？</p><h2 id="5-总结"><a href="#5-总结" class="headerlink" title="5.总结"></a>5.总结</h2><p>按理说，总结应该写在附录前面，我就不讲究了。</p><p>在花了那么多时间后，这篇文章终于算是基本写完了，大家在惊叹 Spring 给我们做了那么多的事的时候，应该透过现象看本质，去理解 Spring 写得好的地方，去理解它的设计思想。</p><p>本文的缺陷在于对 Spring 预初始化 singleton beans 的过程分析不够，主要是代码量真的比较大，分支旁路众多。同时，虽然附录条目不少，但是庞大的 Spring 真的引出了很多的概念，希望日后有精力可以慢慢补充一些。</p><h2 id="6-附录"><a href="#6-附录" class="headerlink" title="6.附录"></a>6.附录</h2><h3 id="id-和-name"><a href="#id-和-name" class="headerlink" title="id 和 name"></a>id 和 name</h3><p>每个 Bean 在 Spring 容器中都有一个唯一的名字（beanName）和 0 个或多个别名（aliases）。</p><p>我们从 Spring 容器中获取 Bean 的时候，可以根据 beanName，也可以通过别名。</p><pre class=" language-java"><code class="language-java">beanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"beanName or alias"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>在配置<bean>  的过程中，我们可以配置 id 和 name，看几个例子就知道是怎么回事了。</bean></p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>messageService<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>m1, m2, m3<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.javadoop.example.MessageServiceImpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><p>以上配置的结果就是：beanName 为 messageService，别名有 3 个，分别为 m1、m2、m3。</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>m1, m2, m3<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.javadoop.example.MessageServiceImpl<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre><p>以上配置的结果就是：beanName 为 m1，别名有 2 个，分别为 m2、m3。</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.javadoop.example.MessageServiceImpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><p>beanName 为：com.javadoop.example.MessageServiceImpl#0，</p><p>别名 1 个，为： com.javadoop.example.MessageServiceImpl</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>messageService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.javadoop.example.MessageServiceImpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><p>以上配置的结果就是：beanName 为 messageService，没有别名。</p><h3 id="配置是否允许-Bean-覆盖、是否允许循环依赖"><a href="#配置是否允许-Bean-覆盖、是否允许循环依赖" class="headerlink" title="配置是否允许 Bean 覆盖、是否允许循环依赖"></a>配置是否允许 Bean 覆盖、是否允许循环依赖</h3><p>我们说过，默认情况下，allowBeanDefinitionOverriding 属性为 null。如果在同一配置文件中 Bean id 或 name 重复了，会抛错，但是如果不是同一配置文件中，会发生覆盖。</p><p>可是有些时候我们希望在系统启动的过程中就严格杜绝发生 Bean 覆盖，因为万一出现这种情况，会增加我们排查问题的成本。</p><p>循环依赖说的是 A 依赖 B，而 B 又依赖 A。或者是 A 依赖 B，B 依赖 C，而 C 却依赖 A。默认 allowCircularReferences 也是 null。</p><p>它们两个属性是一起出现的，必然可以在同一个地方一起进行配置。</p><p>添加这两个属性的作者 Juergen Hoeller 在这个 <a href="https://jira.spring.io/browse/SPR-4374" target="_blank" rel="noopener">jira</a> 的讨论中说明了怎么配置这两个属性。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NoBeanOverridingContextLoader</span> <span class="token keyword">extends</span> <span class="token class-name">ContextLoader</span> <span class="token punctuation">{</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">customizeContext</span><span class="token punctuation">(</span>ServletContext servletContext<span class="token punctuation">,</span> ConfigurableWebApplicationContext applicationContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">customizeContext</span><span class="token punctuation">(</span>servletContext<span class="token punctuation">,</span> applicationContext<span class="token punctuation">)</span><span class="token punctuation">;</span>    AbstractRefreshableApplicationContext arac <span class="token operator">=</span> <span class="token punctuation">(</span>AbstractRefreshableApplicationContext<span class="token punctuation">)</span> applicationContext<span class="token punctuation">;</span>    arac<span class="token punctuation">.</span><span class="token function">setAllowBeanDefinitionOverriding</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyContextLoaderListener</span> <span class="token keyword">extends</span> <span class="token class-name">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>context<span class="token punctuation">.</span>ContextLoaderListener</span> <span class="token punctuation">{</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">protected</span> ContextLoader <span class="token function">createContextLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">NoBeanOverridingContextLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span>listener<span class="token operator">></span>    <span class="token operator">&lt;</span>listener<span class="token operator">-</span><span class="token keyword">class</span><span class="token operator">></span>com<span class="token punctuation">.</span>javadoop<span class="token punctuation">.</span>MyContextLoaderListener<span class="token operator">&lt;</span><span class="token operator">/</span>listener<span class="token operator">-</span><span class="token keyword">class</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>listener<span class="token operator">></span></code></pre><p>如果以上方式不能满足你的需求，请参考这个链接：<a href="http://blog.csdn.net/zgmzyr/article/details/39380477" target="_blank" rel="noopener">解决spring中不同配置文件中存在name或者id相同的bean可能引起的问题</a></p><h3 id="profile"><a href="#profile" class="headerlink" title="profile"></a>profile</h3><p>我们可以把不同环境的配置分别配置到单独的文件中，举个例子：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">profile</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span>    <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>jdbc</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/jdbc<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">jdbc:</span>embedded-database</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">jdbc:</span>script</span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>classpath:com/bank/config/sql/schema.sql<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">jdbc:</span>script</span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>classpath:com/bank/config/sql/test-data.sql<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">jdbc:</span>embedded-database</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">profile</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>production<span class="token punctuation">"</span></span>    <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>jee</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/jee<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">jee:</span>jndi-lookup</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">jndi-name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java:comp/env/jdbc/datasource<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><p>应该不必做过多解释了吧，看每个文件第一行的 profile=””。</p><p>当然，我们也可以在一个配置文件中使用：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>jdbc</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/jdbc<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>jee</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/jee<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">profile</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">jdbc:</span>embedded-database</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">jdbc:</span>script</span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>classpath:com/bank/config/sql/schema.sql<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">jdbc:</span>script</span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>classpath:com/bank/config/sql/test-data.sql<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">jdbc:</span>embedded-database</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">profile</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>production<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">jee:</span>jndi-lookup</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">jndi-name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java:comp/env/jdbc/datasource<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><p>理解起来也很简单吧。</p><p>接下来的问题是，怎么使用特定的 profile 呢？Spring 在启动的过程中，会去寻找 “spring.profiles.active” 的属性值，根据这个属性值来的。那怎么配置这个值呢？</p><p>Spring 会在这几个地方寻找 spring.profiles.active 的属性值：操作系统环境变量、JVM 系统变量、web.xml 中定义的参数、JNDI。</p><p>最简单的方式莫过于在程序启动的时候指定：</p><pre class=" language-shell"><code class="language-shell">-Dspring.profiles.active="profile1,profile2"</code></pre><blockquote><p>profile 可以激活多个</p></blockquote><p>当然，我们也可以通过代码的形式从 Environment 中设置 profile：</p><pre class=" language-java"><code class="language-java">AnnotationConfigApplicationContext ctx <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ctx<span class="token punctuation">.</span><span class="token function">getEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setActiveProfiles</span><span class="token punctuation">(</span><span class="token string">"development"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ctx<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>SomeConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> StandaloneDataConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> JndiDataConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ctx<span class="token punctuation">.</span><span class="token function">refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 重启</span></code></pre><p>如果是 Spring Boot 的话更简单，我们一般会创建 application.properties、application-dev.properties、application-prod.properties 等文件，其中 application.properties 配置各个环境通用的配置，application-{profile}.properties 中配置特定环境的配置，然后在启动的时候指定 profile：</p><pre class=" language-shell"><code class="language-shell">java -Dspring.profiles.active=prod -jar JavaDoop.jar</code></pre><p>如果是单元测试中使用的话，在测试类中使用 @ActiveProfiles 指定，这里就不展开了。</p><h3 id="工厂模式生成-Bean"><a href="#工厂模式生成-Bean" class="headerlink" title="工厂模式生成 Bean"></a>工厂模式生成 Bean</h3><p>请读者注意 factory-bean 和 FactoryBean 的区别。这节说的是前者，是说静态工厂或实例工厂，而后者是 Spring 中的特殊接口，代表一类特殊的 Bean，附录的下面一节会介绍 FactoryBean。</p><p>设计模式里，工厂方法模式分静态工厂和实例工厂，我们分别看看 Spring 中怎么配置这两个，来个代码示例就什么都清楚了。</p><p>静态工厂：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>clientService<span class="token punctuation">"</span></span>    <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>examples.ClientService<span class="token punctuation">"</span></span>    <span class="token attr-name">factory-method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>createInstance<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>public class ClientService {    private static ClientService clientService = new ClientService();    private ClientService() {}    // 静态方法    public static ClientService createInstance() {        return clientService;    }}</code></pre><p>实例工厂：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>serviceLocator<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>examples.DefaultServiceLocator<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- inject any dependencies required by this locator bean --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>clientService<span class="token punctuation">"</span></span>    <span class="token attr-name">factory-bean</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>serviceLocator<span class="token punctuation">"</span></span>    <span class="token attr-name">factory-method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>createClientServiceInstance<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>accountService<span class="token punctuation">"</span></span>    <span class="token attr-name">factory-bean</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>serviceLocator<span class="token punctuation">"</span></span>    <span class="token attr-name">factory-method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>createAccountServiceInstance<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>public class DefaultServiceLocator {    private static ClientService clientService = new ClientServiceImpl();    private static AccountService accountService = new AccountServiceImpl();    public ClientService createClientServiceInstance() {        return clientService;    }    public AccountService createAccountServiceInstance() {        return accountService;    }}</code></pre><h3 id="FactoryBean"><a href="#FactoryBean" class="headerlink" title="FactoryBean"></a>FactoryBean</h3><p>FactoryBean 适用于 Bean 的创建过程比较复杂的场景，比如数据库连接池的创建。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">FactoryBean</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>    T <span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">;</span>    Class<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">getObjectType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> <span class="token function">isSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>     <span class="token keyword">private</span> Car car <span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">setCar</span><span class="token punctuation">(</span>Car car<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>car <span class="token operator">=</span> car<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><p>我们假设现在需要创建一个 Person 的 Bean，首先我们需要一个 Car 的实例，我们这里假设 Car 的实例创建很麻烦，那么我们可以把创建 Car 的复杂过程包装起来：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyCarFactoryBean</span> <span class="token keyword">implements</span> <span class="token class-name">FactoryBean</span><span class="token operator">&lt;</span>Car<span class="token operator">></span><span class="token punctuation">{</span>    <span class="token keyword">private</span> String make<span class="token punctuation">;</span>     <span class="token keyword">private</span> <span class="token keyword">int</span> year <span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMake</span><span class="token punctuation">(</span>String m<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>make <span class="token operator">=</span>m <span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setYear</span><span class="token punctuation">(</span><span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>year <span class="token operator">=</span> y<span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token keyword">public</span> Car <span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">// 这里我们假设 Car 的实例化过程非常复杂，反正就不是几行代码可以写完的那种</span>      CarBuilder cb <span class="token operator">=</span> CarBuilder<span class="token punctuation">.</span><span class="token function">car</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>year<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span> cb<span class="token punctuation">.</span><span class="token function">setYear</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>year<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">hasText</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>make<span class="token punctuation">)</span><span class="token punctuation">)</span> cb<span class="token punctuation">.</span><span class="token function">setMake</span><span class="token punctuation">(</span> <span class="token keyword">this</span><span class="token punctuation">.</span>make <span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">return</span> cb<span class="token punctuation">.</span><span class="token function">factory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token keyword">public</span> Class<span class="token operator">&lt;</span>Car<span class="token operator">></span> <span class="token function">getObjectType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> Car<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">;</span> <span class="token punctuation">}</span>     <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>我们看看装配的时候是怎么配置的：</p><pre class=" language-xml"><code class="language-xml">&lt;bean class = "com.javadoop.MyCarFactoryBean" id = "car">  &lt;property name = "make" value ="Honda"/>  &lt;property name = "year" value ="1984"/><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>&lt;bean class = "com.javadoop.Person" id = "josh">  &lt;property name = "car" ref = "car"/><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><p>看到不一样了吗？id 为 “car” 的 bean 其实指定的是一个 FactoryBean，不过配置的时候，我们直接让配置 Person 的 Bean 直接依赖于这个 FactoryBean 就可以了。中间的过程 Spring 已经封装好了。</p><p>说到这里，我们再来点干货。我们知道，现在还用 xml 配置 Bean 依赖的越来越少了，更多时候，我们可能会采用 java  config 的方式来配置，这里有什么不一样呢？</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CarConfiguration</span> <span class="token punctuation">{</span>     <span class="token annotation punctuation">@Bean</span>     <span class="token keyword">public</span> MyCarFactoryBean <span class="token function">carFactoryBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       MyCarFactoryBean cfb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyCarFactoryBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      cfb<span class="token punctuation">.</span><span class="token function">setMake</span><span class="token punctuation">(</span><span class="token string">"Honda"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      cfb<span class="token punctuation">.</span><span class="token function">setYear</span><span class="token punctuation">(</span><span class="token number">1984</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> cfb<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Person <span class="token function">aPerson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     Person person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 注意这里的不同</span>    person<span class="token punctuation">.</span><span class="token function">setCar</span><span class="token punctuation">(</span><span class="token function">carFactoryBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> person<span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre><p>这个时候，其实我们的思路也很简单，把 MyCarFactoryBean 看成是一个简单的 Bean 就可以了，不必理会什么 FactoryBean，它是不是 FactoryBean 和我们没关系。</p><h3 id="初始化-Bean-的回调"><a href="#初始化-Bean-的回调" class="headerlink" title="初始化 Bean 的回调"></a>初始化 Bean 的回调</h3><p>有以下四种方案：</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"exampleInitBean"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"examples.ExampleBean"</span> init<span class="token operator">-</span>method<span class="token operator">=</span><span class="token string">"init"</span><span class="token operator">/</span><span class="token operator">></span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AnotherExampleBean</span> <span class="token keyword">implements</span> <span class="token class-name">InitializingBean</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// do some initialization work</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>initMethod <span class="token operator">=</span> <span class="token string">"init"</span><span class="token punctuation">)</span><span class="token keyword">public</span> Foo <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@PostConstruct</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><h3 id="销毁-Bean-的回调"><a href="#销毁-Bean-的回调" class="headerlink" title="销毁 Bean 的回调"></a>销毁 Bean 的回调</h3><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"exampleInitBean"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"examples.ExampleBean"</span> destroy<span class="token operator">-</span>method<span class="token operator">=</span><span class="token string">"cleanup"</span><span class="token operator">/</span><span class="token operator">></span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AnotherExampleBean</span> <span class="token keyword">implements</span> <span class="token class-name">DisposableBean</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// do some destruction work (like releasing pooled connections)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>destroyMethod <span class="token operator">=</span> <span class="token string">"cleanup"</span><span class="token punctuation">)</span><span class="token keyword">public</span> Bar <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@PreDestroy</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">cleanup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><h3 id="ConversionService"><a href="#ConversionService" class="headerlink" title="ConversionService"></a>ConversionService</h3><p>既然文中说到了这个，顺便提一下好了。</p><p>最有用的场景就是，它用来将前端传过来的参数和后端的 controller 方法上的参数进行绑定的时候用。</p><p>像前端传过来的字符串、整数要转换为后端的 String、Integer 很容易，但是如果 controller 方法需要的是一个枚举值，或者是 Date 这些非基础类型（含基础类型包装类）值的时候，我们就可以考虑采用 ConversionService 来进行转换。</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>conversionService<span class="token punctuation">"</span></span>  <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.context.support.ConversionServiceFactoryBean<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>converters<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>list</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.javadoop.learning.utils.StringToEnumConverterFactory<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>list</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><p>ConversionService 接口很简单，所以要自定义一个 convert 的话也很简单。</p><p>下面再说一个实现这种转换很简单的方式，那就是实现 Converter 接口。</p><p>来看一个很简单的例子，这样比什么都管用。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringToDateConverter</span> <span class="token keyword">implements</span> <span class="token class-name">Converter</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Date<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Date <span class="token function">convert</span><span class="token punctuation">(</span>String source<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> DateUtils<span class="token punctuation">.</span><span class="token function">parseDate</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> <span class="token string">"yyyy-MM-dd"</span><span class="token punctuation">,</span> <span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">,</span> <span class="token string">"yyyy-MM-dd HH:mm"</span><span class="token punctuation">,</span> <span class="token string">"HH:mm:ss"</span><span class="token punctuation">,</span> <span class="token string">"HH:mm"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ParseException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>只要注册这个 Bean 就可以了。这样，前端往后端传的时间描述字符串就很容易绑定成 Date 类型了，不需要其他任何操作。</p><h3 id="Bean-继承"><a href="#Bean-继承" class="headerlink" title="Bean 继承"></a>Bean 继承</h3><p>在初始化 Bean 的地方，我们说过了这个：</p><pre class=" language-java"><code class="language-java">RootBeanDefinition bd <span class="token operator">=</span> <span class="token function">getMergedLocalBeanDefinition</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这里涉及到的就是 <bean parent="">  中的 parent 属性，我们来看看 Spring 中是用这个来干什么的。</bean></p><p>首先，我们要明白，这里的继承和 java 语法中的继承没有任何关系，不过思路是相通的。child bean 会继承 parent bean 的所有配置，也可以覆盖一些配置，当然也可以新增额外的配置。</p><p>Spring 中提供了继承自 AbstractBeanDefinition 的 <code>ChildBeanDefinition</code> 来表示 child bean。</p><p>看如下一个例子:</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>inheritedTestBean<span class="token punctuation">"</span></span> <span class="token attr-name">abstract</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.beans.TestBean<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>inheritsWithDifferentClass<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.beans.DerivedTestBean<span class="token punctuation">"</span></span>        <span class="token attr-name">parent</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>inheritedTestBean<span class="token punctuation">"</span></span> <span class="token attr-name">init-method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>initialize<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>override<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><p>parent bean 设置了 <code>abstract="true"</code> 所以它不会被实例化，child bean 继承了 parent bean 的两个属性，但是对 name 属性进行了覆写。</p><p>child bean 会继承 scope、构造器参数值、属性值、init-method、destroy-method 等等。</p><p>当然，我不是说 parent bean 中的 abstract = true 在这里是必须的，只是说如果加上了以后 Spring 在实例化 singleton beans 的时候会忽略这个 bean。</p><p>比如下面这个极端 parent bean，它没有指定 class，所以毫无疑问，这个 bean 的作用就是用来充当模板用的 parent bean，此处就必须加上 abstract = true。</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"inheritedTestBeanWithoutClass"</span> <span class="token keyword">abstract</span><span class="token operator">=</span><span class="token string">"true"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"name"</span> value<span class="token operator">=</span><span class="token string">"parent"</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"age"</span> value<span class="token operator">=</span><span class="token string">"1"</span><span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span></code></pre><h3 id="方法注入"><a href="#方法注入" class="headerlink" title="方法注入"></a>方法注入</h3><p>一般来说，我们的应用中大多数的 Bean 都是 singleton 的。singleton 依赖 singleton，或者 prototype 依赖 prototype 都很好解决，直接设置属性依赖就可以了。</p><p>但是，如果是 singleton 依赖 prototype 呢？这个时候不能用属性依赖，因为如果用属性依赖的话，我们每次其实拿到的还是第一次初始化时候的 bean。</p><p>一种解决方案就是不要用属性依赖，每次获取依赖的 bean 的时候从 BeanFactory 中取。这个也是大家最常用的方式了吧。怎么取，我就不介绍了，大部分 Spring 项目大家都会定义那么个工具类的。</p><p>另一种解决方案就是这里要介绍的通过使用 Lookup method。</p><h4 id="lookup-method"><a href="#lookup-method" class="headerlink" title="lookup-method"></a>lookup-method</h4><p>我们来看一下 Spring Reference 中提供的一个例子：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> fiona<span class="token punctuation">.</span>apple<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// no more Spring imports!</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">CommandManager</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> Object <span class="token function">process</span><span class="token punctuation">(</span>Object commandState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// grab a new instance of the appropriate Command interface</span>        Command command <span class="token operator">=</span> <span class="token function">createCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// set the state on the (hopefully brand new) Command instance</span>        command<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span>commandState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> command<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// okay... but where is the implementation of this method?</span>    <span class="token keyword">protected</span> <span class="token keyword">abstract</span> Command <span class="token function">createCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>xml 配置 <lookup-method>：</lookup-method></p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- a stateful bean deployed as a prototype (non-singleton) --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myCommand<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fiona.apple.AsyncCommand<span class="token punctuation">"</span></span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>prototype<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- inject dependencies here as required --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- commandProcessor uses statefulCommandHelper --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>commandManager<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fiona.apple.CommandManager<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>lookup-method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>createCommand<span class="token punctuation">"</span></span> <span class="token attr-name">bean</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myCommand<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><p>Spring 采用 <strong>CGLIB 生成字节码</strong>的方式来生成一个子类。我们定义的类不能定义为 final class，抽象方法上也不能加 final。</p><p>lookup-method 上的配置也可以采用注解来完成，这样就可以不用配置 <lookup-method> 了，其他不变：</lookup-method></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">CommandManager</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> Object <span class="token function">process</span><span class="token punctuation">(</span>Object commandState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        MyCommand command <span class="token operator">=</span> <span class="token function">createCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        command<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span>commandState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> command<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Lookup</span><span class="token punctuation">(</span><span class="token string">"myCommand"</span><span class="token punctuation">)</span>    <span class="token keyword">protected</span> <span class="token keyword">abstract</span> Command <span class="token function">createCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><blockquote><p>注意，既然用了注解，要配置注解扫描：&lt;context:component-scan base-package=”com.javadoop” /&gt;</p></blockquote><p>甚至，我们可以像下面这样：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">CommandManager</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> Object <span class="token function">process</span><span class="token punctuation">(</span>Object commandState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        MyCommand command <span class="token operator">=</span> <span class="token function">createCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        command<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span>commandState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> command<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Lookup</span>    <span class="token keyword">protected</span> <span class="token keyword">abstract</span> MyCommand <span class="token function">createCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><blockquote><p>上面的返回值用了 MyCommand，当然，如果 Command 只有一个实现类，那返回值也可以写 Command。</p></blockquote><h4 id="replaced-method"><a href="#replaced-method" class="headerlink" title="replaced-method"></a>replaced-method</h4><p>记住它的功能，就是替换掉 bean 中的一些方法。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyValueCalculator</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> String <span class="token function">computeValue</span><span class="token punctuation">(</span>String input<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// some real code...</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// some other methods...</span><span class="token punctuation">}</span></code></pre><p>方法覆写，注意要实现 MethodReplacer 接口：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReplacementComputeValue</span> <span class="token keyword">implements</span> <span class="token class-name">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>support<span class="token punctuation">.</span>MethodReplacer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> Object <span class="token function">reimplement</span><span class="token punctuation">(</span>Object o<span class="token punctuation">,</span> Method m<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// get the input value, work with it, and return a computed result</span>        String input <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token keyword">return</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>配置也很简单：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myValueCalculator<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>x.y.z.MyValueCalculator<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 定义 computeValue 这个方法要被替换掉 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>replaced-method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>computeValue<span class="token punctuation">"</span></span> <span class="token attr-name">replacer</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>replacementComputeValue<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg-type</span><span class="token punctuation">></span></span>String<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>arg-type</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>replaced-method</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>replacementComputeValue<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>a.b.c.ReplacementComputeValue<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><blockquote><p>arg-type 明显不是必须的，除非存在方法重载，这样必须通过参数类型列表来判断这里要覆盖哪个方法。</p></blockquote><h3 id="BeanPostProcessor"><a href="#BeanPostProcessor" class="headerlink" title="BeanPostProcessor"></a>BeanPostProcessor</h3><p>应该说 BeanPostProcessor 概念在 Spring 中也是比较重要的。我们看下接口定义：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">BeanPostProcessor</span> <span class="token punctuation">{</span>   Object <span class="token function">postProcessBeforeInitialization</span><span class="token punctuation">(</span>Object bean<span class="token punctuation">,</span> String beanName<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException<span class="token punctuation">;</span>   Object <span class="token function">postProcessAfterInitialization</span><span class="token punctuation">(</span>Object bean<span class="token punctuation">,</span> String beanName<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>看这个接口中的两个方法名字我们大体上可以猜测 bean 在初始化之前会执行 postProcessBeforeInitialization 这个方法，初始化完成之后会执行 postProcessAfterInitialization 这个方法。但是，这么理解是非常片面的。</p><p>首先，我们要明白，除了我们自己定义的 BeanPostProcessor 实现外，Spring 容器在启动时自动给我们也加了几个。如在获取 BeanFactory 的 obtainFactory() 方法结束后的 prepareBeanFactory(factory)，大家仔细看会发现，Spring 往容器中添加了这两个 BeanPostProcessor：ApplicationContextAwareProcessor、ApplicationListenerDetector。</p><p>我们回到这个接口本身，读者请看第一个方法，这个方法接受的第一个参数是 bean 实例，第二个参数是 bean 的名字，重点在返回值将会作为新的 bean 实例，所以，没事的话这里不能随便返回个 null。</p><p>那意味着什么呢？我们很容易想到的就是，我们这里可以对一些我们想要修饰的 bean 实例做一些事情。但是对于 Spring 框架来说，它会决定是不是要在这个方法中返回 bean 实例的代理，这样就有更大的想象空间了。</p><p>最后，我们说说如果我们自己定义一个 bean 实现 BeanPostProcessor 的话，它的执行时机是什么时候？</p><p>如果仔细看了代码分析的话，其实很容易知道了，在 bean 实例化完成、属性注入完成之后，会执行回调方法，具体请参见类 AbstractAutowireCapableBeanFactory#initBean 方法。</p><p>首先会回调几个实现了 Aware 接口的 bean，然后就开始回调 BeanPostProcessor 的 postProcessBeforeInitialization 方法，之后是回调 init-method，然后再回调 BeanPostProcessor 的 postProcessAfterInitialization 方法。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC 总结</title>
      <link href="/2020/03/05/springmvc-zong-jie/"/>
      <url>/2020/03/05/springmvc-zong-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringMVC总结"><a href="#SpringMVC总结" class="headerlink" title="SpringMVC总结"></a>SpringMVC总结</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>目的：复习回顾SpringMVC相关知识</p><p>本文参考地址：<a href="https://github.com/Snailclimb/JavaGuide/blob/master/docs/system-design/framework/spring/SpringMVC-Principle.md" target="_blank" rel="noopener">https://github.com/Snailclimb/JavaGuide/blob/master/docs/system-design/framework/spring/SpringMVC-Principle.md</a></p><h2 id="1-Spring概述"><a href="#1-Spring概述" class="headerlink" title="1.Spring概述"></a>1.Spring概述</h2><p>​        Java 的实现 MVC 设计模型的请求驱动类型的轻量级 Web 框架，属 SpringMVC 是一种基于于 Spring FrameWork 的后续产品，已经融合在 Spring Web Flow 里面。Spring 框架提供了构建 Web 应用程序的全功能 MVC 模块。使用 Spring 可插入的 MVC 架构，从而在使用 Spring 进行 WEB 开发时，可以选择使用 Spring 的 Spring MVC 框架或集成其他 MVC 开发框架，如 Struts1(现在一般不用)，Struts2 等。</p><p><strong>本质</strong>：</p><p>SpringMVC 框架是以请求为驱动，围绕 <strong>Servlet</strong> 设计，将请求发给控制器，然后通过模型对象，分派器来展示请求结果视图。其中核心类是 <code>DispatcherServlet</code>，它是一个 Servlet，顶层是实现的Servlet接口。</p><p>​    SpringMVC在框架中的示意图：</p><p><img src="https://raw.githubusercontent.com/black210/images/master/demo/202003/04/152154-874397.png" alt="image-20200304152151532"></p><h3 id="1-1MVC模式"><a href="#1-1MVC模式" class="headerlink" title="1.1MVC模式"></a>1.1MVC模式</h3><p><img src="https://camo.githubusercontent.com/0ce15ef13ad65c271362ec48b2ac573a6811c98b/687474703a2f2f6d792d626c6f672d746f2d7573652e6f73732d636e2d6265696a696e672e616c6979756e63732e636f6d2f31382d31302d31312f36303637393434342e6a7067" alt="img"></p><h3 id="1-2与Struts2的优略分析"><a href="#1-2与Struts2的优略分析" class="headerlink" title="1.2与Struts2的优略分析"></a>1.2与<strong>Struts2的优略分析</strong></h3><ul><li><p>共同点：</p><ul><li><p>它们都是表现层框架，都是基于 MVC 模型编写的。</p></li><li><p>它们的底层都离不开原始 ServletAPI。</p></li><li><p>它们处理请求的机制都是一个核心控制器。</p></li></ul></li><li><p>区别：</p><ul><li><p>Spring MVC 的入口是 Servlet, 而 Struts2 是 Filter。</p></li><li><p>Spring MVC 是基于方法设计的，而 Struts2 是基于类，Struts2 每次执行都会创建一个动作类。所以 Spring MVC 会稍微比 Struts2 快些。</p></li><li><p>Spring MVC 使用更加简洁,同时还支持 JSR303, 处理 ajax 的请求更方便。</p><ul><li>(JSR303 是一套 JavaBean 参数校验的标准，它定义了很多常用的校验注解，我们可以直接将这些注解加在我们 JavaBean 的属性上面，就可以在需要校验的时候进行校验了。)</li></ul></li><li><p>Struts2 的 OGNL 表达式使页面的开发效率相比 Spring MVC 更高些，但执行效率并没有比 JSTL 提升，尤其是 struts2 的表单标签，远没有 html 执行效率高。</p></li></ul></li></ul><h2 id="2-工作原理分析"><a href="#2-工作原理分析" class="headerlink" title="2.工作原理分析"></a>2.工作原理分析</h2><h3 id="2-1流程说明（重要）："><a href="#2-1流程说明（重要）：" class="headerlink" title="2.1流程说明（重要）："></a><strong>2.1流程说明（重要）：</strong></h3><p>（1）客户端（浏览器）发送请求，直接请求到 DispatcherServlet。</p><p>（2）DispatcherServlet 根据请求信息调用 HandlerMapping，解析请求对应的 Handler。</p><p>（3）解析到对应的 Handler（也就是我们平常说的 Controller 控制器）后，开始由 HandlerAdapter 适配器处理。</p><p>（4）HandlerAdapter 会根据 Handler 来调用真正的处理器开处理请求，并处理相应的业务逻辑。</p><p>（5）处理器处理完业务后，会返回一个 ModelAndView 对象，Model 是返回的数据对象，View 是个逻辑上的 View。</p><p>（6）ViewResolver 会根据逻辑 View 查找实际的 View。</p><p>（7）DispaterServlet 把返回的 Model 传给 View（视图渲染）。</p><p>（8）把 View 返回给请求者（浏览器）</p><p><strong>如下图所示：</strong></p><p><img src="https://camo.githubusercontent.com/6889f839138de730fce5f6a0d64e33258a2cf9b5/687474703a2f2f6d792d626c6f672d746f2d7573652e6f73732d636e2d6265696a696e672e616c6979756e63732e636f6d2f31382d31302d31312f34393739303238382e6a7067" alt="SpringMVC运行原理"></p><p>上图的一个笔误的小问题：Spring MVC 的入口函数也就是前端控制器 <code>DispatcherServlet</code> 的作用是接收请求，响应结果。</p><h3 id="2-2重要组件"><a href="#2-2重要组件" class="headerlink" title="2.2重要组件"></a>2.2重要组件</h3><p><strong>1、前端控制器<code>DispatcherServlet</code>（不需要工程师开发）,由框架提供（重要）</strong></p><p>​        作用：<strong>Spring MVC 的入口函数。接收请求，响应结果，相当于转发器，中央处理器。</strong></p><p>​        用户请求到达前端控制器，它就相当于mvc模式中的c，DispatcherServlet是整个流程控制的中心，由它调用其它组件处理用户的请求，DispatcherServlet的存在降低了组件之间的耦合性。</p><p><strong>2、处理器映射器<code>HandlerMapping</code>(不需要工程师开发),由框架提供</strong></p><p>​        作用：<strong>根据请求的url查找Handler</strong>。</p><p>​        HandlerMapping负责根据用户请求找到Handler即处理器（Controller），SpringMVC提供了不同的映射器实现不同的映射方式，例如：配置文件方式，实现接口方式，注解方式等。</p><p><strong>3、处理器适配器<code>HandlerAdapter</code></strong></p><p>​    作用：按照特定规则（HandlerAdapter要求的规则）去执行Handler 通过HandlerAdapter对处理器进行执行，这是适配器模式的应用，通过扩展适配器可以对更多类型的处理器进行执行。</p><p><strong>4、处理器<code>Handler</code>(需要工程师开发)</strong></p><p>​        注意：编写Handler时按照HandlerAdapter的要求去做，这样适配器才可以去正确执行Handler 。</p><p>​        Handler 是继DispatcherServlet前端控制器的后端控制器，在DispatcherServlet的控制下Handler对具体的用户请求进行处理。 由于Handler涉及到具体的用户业务请求，所以一般情况需要工程师根据业务需求开发Handler。</p><p><strong>5、视图解析器<code>View resolver</code>(不需要工程师开发),由框架提供</strong></p><p>​        作用：进行视图解析，根据逻辑视图名解析成真正的视图（view）。</p><p>​         View Resolver负责将处理结果生成View视图，View Resolver首先根据逻辑视图名解析成物理视图名即具体的页面地址，再生成View视图对象，最后对View进行渲染将处理结果通过页面展示给用户。    </p><p>​        springmvc框架提供了很多的View视图类型，包括：jstlView、freemarkerView、pdfView等。 一般情况下需要通过页面标签或页面模版技术将模型数据通过页面展示给用户，需要由工程师根据业务需求开发具体的页面。</p><p><strong>6、视图View(需要工程师开发)</strong></p><p>​    View是一个接口，实现类支持不同的View类型（jsp、freemarker、pdf…）。</p><p>​    <strong>注意</strong>：处理器Handler（也就是我们平常说的Controller控制器）以及视图层view都是需要我们自己<strong>手动开发</strong>的。其他的一些组件比如：前端控制器DispatcherServlet、处理器映射器 HandlerMapping、处理器适配器HandlerAdapter等等都是框架提供给我们的，不需要自己手动开发。</p><p>​    <strong>Tips:</strong></p><p>​        在 SpringMVC 的各个组件中，处理器映射器、处理器适配器、视图解析器称为 SpringMVC 的三大组件。</p><p>​        我们可在 SpringMVC.xml 配置文件中使用 <code>&lt;mvc:annotation-driven&gt;</code> 自动加载 RequestMappingHandlerMapping （处理映射器） 和RequestMappingHandlerAdapter （ 处 理 适 配 器 ）。</p><h2 id="3-常用注解"><a href="#3-常用注解" class="headerlink" title="3.常用注解"></a>3.常用注解</h2><h3 id="3-1RequestMapping"><a href="#3-1RequestMapping" class="headerlink" title="3.1RequestMapping"></a>3.1RequestMapping</h3><ul><li><p><strong>出现位置</strong></p></li><li><p><strong>类上</strong>：</p><p>请求 URL 的<strong>第一级访问目录</strong>。此处不写的话，就相当于应用的根目录。写的话需要以/开头，不写/默认带/。它出现的目的是为了使我们的 URL 可以按照<strong>模块化管理</strong>:</p><p>例如：</p><p>账户模块：</p><p>/account/add</p><p>/account/update</p><p>/account/delete</p><p>…</p></li><li><p><strong>方法上</strong>：</p><p>​    请求 URL 的<strong>第二级访问目录</strong>。</p></li><li><p><strong>属性</strong></p><ul><li><p>value：用于指定请求的 URL。它和 path 属性的作用是一样的。</p></li><li><p>method：用于指定请求的方式。</p></li><li><p>params：用于指定限制请求参数的条件。它支持简单的表达式。要求请求参数的 key 和 value 必须和配置的一模一样。</p><p>例如：</p><p>params = {“accountName”}，表示请求参数必须有 accountName params = {“moeny!100”}，</p><p>表示请求参数中 money 不能是 100。</p></li><li><p>headers：用于指定限制请求消息头的条件。</p></li></ul><blockquote><p>注意：以上四个属性只要出现 2 个或以上时，他们的关系是与的关系。</p></blockquote></li></ul><h3 id="3-2请求参数类"><a href="#3-2请求参数类" class="headerlink" title="3.2请求参数类"></a>3.2请求参数类</h3><h4 id="3-2-1请求参数"><a href="#3-2-1请求参数" class="headerlink" title="3.2.1请求参数"></a>3.2.1请求参数</h4><p><strong>1.绑定的机制</strong></p><p>​        我们都知道，表单中请求参数都是基于 key=value 的。</p><p>​        SpringMVC 绑定请求参数的过程是通过把表单提交请求参数，作为控制器中方法参数进行绑定的。</p><p>例如：</p><p><code>&lt;a href="account/findAccount?accountId=10"&gt;查询账户&lt;/a&gt;</code>中请求参数是：<strong>accountId=10</strong></p><p><strong>2.支持的数据类型</strong></p><ul><li><p><strong>基本类型参数：</strong></p><ul><li><p>包括基本类型和 String 类型</p></li><li><p><strong>要求我们的参数名称必须和控制器中方法的形参名称保持一致。(严格区分大小写)</strong> </p></li></ul></li><li><p><strong>POJO 类型参数：</strong></p><ul><li>包括实体类，以及关联的实体类</li><li><strong>要求表单中参数名称和 POJO 类的属性名称保持一致</strong>；并且控制器方法的参数类型是 POJO 类型。</li></ul></li><li><p><strong>数组和集合类型参数：</strong></p><ul><li><p>包括 List 结构和 Map 结构的集合（包括数组）。</p></li><li><p>第一种：</p><ul><li><p>要求集合类型的请求参数必须在 POJO 中。在表单中请求参数名称要和 POJO 中集合属性名称相同。</p></li><li><p>给 List 集合中的元素赋值，使用下标。</p></li><li><p>给 Map 集合中的元素赋值，使用键值对。</p></li></ul><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!--pojo中属性，比如账户中的name --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span><span class="token comment" spellcheck="true">&lt;!--pojo中嵌套一个pojo属性，比如账户中，给地址的cityName传值 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>address.cityName<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span><span class="token comment" spellcheck="true">&lt;!--POJO 类包含集合类型演示    List&lt;Account> accounts    Map&lt;String,Account> accountMap--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>accounts[1].money<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>accountMap[<span class="token punctuation">'</span>one<span class="token punctuation">'</span>].name<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span> </code></pre></li><li><p>第二种：</p></li></ul><p>​        接收的请求参数是 json 格式数据。需要借助一个注解实现。</p><blockquote><p>SpringMVC 绑定请求参数是自动实现的，但是要想使用，必须遵循使用要求。</p></blockquote></li><li><p><strong>使用 ServletAPI 对象作为方法参数</strong></p><p>SpringMVC 还支持使用原始 ServletAPI 对象作为控制器方法的参数。支持原始 ServletAPI 对象有：</p><ul><li><p><strong>HttpServletRequest</strong>     </p></li><li><p><strong>HttpServletResponse</strong>     </p></li><li><p><strong>HttpSession</strong> </p></li><li><p><strong>java.security.Principal</strong>     </p></li><li><p><strong>Locale</strong></p></li><li><p><strong>InputStream</strong> </p></li><li><p><strong>OutputStream</strong> </p></li><li><p><strong>Reader</strong> </p></li><li><p><strong>Writer</strong></p><p><strong>我们可以把上述对象，直接写在控制的方法参数中使用。</strong></p></li></ul><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 原始 ServletAPI 作为控制器参数 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>account/testServletAPI<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>测试访问 ServletAPI<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/testServletAPI"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">testServletAPI</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span>HttpServletResponse response<span class="token punctuation">,</span>HttpSession session<span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>session<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ul><h4 id="3-2-2请求参数乱码问题"><a href="#3-2-2请求参数乱码问题" class="headerlink" title="3.2.2请求参数乱码问题"></a>3.2.2请求参数乱码问题</h4><ul><li><strong>post 请求方式</strong>：<br>在 web.xml 中配置一个过滤器</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 配置 springMVC 编码过滤器 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>CharacterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">></span></span> org.springframework.web.filter.CharacterEncodingFilter    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 设置过滤器中的属性值 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>encoding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 启动过滤器 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>forceEncoding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 过滤所有请求 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>CharacterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">></span></span></code></pre><ul><li>get 请求方式：<br>tomacat 对 GET 和 POST 请求处理方式是不同的，GET 请求的编码问题，要改 tomcat 的 <strong>server.xml</strong><br>配置文件，如下：</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Connector</span> <span class="token attr-name">connectionTimeout</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>20000<span class="token punctuation">"</span></span> <span class="token attr-name">port</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>8080<span class="token punctuation">"</span></span> <span class="token attr-name">protocol</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>HTTP/1.1<span class="token punctuation">"</span></span> <span class="token attr-name">redirectPort</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>8443<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>改为：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Connector</span> <span class="token attr-name">connectionTimeout</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>20000<span class="token punctuation">"</span></span> <span class="token attr-name">port</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>8080<span class="token punctuation">"</span></span> <span class="token attr-name">protocol</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>HTTP/1.1<span class="token punctuation">"</span></span> <span class="token attr-name">redirectPort</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>8443<span class="token punctuation">"</span></span> <span class="token attr-name">useBodyEncodingForURI</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><blockquote><p>如果遇到 ajax 请求仍然乱码，请把：<code>useBodyEncodingForURI="true"</code>改为 <code>URIEncoding="UTF-8"</code>即可。</p></blockquote><h4 id="3-2-3请求参数类注解"><a href="#3-2-3请求参数类注解" class="headerlink" title="3.2.3请求参数类注解"></a>3.2.3请求参数类注解</h4><h5 id="RequestParam"><a href="#RequestParam" class="headerlink" title="RequestParam"></a><strong>RequestParam</strong></h5><ul><li><p>作用：</p><p><strong>把请求中指定名称的参数给控制器中的形参赋值。</strong></p></li><li><p>属性：</p><ul><li><p>value：请求参数中的名称。</p></li><li><p>required：请求参数中是否必须提供此参数。默认值：true。表示必须提供，如果不提供将报错。</p></li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/useRequestParam"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String    <span class="token function">useRequestParam</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span>String username<span class="token punctuation">,</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"age"</span><span class="token punctuation">,</span>required<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">)</span>Integer age<span class="token punctuation">)</span><span class="token punctuation">{</span>     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>username<span class="token operator">+</span><span class="token string">","</span><span class="token operator">+</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ul><h5 id="RequestBody（异步用）"><a href="#RequestBody（异步用）" class="headerlink" title="RequestBody（异步用）"></a><strong>RequestBody（异步用）</strong></h5><ul><li><p>作用：</p><p>用于获取请求体内容。直接使用得到是 key=value&amp;key=value…结构的数据。<strong>get 请求方式不适用。</strong></p></li><li><p>属性：</p><ul><li>required：是否必须有请求体。默认值是:true。</li></ul><p>​                        当取值为 true 时,get 请求方式会报错。如果取值为 false，get 请求得到是 null。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/useRequestBody"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String    <span class="token function">useRequestBody</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span><span class="token punctuation">(</span>required<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">)</span> String body<span class="token punctuation">)</span><span class="token punctuation">{</span>     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ul><h5 id="PathVaribale"><a href="#PathVaribale" class="headerlink" title="PathVaribale"></a><strong>PathVaribale</strong></h5><ul><li><p>作用：</p><p>用于绑定 url 中的占位符。例如：请求 url 中 /delete/<strong>{id}</strong>，这个<strong>{id}</strong>就是 url 占位符。</p><p>url 支持占位符是 spring3.0 之后加入的。是 springmvc 支持 rest 风格 URL 的一个重要标志。</p></li><li><p>属性：</p><ul><li><p>value：用于指定 url 中占位符名称。</p></li><li><p>required：是否必须提供占位符。</p></li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/usePathVariable/{id}"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String    <span class="token function">usePathVariable</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> Integer id<span class="token punctuation">)</span><span class="token punctuation">{</span>     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ul><h5 id="HiddentHttpMethodFilter（了解）"><a href="#HiddentHttpMethodFilter（了解）" class="headerlink" title="HiddentHttpMethodFilter（了解）"></a><strong>HiddentHttpMethodFilter（了解）</strong></h5><ul><li><p>作用：</p><p>由于浏览器 form 表单只支持 GET 与 POST 请求，而DELETE、PUT 等 method 并不支持，Spring3.0 添加了一个过滤器，可以将浏览器请求改为指定的请求方式，发送给我们的控制器方法，使得支持 GET、POST、PUT 与 DELETE 请求。</p></li><li><p>使用方法：</p><p>第一步：在 web.xml 中配置该过滤器。</p><p>第二步：请求方式必须使用 post 请求。</p><p>第三步：按照要求提供_method 请求参数，该参数的取值就是我们需要的请求方式。</p></li></ul><h5 id="RequestHeader"><a href="#RequestHeader" class="headerlink" title="RequestHeader"></a><strong>RequestHeader</strong></h5><ul><li><p>作用：</p><p>用于获取请求消息头。</p></li><li><p>属性：</p><p>value：提供消息头名称required：是否必须有此消息头</p><p><strong>注：</strong>在实际开发中一般不怎么用</p></li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/useRequestHeader"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String    <span class="token function">useRequestHeader</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestHeader</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"Accept-Language"</span><span class="token punctuation">,</span>required<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">)</span>String requestHeader<span class="token punctuation">)</span><span class="token punctuation">{</span>     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>requestHeader<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h5 id="CookieValue"><a href="#CookieValue" class="headerlink" title="CookieValue"></a><strong>CookieValue</strong></h5><ul><li><p><strong>作用：</strong></p><p>用于把指定 cookie 名称的值传入控制器方法参数。</p></li><li><p><strong>属性：</strong></p><ul><li><p>value：指定 cookie 的名称。</p></li><li><p>required：是否必须有此 cookie。</p></li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/useCookieValue"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String    <span class="token function">useCookieValue</span><span class="token punctuation">(</span><span class="token annotation punctuation">@CookieValue</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"JSESSIONID"</span><span class="token punctuation">,</span>required<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">)</span> String cookieValue<span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cookieValue<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ul><h3 id="3-3ModelAttribute"><a href="#3-3ModelAttribute" class="headerlink" title="3.3ModelAttribute"></a>3.3ModelAttribute</h3><ul><li><p><strong>作用：</strong></p><ul><li><p>该注解是 SpringMVC4.3 版本以后新加入的。它可以用于修饰方法和参数。</p></li><li><p>出现在<strong>方法</strong>上，表示当前方法会在控制器的方法执行之前，先执行。</p></li><li><p>它可以修饰没有返回值的方法，也可以修饰有具体返回值的方法。</p></li><li><p>出现在<strong>参数</strong>上，获取指定的数据给参数赋值。</p></li></ul></li><li><p><strong>属性：</strong></p><p>value：用于获取数据的 key。key 可以是 POJO 的属性名称，也可以是 map 结构的 key。</p></li><li><p><strong>应用场景：</strong></p><p>​    当表单提交数据不是完整的实体类数据时，保证没有提交数据的字段使用数据库对象原来的数据。</p><p>例如：</p><p>​     我们在编辑一个用户时，用户有一个创建信息字段，该字段的值是不允许被修改的。在提交表单数</p><p>据是肯定没有此字段的内容，一旦更新会把该字段内容置为 null，此时就可以使用此注解解决问题。</p></li><li><p>基于 Map 的应用场景示例：</p><ul><li><p><strong>带返回值</strong></p><p>需求：</p><p>​    <strong>修改用户信息，要求用户的密码不能修改</strong></p><p>jsp 的代码：</p></li></ul><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 修改用户信息 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>springmvc/updateUser<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>用户名称：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>用户年龄：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>保存<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></code></pre><p>​    控制类：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/***    查询数据库中用户信息*    @param user*/</span><span class="token annotation punctuation">@ModelAttribute</span><span class="token keyword">public</span> User <span class="token function">showModel</span><span class="token punctuation">(</span>String username<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//模拟去数据库查询</span>    User abc <span class="token operator">=</span> <span class="token function">findUserByName</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行了 showModel 方法"</span><span class="token operator">+</span>abc<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> abc<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/***    模拟修改用户方法*    @param user*    @return*/</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/updateUser"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">testModelAttribute</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"控制器中处理请求的方法：修改用户："</span><span class="token operator">+</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/***    模拟去数据库查询*    @param username*    @return*/</span><span class="token keyword">private</span> User <span class="token function">findUserByName</span><span class="token punctuation">(</span>String username<span class="token punctuation">)</span> <span class="token punctuation">{</span>     User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     user<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>     user<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">19</span><span class="token punctuation">)</span><span class="token punctuation">;</span> user<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> user<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>运行结果：</strong></p><p><img src="https://raw.githubusercontent.com/black210/images/master/demo/202003/06/164627-122354.png" alt="ModelAttribute 修饰方法带返回值"></p><ul><li><strong>不带返回值：</strong></li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@ModelAttribute</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">showModel</span><span class="token punctuation">(</span>String username<span class="token punctuation">,</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>User<span class="token operator">></span> map<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//模拟去数据库查询</span>    User user <span class="token operator">=</span> <span class="token function">findUserByName</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行了 showModel 方法"</span><span class="token operator">+</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span> map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">,</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/***    模拟修改用户方法*    @param user*    @return*/</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/updateUser"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">testModelAttribute</span><span class="token punctuation">(</span><span class="token annotation punctuation">@ModelAttribute</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span>User user<span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"控制器中处理请求的方法：修改用户："</span><span class="token operator">+</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/***    模拟去数据库查询*    @param username*    @return*/</span><span class="token keyword">private</span> User <span class="token function">findUserByName</span><span class="token punctuation">(</span>String username<span class="token punctuation">)</span> <span class="token punctuation">{</span>     User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     user<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">19</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     user<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> user<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>运行结果：</strong></p><p><img src="https://raw.githubusercontent.com/black210/images/master/demo/202003/07/102435-721181.png" alt="ModelAttribute 修饰方法不带返回值"></p></li></ul><h3 id="3-4SessionAttribute"><a href="#3-4SessionAttribute" class="headerlink" title="3.4SessionAttribute"></a>3.4SessionAttribute</h3><p><strong>使用说明</strong></p><ul><li><p><strong>作用：</strong></p><p><strong>用于多次执行控制器方法间的参数共享。</strong></p></li><li><p><strong>属性：</strong></p><ul><li><p>value：用于指定存入的属性名称</p></li><li><p>type：用于指定存入的数据类型。</p></li></ul></li><li><p><strong>示例：</strong></p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- SessionAttribute 注解的使用 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>springmvc/testPut<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>存入 SessionAttribute<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>springmvc/testGet<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>取出 SessionAttribute<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>springmvc/testClean<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>清除 SessionAttribute<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/***    SessionAttribute 注解的使用*    @Company http://www.ithiema.com*    @Version 1.0*/</span><span class="token annotation punctuation">@Controller</span><span class="token punctuation">(</span><span class="token string">"sessionAttributeController"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/springmvc"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@SessionAttributes</span><span class="token punctuation">(</span>value <span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"username"</span><span class="token punctuation">,</span><span class="token string">"password"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>types<span class="token operator">=</span><span class="token punctuation">{</span>Integer<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SessionAttributeController</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**    *    把数据存入 SessionAttribute    *    @param model    *    @return    *    Model 是 spring 提供的一个接口，该接口有一个实现类 ExtendedModelMap    *    该类继承了 ModelMap，而 ModelMap 就是 LinkedHashMap 子类    */</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/testPut"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">testPut</span><span class="token punctuation">(</span>Model model<span class="token punctuation">)</span><span class="token punctuation">{</span>         model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">,</span> <span class="token string">"泰斯特"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">,</span><span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//跳转之前将数据保存到 username、password 和 age 中，因为注解@SessionAttribute 中有这几个参数</span>        <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/testGet"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">testGet</span><span class="token punctuation">(</span>ModelMap model<span class="token punctuation">)</span><span class="token punctuation">{</span>       System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>model<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">";"</span><span class="token operator">+</span>model<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">";"</span><span class="token operator">+</span>model<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"a ge"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/testClean"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">complete</span><span class="token punctuation">(</span>SessionStatus sessionStatus<span class="token punctuation">)</span><span class="token punctuation">{</span>         sessionStatus<span class="token punctuation">.</span><span class="token function">setComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul><p>运行结果：</p><p><img src="https://raw.githubusercontent.com/black210/images/master/demo/202003/07/102451-893878.png" alt="SessionAttribute运行示例"></p><h3 id="3-5响应返回值类"><a href="#3-5响应返回值类" class="headerlink" title="3.5响应返回值类"></a>3.5响应返回值类</h3><h4 id="3-5-1返回值类型"><a href="#3-5-1返回值类型" class="headerlink" title="3.5.1返回值类型"></a>3.5.1返回值类型</h4><ul><li><p><strong>字符串</strong></p><p>Controller方法返回字符串可以指定逻辑视图的名称，<strong>根据视图解析器为物理视图的地址</strong>。</p></li><li><p><strong>Void</strong></p><ul><li><p>如果控制器的方法返回值编写成void，执行程序报404的异常，默认查找JSP页面没有找到。</p></li><li><p>默认会跳转到<code>@RequestMapping(value="/initUpdate") initUpdate</code>的页面。</p></li><li><p>可以使用<strong>请求转发或者重定向</strong>跳转到指定的页面</p></li></ul></li><li><p><strong>ModelAndView</strong></p><p><strong>ModelAndView</strong>对象是Spring提供的一个对象，可以用来调整具体的JSP视图</p></li></ul><h4 id="3-5-2转发与重定向"><a href="#3-5-2转发与重定向" class="headerlink" title="3.5.2转发与重定向"></a>3.5.2转发与重定向</h4><ul><li><p><strong>示意图</strong></p><p><img src="https://raw.githubusercontent.com/black210/images/master/demo/202003/06/165707-555285.png" alt="转发与重定向示意图"></p></li><li><p><strong>forward转发</strong></p></li><li><p><strong>Redirect重定向</strong></p></li></ul><p>  <img src="https://raw.githubusercontent.com/black210/images/master/demo/202003/06/170050-959948.png" alt="返回值程序解析图"></p><h4 id="3-5-3ResponseBody-响应json"><a href="#3-5-3ResponseBody-响应json" class="headerlink" title="3.5.3ResponseBody(响应json)"></a>3.5.3ResponseBody(响应json)</h4><ul><li><p>资源拦截问题</p><p><code>DispatcherServlet</code>会拦截到所有的资源，导致一个问题就是静态资源（img、css、js）也会被拦截到，从而不能被使用。在 <strong>springmvc</strong> 的配置文件中可以配置，静态资源不过滤：</p></li></ul><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- location 表示路径，mapping 表示文件，**表示该目录下的文件以及子目录的文件 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>resources</span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/css/<span class="token punctuation">"</span></span> <span class="token attr-name">mapping</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/css/**<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>resources</span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/images/<span class="token punctuation">"</span></span> <span class="token attr-name">mapping</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/images/**<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>resources</span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/scripts/<span class="token punctuation">"</span></span> <span class="token attr-name">mapping</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/javascript/**<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><blockquote><p>​    jsp页面</p></blockquote><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">        <span class="token comment" spellcheck="true">// 页面加载，绑定单击事件</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#btn"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// alert("hello btn");</span>                <span class="token comment" spellcheck="true">// 发送ajax请求</span>                $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 编写json格式，设置属性和值</span>                    url<span class="token punctuation">:</span><span class="token string">"user/testAjax"</span><span class="token punctuation">,</span>                    contentType<span class="token punctuation">:</span><span class="token string">"application/json;charset=UTF-8"</span><span class="token punctuation">,</span>                    data<span class="token punctuation">:</span><span class="token string">'{"username":"hehe","password":"123","age":30}'</span><span class="token punctuation">,</span>                    dataType<span class="token punctuation">:</span><span class="token string">"json"</span><span class="token punctuation">,</span>                    type<span class="token punctuation">:</span><span class="token string">"post"</span><span class="token punctuation">,</span>                    success<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">// data服务器端响应的json的数据，进行解析</span>                        <span class="token function">alert</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token function">alert</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token function">alert</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token function">alert</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><blockquote><p>​    控制类</p></blockquote><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     * 模拟异步请求响应     */</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/testAjax"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token annotation punctuation">@ResponseBody</span> User <span class="token function">testAjax</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> User user<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"testAjax方法执行了..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 客户端发送ajax的请求，传的是json字符串，后端把json字符串封装到user对象中</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 做响应，模拟查询数据库</span>        user<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"haha"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 做响应</span>        <span class="token keyword">return</span> user<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><blockquote><p>分析：</p></blockquote><ul><li><p>使用@RequestBody获取请求体数据，并把json的字符串转换成JavaBean的对象</p></li><li><p>使用@ResponseBody注解把JavaBean对象转换成json字符串，直接响应</p></li><li><p>json字符串和JavaBean对象互相转换的过程中，需要使用jackson的jar包</p></li></ul><h5 id="拓展：ResponseEntity"><a href="#拓展：ResponseEntity" class="headerlink" title="拓展：ResponseEntity"></a>拓展：ResponseEntity</h5><ul><li><p>如果需要返回json格式的数据，那么添加该注解就行了@ResponseBody</p></li><li><p>对于ResponseEntity，如果你即需要返回数据，又需要<strong>确定数据的状态</strong>，就用ResponseEntity。</p><p>比如 </p><pre class=" language-java"><code class="language-java"> <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"spu/page"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> ResponseEntity<span class="token operator">&lt;</span>PageResult<span class="token operator">&lt;</span>SpuBo<span class="token operator">>></span> <span class="token function">querySpuBoByPage</span><span class="token punctuation">(</span>            <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"key"</span><span class="token punctuation">,</span>required <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>String key<span class="token punctuation">,</span>            <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"saleable"</span><span class="token punctuation">,</span>required <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>Boolean saleable<span class="token punctuation">,</span>            <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"page"</span><span class="token punctuation">,</span>defaultValue <span class="token operator">=</span> <span class="token string">"1"</span><span class="token punctuation">)</span>Integer page<span class="token punctuation">,</span>            <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"rows"</span><span class="token punctuation">,</span>defaultValue <span class="token operator">=</span> <span class="token string">"5"</span><span class="token punctuation">)</span>Integer rows    <span class="token punctuation">)</span><span class="token punctuation">{</span>      PageResult<span class="token operator">&lt;</span>SpuBo<span class="token operator">></span>pageResult <span class="token operator">=</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>goodsService<span class="token punctuation">.</span><span class="token function">querySpuBoByPage</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>saleable<span class="token punctuation">,</span>page<span class="token punctuation">,</span>rows<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>CollectionUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>pageResult<span class="token punctuation">.</span><span class="token function">getItems</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">//404</span>          <span class="token keyword">return</span> ResponseEntity<span class="token punctuation">.</span><span class="token function">notFound</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//200</span>      <span class="token keyword">return</span> ResponseEntity<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span>pageResult<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre></li></ul><h2 id="4-异常处理"><a href="#4-异常处理" class="headerlink" title="4.异常处理"></a>4.异常处理</h2><ul><li><p>系统中异常包括两类：预期异常和运行时异常RuntimeException，前者通过捕获异常从而获取异常信息，后者主要通过规范代码开发、测试通过手段减少运行时异常的发生。 </p></li><li><p>系统的dao、service、controller出现<strong>都通过throws Exception向上抛出</strong>，最后由springmvc前端控制器交由异常处理器进行异常处理，如下图：</p><p><img src="https://raw.githubusercontent.com/black210/images/master/demo/202003/07/083639-376996.png" alt="SpringMVC异常处理思路"></p></li></ul><h3 id="4-1自定义异常类"><a href="#4-1自定义异常类" class="headerlink" title="4.1自定义异常类"></a>4.1自定义异常类</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 自定义异常类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SysException</span> <span class="token keyword">extends</span> <span class="token class-name">Exception</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 存储提示信息的</span>    <span class="token keyword">private</span> String message<span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> message<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMessage</span><span class="token punctuation">(</span>String message<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>message <span class="token operator">=</span> message<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">SysException</span><span class="token punctuation">(</span>String message<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>message <span class="token operator">=</span> message<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="4-2编写异常处理器"><a href="#4-2编写异常处理器" class="headerlink" title="4.2编写异常处理器"></a>4.2编写异常处理器</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 异常处理器 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SysExceptionResolver</span> <span class="token keyword">implements</span> <span class="token class-name">HandlerExceptionResolver</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 处理异常业务逻辑     * @param request     * @param response     * @param handler     * @param ex     * @return     */</span>    <span class="token keyword">public</span> ModelAndView <span class="token function">resolveException</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">,</span> Object handler<span class="token punctuation">,</span> Exception ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 获取到异常对象</span>        SysException e <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>ex <span class="token keyword">instanceof</span> <span class="token class-name">SysException</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            e <span class="token operator">=</span> <span class="token punctuation">(</span>SysException<span class="token punctuation">)</span>ex<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            e <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SysException</span><span class="token punctuation">(</span><span class="token string">"系统正在维护...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 创建ModelAndView对象</span>        ModelAndView mv <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ModelAndView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mv<span class="token punctuation">.</span><span class="token function">addObject</span><span class="token punctuation">(</span><span class="token string">"errorMsg"</span><span class="token punctuation">,</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mv<span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span><span class="token string">"error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> mv<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="4-3配置异常处理器（springmvc-xml中）"><a href="#4-3配置异常处理器（springmvc-xml中）" class="headerlink" title="4.3配置异常处理器（springmvc.xml中）"></a>4.3配置异常处理器（springmvc.xml中）</h3><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>mvc</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/mvc<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>        http://www.springframework.org/schema/beans        http://www.springframework.org/schema/beans/spring-beans.xsd        http://www.springframework.org/schema/mvc        http://www.springframework.org/schema/mvc/spring-mvc.xsd        http://www.springframework.org/schema/context        http://www.springframework.org/schema/context/spring-context.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 开启注解扫描 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cn.itcast<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 视图解析器对象 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>internalResourceViewResolver<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.view.InternalResourceViewResolver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>prefix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/WEB-INF/pages/<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>suffix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>.jsp<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--前端控制器，哪些静态资源不拦截--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>resources</span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/css/<span class="token punctuation">"</span></span> <span class="token attr-name">mapping</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/css/**<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>resources</span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/images/<span class="token punctuation">"</span></span> <span class="token attr-name">mapping</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/images/**<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>resources</span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/js/<span class="token punctuation">"</span></span> <span class="token attr-name">mapping</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/js/**<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!--配置异常处理器--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sysExceptionResolver<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cn.itcast.exception.SysExceptionResolver<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 开启SpringMVC框架注解的支持 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>annotation-driven</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><h3 id="4-4编写跳转的页面"><a href="#4-4编写跳转的页面" class="headerlink" title="4.4编写跳转的页面"></a>4.4编写跳转的页面</h3><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%@</span> <span class="token attr-name">page</span> <span class="token attr-name">contentType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html;charset<span class="token punctuation">=</span>UTF-8<span class="token punctuation">"</span></span> <span class="token attr-name">language</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java<span class="token punctuation">"</span></span> <span class="token attr-name">isELIgnored</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span> <span class="token attr-name">%</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    ${errorMsg}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h2 id="5-拦截器"><a href="#5-拦截器" class="headerlink" title="5.拦截器"></a>5.拦截器</h2><h3 id="5-1概述"><a href="#5-1概述" class="headerlink" title="5.1概述"></a>5.1概述</h3><p>​        Spring MVC 的处理器拦截器类似于 Servlet 开发中的过滤器 <strong>Filter</strong>，用于对处理器进行预处理和后处理。用户可以自己定义一些拦截器来实现特定的功能。</p><p>​        谈到拦截器，还要向大家提一个词——拦截器链（Interceptor Chain）。拦截器链就是将拦截器按一定的顺序联结成一条链。在访问被拦截的方法或字段时，拦截器链中的拦截器就会按其之前定义的顺序被调用。</p><h3 id="5-2与过滤器比较"><a href="#5-2与过滤器比较" class="headerlink" title="5.2与过滤器比较"></a>5.2与过滤器比较</h3><ul><li><p><strong>过滤器</strong>是 servlet 规范中的一部分，任何 java web 工程都可以使用。</p></li><li><p><strong>拦截器</strong>是 SpringMVC 框架自己的，只有使用了 SpringMVC 框架的工程才能用。</p></li><li><p><strong>过滤器</strong>在 url-pattern 中配置了<strong>/*</strong>之后，可以对所有要访问的资源拦截。</p></li><li><p><strong>拦截器</strong>它是只会拦截访问的控制器方法，如果访问的是 jsp，html,css,image 或者 js 是不会进行拦截的。</p></li></ul><h3 id="5-3HandlerInterceptor"><a href="#5-3HandlerInterceptor" class="headerlink" title="5.3HandlerInterceptor"></a>5.3HandlerInterceptor</h3><p>​    它也是 AOP 思想的具体应用。我们要想自定义拦截器， 要求必须实现：<strong>HandlerInterceptor 接口。</strong></p><p><strong>主要方法：</strong></p><ul><li><p><code>preHandle</code>方法是controller方法执行前拦截的方法</p></li><li><ul><li>可以使用request或者response跳转到指定的页面</li></ul></li><li><ul><li>return      true放行，执行下一个拦截器，如果没有拦截器，执行controller中的方法。</li></ul></li><li><ul><li>return      false不放行，不会执行controller中的方法。</li></ul></li><li><p><code>postHandle</code>是controller方法执行后执行的方法，在JSP视图执行前。</p></li><li><ul><li>可以使用request或者response跳转到指定的页面</li></ul></li><li><ul><li>如果指定了跳转的页面，那么controller方法跳转的页面将不会显示。</li></ul></li><li><p><code>afterCompletion</code>方法是在JSP执行后执行</p></li><li><ul><li>request或者response不能再跳转页面了</li></ul></li></ul><h3 id="5-4自定义拦截器"><a href="#5-4自定义拦截器" class="headerlink" title="5.4自定义拦截器"></a>5.4自定义拦截器</h3><p><img src="https://raw.githubusercontent.com/black210/images/master/demo/202003/07/102925-55001.png" alt="SpringMVC自定义拦截器"></p><h4 id="5-4-1编写拦截器类"><a href="#5-4-1编写拦截器类" class="headerlink" title="5.4.1编写拦截器类"></a>5.4.1编写拦截器类</h4><blockquote><p>​    <strong>拦截器1</strong></p></blockquote><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 自定义拦截器 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyInterceptor1</span> <span class="token keyword">implements</span> <span class="token class-name">HandlerInterceptor</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 预处理，controller方法执行前     * return true 放行，执行下一个拦截器，如果没有，执行controller中的方法     * return false不放行     * @param request     * @param response     * @param handler     * @return     * @throws Exception     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">preHandle</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">,</span> Object handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"MyInterceptor1执行了...前1111"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// request.getRequestDispatcher("/WEB-INF/pages/error.jsp").forward(request,response);</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 后处理方法，controller方法执行后，success.jsp执行之前     * @param request     * @param response     * @param handler     * @param modelAndView     * @throws Exception     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postHandle</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">,</span> Object handler<span class="token punctuation">,</span> ModelAndView modelAndView<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"MyInterceptor1执行了...后1111"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// request.getRequestDispatcher("/WEB-INF/pages/error.jsp").forward(request,response);</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * success.jsp页面执行后，该方法会执行     * @param request     * @param response     * @param handler     * @param ex     * @throws Exception     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterCompletion</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">,</span> Object handler<span class="token punctuation">,</span> Exception ex<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"MyInterceptor1执行了...最后1111"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>​    <strong>拦截器2</strong></p></blockquote><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 自定义拦截器 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyInterceptor2</span> <span class="token keyword">implements</span> <span class="token class-name">HandlerInterceptor</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 预处理，controller方法执行前     * return true 放行，执行下一个拦截器，如果没有，执行controller中的方法     * return false不放行     * @param request     * @param response     * @param handler     * @return     * @throws Exception     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">preHandle</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">,</span> Object handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"MyInterceptor1执行了...前2222"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// request.getRequestDispatcher("/WEB-INF/pages/error.jsp").forward(request,response);</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 后处理方法，controller方法执行后，success.jsp执行之前     * @param request     * @param response     * @param handler     * @param modelAndView     * @throws Exception     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postHandle</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">,</span> Object handler<span class="token punctuation">,</span> ModelAndView modelAndView<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"MyInterceptor1执行了...后2222"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// request.getRequestDispatcher("/WEB-INF/pages/error.jsp").forward(request,response);</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * success.jsp页面执行后，该方法会执行     * @param request     * @param response     * @param handler     * @param ex     * @throws Exception     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterCompletion</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">,</span> Object handler<span class="token punctuation">,</span> Exception ex<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"MyInterceptor1执行了...最后2222"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="5-4-2配置拦截器（springmvc-xml）"><a href="#5-4-2配置拦截器（springmvc-xml）" class="headerlink" title="5.4.2配置拦截器（springmvc.xml）"></a>5.4.2配置拦截器（springmvc.xml）</h4><pre class=" language-xml"><code class="language-xml"> <span class="token comment" spellcheck="true">&lt;!--配置拦截器--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>interceptors</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--配置拦截器--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>interceptor</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!--要拦截的具体的方法--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>mapping</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/user/*<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token comment" spellcheck="true">&lt;!--不要拦截的方法            &lt;mvc:exclude-mapping path=""/>            --></span>            <span class="token comment" spellcheck="true">&lt;!--配置拦截器对象--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cn.itcast.controller.cn.itcast.interceptor.MyInterceptor1<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>interceptor</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--配置第二个拦截器--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>interceptor</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!--要拦截的具体的方法--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>mapping</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/**<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token comment" spellcheck="true">&lt;!--不要拦截的方法            &lt;mvc:exclude-mapping path=""/>            --></span>            <span class="token comment" spellcheck="true">&lt;!--配置拦截器对象--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cn.itcast.controller.cn.itcast.interceptor.MyInterceptor2<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>interceptor</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>interceptors</span><span class="token punctuation">></span></span></code></pre><h4 id="5-4-3编写控制类"><a href="#5-4-3编写控制类" class="headerlink" title="5.4.3编写控制类"></a>5.4.3编写控制类</h4><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/user"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/testInterceptor"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">testInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"testInterceptor执行了..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="5-4-4跳转页面"><a href="#5-4-4跳转页面" class="headerlink" title="5.4.4跳转页面"></a>5.4.4跳转页面</h4><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%@</span> <span class="token attr-name">page</span> <span class="token attr-name">contentType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html;charset<span class="token punctuation">=</span>UTF-8<span class="token punctuation">"</span></span> <span class="token attr-name">language</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java<span class="token punctuation">"</span></span> <span class="token attr-name">%</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>错误页面<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%@</span> <span class="token attr-name">page</span> <span class="token attr-name">contentType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html;charset<span class="token punctuation">=</span>UTF-8<span class="token punctuation">"</span></span> <span class="token attr-name">language</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java<span class="token punctuation">"</span></span> <span class="token attr-name">%</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>执行成功<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">System.out.println("success.jsp执行了...");</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p><strong>结果演示：</strong></p><p>​        <img src="https://raw.githubusercontent.com/black210/images/master/demo/202003/07/091712-767616.png" alt="自定义拦截器结果"></p><h3 id="5-5多个拦截器执行顺序"><a href="#5-5多个拦截器执行顺序" class="headerlink" title="5.5多个拦截器执行顺序"></a>5.5多个拦截器执行顺序</h3><p>​    参考链接：<a href="https://blog.csdn.net/syslbjjly/article/details/90675223" target="_blank" rel="noopener">https://blog.csdn.net/syslbjjly/article/details/90675223</a></p><p>在此可以知道拦截器的执行流程和<strong>springboot注册的顺序有关</strong>，以下是拦截器的正常流程的执行顺序</p><p><img src="https://raw.githubusercontent.com/black210/images/master/demo/202003/07/092827-614925.png" alt="多个拦截器的执行示意"></p><blockquote><p><strong>总结</strong>：</p></blockquote><ul><li><p>拦截器1放行，拦截器2 preHandle才会执行。</p></li><li><p>拦截器2 preHandle不放行，拦截器2 postHandle和afterCompletion不会执行。</p></li><li><p>只要有一个拦截器不放行，postHandle不会执行。</p></li></ul><h3 id="5-6验证用户登录案例"><a href="#5-6验证用户登录案例" class="headerlink" title="5.6验证用户登录案例"></a>5.6验证用户登录案例</h3><h4 id="5-6-1思路"><a href="#5-6-1思路" class="headerlink" title="5.6.1思路"></a>5.6.1思路</h4><ul><li><p>1、有一个登录页面，需要写一个 controller 访问页面</p></li><li><p>2、登录页面有一提交表单的动作。需要在 controller 中处理。</p><ul><li>判断用户名密码是否正确</li><li>如果正确 向 session 中写入用户信息</li><li>返回登录成功。</li></ul></li><li><p>3、拦截用户请求，判断用户是否登录</p><ul><li>如果用户已经登录。放行</li><li>如果用户未登录，跳转到登录页面</li></ul></li></ul><h4 id="5-6-2控制器"><a href="#5-6-2控制器" class="headerlink" title="5.6.2控制器"></a>5.6.2控制器</h4><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">//登陆页面</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/login"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">login</span><span class="token punctuation">(</span>Model model<span class="token punctuation">)</span><span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"login"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//登陆提交</span>    <span class="token comment" spellcheck="true">//userid：用户账号，pwd：密码</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/loginsubmit"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">loginsubmit</span><span class="token punctuation">(</span>HttpSession session<span class="token punctuation">,</span>String userid<span class="token punctuation">,</span>String pwd<span class="token punctuation">)</span><span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//向 session 记录用户身份信息</span>        session<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"activeUser"</span><span class="token punctuation">,</span> userid<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token string">"redirect:/main.jsp"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//退出</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/logout"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">logout</span><span class="token punctuation">(</span>HttpSession session<span class="token punctuation">)</span><span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//session 过期</span>    session<span class="token punctuation">.</span><span class="token function">invalidate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"redirect:index.jsp"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h4 id="5-6-3拦截器"><a href="#5-6-3拦截器" class="headerlink" title="5.6.3拦截器"></a>5.6.3拦截器</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">HandlerInterceptor</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    Public <span class="token keyword">boolean</span> <span class="token function">preHandle</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">,</span>Object handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//如果是登录页面则放行</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getRequestURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"login.action"</span><span class="token punctuation">)</span><span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    HttpSession session <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//如果用户已登录也放行</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>session<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//用户没有登录挑战到登录页面</span>    request<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">"/WEB-INF/jsp/login.jsp"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring 总结</title>
      <link href="/2020/03/05/spring-zong-jie/"/>
      <url>/2020/03/05/spring-zong-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring总结"><a href="#Spring总结" class="headerlink" title="Spring总结"></a>Spring总结</h1><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>引用链接:<a href="https://github.com/Snailclimb/JavaGuide/blob/master/docs/system-design/framework/spring/SpringInterviewQuestions.md" target="_blank" rel="noopener">https://github.com/Snailclimb/JavaGuide/blob/master/docs/system-design/framework/spring/SpringInterviewQuestions.md</a></p><h2 id="1-spring是什么"><a href="#1-spring是什么" class="headerlink" title="1.spring是什么"></a><strong>1.spring是什么</strong></h2><p>​        Spring 是分层的 Java SE/EE 应用 full-stack 轻量级开源框架，以 IoC（Inverse Of Control： 反转控制）和 AOP（Aspect Oriented Programming：面向切面编程）为内核，提供了展现层 Spring MVC 和持久层 Spring JDBC 以及业务层事务管理等众多的企业级应用技术，还能整合开源世界众多著名的第三方框架和类库，逐渐成为使用最多的 Java EE 企业应用开源框架。</p><p>​        我们一般说 Spring 框架指的都是 Spring Framework，它是很多模块的集合，使用这些模块可以很方便地协助我们进行开发。这些模块是：核心容器、数据访问/集成,、Web、AOP（面向切面编程）、工具、消息和测试模块。比如：Core Container 中的 Core 组件是Spring 所有组件的核心，Beans 组件和 Context 组件是实现IOC和依赖注入的基础，AOP组件用来实现面向切面编程。</p><p>​    Spring 官网列出的 Spring 的 6 个特征:</p><ul><li><strong>核心技术</strong> ：依赖注入(DI)，AOP，事件(events)，资源，i18n，验证，数据绑定，类型转换，SpEL。</li><li><strong>测试</strong> ：模拟对象，TestContext框架，Spring MVC 测试，WebTestClient。</li><li><strong>数据访问</strong> ：事务，DAO支持，JDBC，ORM，编组XML。</li><li><strong>Web支持</strong> : Spring MVC和Spring WebFlux Web框架。</li><li><strong>集成</strong> ：远程处理，JMS，JCA，JMX，电子邮件，任务，调度，缓存。</li><li><strong>语言</strong> ：Kotlin，Groovy，动态语言。</li></ul><h2 id="2-spring-的优势"><a href="#2-spring-的优势" class="headerlink" title="2.spring 的优势"></a><strong>2.spring 的优势</strong></h2><ul><li><strong>方便解耦，简化开发</strong></li></ul><p>通过Spring 提供的IoC 容器，可以将对象间的依赖关系交由Spring 进行控制，避免硬编码所造成的过度程序耦合。用户也不必再为单例模式类、属性文件解析等这些很底层的需求编写代码，可 以更专注于上层的应用。</p><ul><li><strong>AOP</strong> <strong>编程的支持</strong></li></ul><p>通过Spring 的AOP 功能，方便进行面向切面的编程，许多不容易用传统OOP 实现的功能可以</p><p>通过AOP 轻松应付。</p><ul><li><strong>声明式事务的支持</strong></li></ul><p>可以将我们从单调烦闷的事务管理代码中解脱出来，通过声明式方式灵活的进行事务的管理， 提高开发效率和质量。</p><ul><li><strong>方便程序的测试</strong></li></ul><p>可以用非容器依赖的编程方式进行几乎所有的测试工作，测试不再是昂贵的操作，而是随手可 做的事情。</p><ul><li><strong>方便集成各种优秀框架</strong></li></ul><p>Spring 可以降低各种框架的使用难度，提供了对各种优秀框架（Struts、Hibernate、Hessian、Quartz 等）的直接支持。</p><ul><li><strong>降低</strong>JavaEE API<strong>的使用难度</strong></li></ul><p>Spring 对JavaEE API（如 JDBC、JavaMail、远程调用等）进行了薄薄的封装层，使这些 API 的使用难度大为降低。</p><ul><li><strong>Java</strong> <strong>源码是经典学习范例</strong></li></ul><p>Spring 的源代码设计精妙、结构清晰、匠心独用，处处体现着大师对 Java 设计模式灵活运用以及对 Java 技术的高深造诣。它的源代码无意是Java 技术的最佳实践的范例。</p><h2 id="3-spring-的体系结构"><a href="#3-spring-的体系结构" class="headerlink" title="3.spring 的体系结构"></a><strong>3.spring 的体系结构</strong></h2><p>下图对应的是 Spring4.x 版本。目前最新的5.x版本中 Web 模块的 Portlet 组件已经被废弃掉，同时增加了用于异步响应式处理的 WebFlux 组件。</p><p> <img src="https://camo.githubusercontent.com/d7846803a95e57f57a94197168714bfc58db6432/68747470733a2f2f6d792d626c6f672d746f2d7573652e6f73732d636e2d6265696a696e672e616c6979756e63732e636f6d2f323031392d362f537072696e672545342542382542422545382541362538312545362541382541312545352539442539372e706e67" alt="Spring主要模块"></p><ul><li><p>Spring Core： 基础,可以说 Spring 其他所有的功能都需要依赖于该类库。主要提供 IoC 依赖注入功能。</p></li><li><p>Spring Aspects ： 该模块为与AspectJ的集成提供支持。</p></li><li><p>Spring AOP ：提供了面向切面的编程实现。</p></li><li><p>Spring JDBC : Java数据库连接。</p></li><li><p>Spring JMS ：Java消息服务。</p></li><li><p>Spring ORM : 用于支持Hibernate等ORM工具。</p></li><li><p>Spring Web : 为创建Web应用程序提供支持。</p></li><li><p>Spring Test : 提供了对 JUnit 和 TestNG 测试的支持。</p><p>下面为框架在项目中的示意图</p><p><img src="https://raw.githubusercontent.com/black210/images/master/demo/202003/04/152154-874397.png" alt="image-20200304152151532"></p></li></ul><h2 id="4-Spring-IOC"><a href="#4-Spring-IOC" class="headerlink" title="4.Spring IOC"></a>4.Spring IOC</h2><p>​        IOC（Inverse of Control:控制反转）是一种<strong>设计思想</strong>，就是 <strong>将原本在程序中手动创建对象的控制权，交由Spring框架来管理。</strong> IoC 在其他语言中也有应用，并非 Spring 特有。 <strong>IOC 容器是 Spring 用来实现 IOC 的载体， IOC 容器实际上就是个Map（key，value）,Map 中存放的是各种对象。</strong></p><p>​        将对象之间的相互依赖关系交给 IoC 容器来管理，并由 IoC 容器完成对象的注入。这样可以很大程度上简化应用的开发，把应用从复杂的依赖关系中解放出来。 <strong>IOC 容器就像是一个工厂一样，当我们需要创建一个对象的时候，只需要配置好配置文件/注解即可，完全不用考虑对象是如何被创建出来的。</strong> 在实际项目中一个 Service 类可能有几百甚至上千个类作为它的底层，假如我们需要实例化这个 Service，你可能要每次都要搞清这个 Service 所有底层类的构造函数，这可能会把人逼疯。如果利用 IOC 的话，你只需要配置好，然后在需要的地方引用就行了，这大大增加了项目的可维护性且降低了开发难度。</p><p>​        Spring 时代我们一般通过 XML 文件来配置 Bean，后来开发人员觉得 XML 文件来配置不太好，于是 SpringBoot 注解配置就慢慢开始流行起来。</p><p>推荐阅读：<a href="https://www.zhihu.com/question/23277575/answer/169698662" target="_blank" rel="noopener">https://www.zhihu.com/question/23277575/answer/169698662</a></p><p><img src="https://camo.githubusercontent.com/faa0326fb04c227b78b8e640b7a75da76a612f1f/68747470733a2f2f6d792d626c6f672d746f2d7573652e6f73732d636e2d6265696a696e672e616c6979756e63732e636f6d2f323031392d372f537072696e67494f432545352538382539442545352541372538422545352538432539362545382542462538372545372541382538422e706e67" alt="Spring IoC的初始化过程"></p><p>​    IOC源码阅读</p><ul><li><a href="https://javadoop.com/post/spring-ioc" target="_blank" rel="noopener">https://javadoop.com/post/spring-ioc</a></li></ul><h3 id="4-1Spring基于XML的IOC细节"><a href="#4-1Spring基于XML的IOC细节" class="headerlink" title="4.1Spring基于XML的IOC细节"></a><strong>4.1Spring基于XML的IOC细节</strong></h3><h4 id="4-1-1spring中工厂的类结构图"><a href="#4-1-1spring中工厂的类结构图" class="headerlink" title="4.1.1spring中工厂的类结构图"></a>4.1.1spring中工厂的类结构图</h4><p><img src="https://raw.githubusercontent.com/black210/images/master/demo/202003/04/153543-744181.png" alt="img"></p><p><img src="https://raw.githubusercontent.com/black210/images/master/demo/202003/04/153546-967942.png" alt="0-  8vkatbnEveitPublister  MBsageSource  ResourceLoader  ResourcePatternResolver  0-  BeanFactory  tractApplicationContext  o- LStaueBemFactory  Lifecycb  Abs nContext  FleSystemXmlApplicationContext "></p><p><img src="https://www.javadoop.com/blogimages/spring-context/2.png" alt="2"></p><p>有几个重点和大家说明下就好。</p><ol><li>ApplicationContext 继承了 <strong>ListableBeanFactory</strong>，这个 Listable 的意思就是，通过这个接口，我们可以获取多个 Bean，大家看源码会发现，最顶层 BeanFactory 接口的方法都是获取单个 Bean 的。</li><li>ApplicationContext 继承了 <strong>HierarchicalBeanFactory</strong>，Hierarchical 单词本身已经能说明问题了，也就是说我们可以在应用中起多个 BeanFactory，然后可以将各个 BeanFactory 设置为父子关系。</li><li><strong>AutowireCapableBeanFactory</strong> 这个名字中的 Autowire 大家都非常熟悉，它就是用来自动装配 Bean 用的，但是仔细看上图，ApplicationContext 并没有继承它，不过不用担心，不使用继承，不代表不可以使用组合，如果你看到 ApplicationContext 接口定义中的最后一个方法 getAutowireCapableBeanFactory() 就知道了。</li><li><strong>ConfigurableListableBeanFactory</strong> 也是一个特殊的接口，看图，特殊之处在于它继承了第二层所有的三个接口，而 ApplicationContext 没有。这点之后会用到。</li><li>请先不用花时间在其他的接口和类上，先理解我说的这几点就可以了。</li></ol><h4 id="4-1-2BeanFactory-和ApplicationContext-的区别"><a href="#4-1-2BeanFactory-和ApplicationContext-的区别" class="headerlink" title="4.1.2BeanFactory 和ApplicationContext 的区别"></a>4.1.2BeanFactory 和ApplicationContext 的区别</h4><p>BeanFactory 才是Spring 容器中的<strong>顶层接口</strong>。ApplicationContext 是<strong>它的子接口</strong>。</p><p>核心容器的两个接口引发出的问题：</p><p>   * ApplicationContext:   <strong>单例对象</strong>适用       采用此接口</p><p>   *   它在构建核心容器时，创建对象采取的策略是采用<strong>立即加载</strong>的方式。也就是说，只要一读取完配置文件马上就创建配置文件中配置的对象。</p><p>   * BeanFactory:              <strong>多例对象</strong>使用</p><p>   *   它在构建核心容器时，创建对象采取的策略是采用<strong>延迟加载</strong>的方式。也就是说，什么时候根据id获取对象了，什么时候才真正的创建对象。</p><h4 id="4-1-3ApplicationContext-接口的实现类"><a href="#4-1-3ApplicationContext-接口的实现类" class="headerlink" title="4.1.3ApplicationContext 接口的实现类"></a><strong>4.1.3ApplicationContext 接口的实现类</strong></h4><p><img src="https://raw.githubusercontent.com/black210/images/master/demo/202003/04/080136-414168.png" alt="1"></p><hr><ul><li><p><strong>ClassPathXmlApplicationContext</strong>：</p><p>​    它是从类的根路径下加载配置文件 ，推荐使用这种</p></li><li><p>FileSystemXmlApplicationContext：</p><p>​    它是从磁盘路径上加载配置文件，配置文件可以在磁盘的任意位置。</p></li><li><p><strong>AnnotationConfigApplicationContext:</strong></p><p>​    当我们使用注解配置容器对象时，需要使用此类来创建spring 容器。它用来读取注解</p></li></ul><h3 id="4-2bean标签和管理对象细节"><a href="#4-2bean标签和管理对象细节" class="headerlink" title="4.2bean标签和管理对象细节"></a>4.2bean标签和管理对象细节</h3><h4 id="4-2-1bean标签"><a href="#4-2-1bean标签" class="headerlink" title="4.2.1bean标签"></a>4.2.1<strong>bean标签</strong></h4><p><strong>作用：</strong></p><p>​    用于配置对象让 spring 来创建的。</p><p>​    默认情况下它调用的是类中的无参构造函数。如果没有无参构造函数则不能创建成功。</p><p><strong>属性：</strong></p><ul><li><p>id：给对象在容器中提供一个唯一标识。用于获取对象。</p></li><li><p>class：指定类的全限定类名。用于反射创建对象。默认情况下调用无参构造函数。</p></li><li><p>scope：指定对象的作用范围。</p><ul><li>singleton :默认值，单例的.</li></ul></li></ul><ul><li><p>prototype :多例的.</p></li><li><p>request  :WEB 项目中,Spring 创建一个 Bean 的对象,将对象存入到request 域中.</p></li><li><p>session  :WEB 项目中,Spring 创建一个 Bean 的对象,将对象存入到session 域中.</p></li><li><p>global session  :WEB 项目中,应用在 <a href="https://baike.baidu.com/item/Portlet/1069487?fr=aladdin" target="_blank" rel="noopener">Portlet</a> （集群）环境.如果没有 Portlet 环境那么globalSession 相当于 session.</p><ul><li>拓展：</li></ul><p>​                    Portlet是能够生成语义代码(例如：HTML)片段的小型Java Web插件。它们基于portlet容器，可以像servlet一样处理HTTP请求。但是，与 servlet 不同，每个 portlet 都有不同的会话</p></li></ul><ul><li>init-method：指定类中的初始化方法名称。destroy-method：指定类中销毁方法名称</li></ul><h4 id="4-2-2bean的作用范围和生命周期"><a href="#4-2-2bean的作用范围和生命周期" class="headerlink" title="4.2.2bean的作用范围和生命周期"></a>4.2.2<strong>bean的作用范围和生命周期</strong></h4><ul><li><p><strong>单例对象</strong>：scope=”singleton”</p><p>一个应用只有一个对象的实例。它的作用范围就是整个引用。</p><p> 生命周期：</p></li></ul><p>​                    对象出生：当应用加载，创建容器时，对象就被创建了。</p><p>​                    对象活着：只要容器在，对象一直活着。</p><p>​                    对象死亡：当应用卸载，销毁容器时，对象就被销毁了。</p><ul><li><p><strong>多例对象</strong>：scope=”prototype”</p><p>每次访问对象时，都会重新创建对象实例。</p><p>生命周期：</p></li></ul><p>​                    对象出生：当使用对象时，创建新的对象实例。</p><p>​                    对象活着：只要对象在使用中，就一直活着。</p><p>​                    对象死亡：当对象长时间不用时，被 java 的垃圾回收器回收了。</p><p>​        所以，<strong><em>多例对象不会执行destroy</em></strong>，单例对象会。</p><ul><li><p><strong>拓展</strong>：</p><p>下面的内容整理自：<a href="https://yemengying.com/2016/07/14/spring-bean-life-cycle/" target="_blank" rel="noopener">https://yemengying.com/2016/07/14/spring-bean-life-cycle/</a> ，</p><p>除了这篇文章，再推荐一篇很不错的文章 ：<a href="https://www.cnblogs.com/zrtqsk/p/3735273.html" target="_blank" rel="noopener">https://www.cnblogs.com/zrtqsk/p/3735273.html</a> 。</p><ul><li>Bean 容器找到配置文件中 Spring Bean 的定义。</li><li>Bean 容器利用 Java Reflection API 创建一个Bean的实例。</li><li>如果涉及到一些属性值 利用 <code>set()</code>方法设置一些属性值。</li><li>如果 Bean 实现了 <code>BeanNameAware</code> 接口，调用 <code>setBeanName()</code>方法，传入Bean的名字。</li><li>如果 Bean 实现了 <code>BeanClassLoaderAware</code> 接口，调用 <code>setBeanClassLoader()</code>方法，传入 <code>ClassLoader</code>对象的实例。</li><li>与上面的类似，如果实现了其他 <code>*.Aware</code>接口，就调用相应的方法。</li><li>如果有和加载这个 Bean 的 Spring 容器相关的 <code>BeanPostProcessor</code> 对象，执行<code>postProcessBeforeInitialization()</code> 方法</li><li>如果Bean实现了<code>InitializingBean</code>接口，执行<code>afterPropertiesSet()</code>方法。</li><li>如果 Bean 在配置文件中的定义包含 init-method 属性，执行指定的方法。</li><li>如果有和加载这个 Bean的 Spring 容器相关的 <code>BeanPostProcessor</code> 对象，执行<code>postProcessAfterInitialization()</code> 方法</li><li>当要销毁 Bean 的时候，如果 Bean 实现了 <code>DisposableBean</code> 接口，执行 <code>destroy()</code> 方法。</li><li>当要销毁 Bean 的时候，如果 Bean 在配置文件中的定义包含 destroy-method 属性，执行指定的方法。</li></ul><p><img src="https://camo.githubusercontent.com/a3d4415162d30d4659779f6db3717f9a68fd3c97/687474703a2f2f6d792d626c6f672d746f2d7573652e6f73732d636e2d6265696a696e672e616c6979756e63732e636f6d2f31382d392d31372f353439363430372e6a7067" alt="Spring Bean 生命周期"></p></li></ul><h4 id="4-2-3实例化Bean的三种方式"><a href="#4-2-3实例化Bean的三种方式" class="headerlink" title="4.2.3实例化Bean的三种方式"></a><strong>4.2.3实例化Bean的三种方式</strong></h4><ul><li><strong>第一种方式：使用默认无参构造函数</strong></li></ul><p>在默认情况下：它会根据默认无参构造函数来创建类对象。如果 bean 中没有默认无参构造函数，将会创建失败。</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>accountService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xxx.service.impl.AccountServiceImpl<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><ul><li><strong>第二种方式：spring     管理静态工厂-使用静态工厂的方法创建对象</strong></li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**\* 模拟一个静态工厂，创建业务层实现类*/</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StaticFactory</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> IAccountService <span class="token function">createAccountService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AccountServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>此种方式是:使用 StaticFactory 类中的静态方法 <code>createAccountService</code> 创建对象，并存入 spring 容器</p><p>​    id 属性：指定 bean 的 id，用于从容器中获取</p><p>​    class 属性：指定静态工厂的全限定类名</p><p>​    factory-method 属性：指定生产对象的静态方法</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>accountService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xxx.factory.StaticFactory<span class="token punctuation">"</span></span>       <span class="token attr-name">factory-method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>createAccountService<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><ul><li><strong>第三种方式：spring     管理实例工厂-使用实例工厂的方法创建对象</strong></li></ul><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**         模拟一个实例工厂，创建业务层实现类         此工厂创建对象，必须现有工厂实例对象，再调用方法    */</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InstanceFactory</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> IAccountService <span class="token function">createAccountService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AccountServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>此种方式是：先把工厂的创建交给 spring 来管理。然后在使用工厂的 bean 来调用里面的方法</p><p>​    factory-bean 属性：用于指定实例工厂 bean 的 id。</p><p>​    factory-method 属性：用于指定实例工厂中创建对象的方法。</p><pre class=" language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>instancFactory<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xxx.factory.InstanceFactory<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>accountService<span class="token punctuation">"</span></span>        <span class="token attr-name">factory-bean</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>instancFactory<span class="token punctuation">"</span></span>        <span class="token attr-name">factory-method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>createAccountService<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><h3 id="4-3依赖注入"><a href="#4-3依赖注入" class="headerlink" title="4.3依赖注入"></a>4.3依赖注入</h3><h4 id="4-3-1概述"><a href="#4-3-1概述" class="headerlink" title="4.3.1概述"></a>4.3.1概述</h4><p>依赖注入：</p><p>​      <strong>Dependency Injection</strong></p><p>依赖关系的管理：</p><p>​      以后都交给spring来维护，在当前类需要用到其他类的对象，由spring为我们提供，我们只需要在配置文件中说明；依赖关系的维护就称之为依赖注入。</p><p><strong>能注入的数据：有三类</strong></p><ul><li><p>基本类型和String</p></li><li><p>其他bean类型（在配置文件中或者注解配置过的bean）</p></li><li><p>复杂类型/集合类型</p></li></ul><h4 id="4-3-2注入的方式：有三种"><a href="#4-3-2注入的方式：有三种" class="headerlink" title="4.3.2注入的方式：有三种"></a>4.3.2<strong>注入的方式：有三种</strong></h4><h5 id="（1）使用构造函数提供"><a href="#（1）使用构造函数提供" class="headerlink" title="（1）使用构造函数提供"></a>（1）使用构造函数提供</h5><p>使用的标签:<strong>constructor-arg</strong></p><p>标签出现的位置：bean标签的内部</p><p>标签中的属性</p><ul><li><p>type：用于指定要注入的数据的数据类型，该数据类型也是构造函数中某个或某些参数的类型</p></li><li><p>index：用于指定要注入的数据给构造函数中指定索引位置的参数赋值。索引的位置是从0开始</p></li><li><p><strong>name</strong>：用于指定给构造函数中指定名称的参数赋值                    常用的</p><p><strong>以上三个用于指定给构造函数中哪个参数赋值</strong></p></li><li><p>value：用于提供基本类型和String类型的数据</p></li><li><p>ref：用于指定其他的bean类型数据。它指的就是在spring的Ioc核心容器中出现过的bean对象</p><p><strong>优势</strong>：</p><p>​      在获取bean对象时，注入数据是必须的操作，否则对象无法创建成功。</p><p><strong>弊端</strong>：</p><p>​      改变了bean对象的实例化方式，使我们在创建对象时，如果用不到这些数据，也必须提供。</p><pre class=" language-xml"><code class="language-xml"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>accountService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xxx.service.impl.AccountServiceImpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>泰斯特<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>18<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>birthday<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>now<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 配置一个日期对象 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>now<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java.util.Date<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre></li></ul><h5 id="（2）使用set方法提供"><a href="#（2）使用set方法提供" class="headerlink" title="（2）使用set方法提供"></a>（2）使用set方法提供</h5><p>涉及的标签：<strong>property</strong></p><p>出现的位置：bean标签的内部</p><p>标签的属性</p><ul><li><p>name：用于指定注入时所调用的set方法名称</p></li><li><p>value：用于提供基本类型和String类型的数据</p></li><li><p>ref：用于指定其他的bean类型数据。它指的就是在spring的Ioc核心容器中出现过的bean对象</p></li></ul><p>​    <strong>优势</strong>：</p><p>​      创建对象时没有明确的限制，可以直接使用默认构造函数</p><p>​    <strong>弊端</strong>：</p><p>​      如果有某个成员必须有值，则获取对象是有可能set方法没有执行。</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>accountService2<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xxx.service.impl.AccountServiceImpl2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>TEST<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>21<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    &lt;property name="birthday" ref="now"<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><ul><li><p><strong>注入集合属性</strong></p><ul><li><p>用于给List结构集合注入的标签：</p><p>​      list     array     set</p></li><li><p>用于个Map结构集合注入的标签:</p><p>​      map     props</p><p><strong>若结构相同，标签可以互换</strong></p></li></ul></li></ul><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>accountService3<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xxx.service.impl.AccountServiceImpl3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myStrs<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>set</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>AAA<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>BBB<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>CCC<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>set</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myList<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>array</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>AAA<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>BBB<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>CCC<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>array</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mySet<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>list</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>AAA<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>BBB<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>CCC<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>list</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>props</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>testC<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>ccc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>testD<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>ddd<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>props</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myProps<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>map</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>testA<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>aaa<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>entry</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>testB<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>BBB<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>entry</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>map</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><h5 id="（3）使用注解提供"><a href="#（3）使用注解提供" class="headerlink" title="（3）使用注解提供"></a>（3）使用注解提供</h5><p>​        稍后将详细说明</p><h3 id="4-4注解总结"><a href="#4-4注解总结" class="headerlink" title="4.4注解总结"></a>4.4注解总结</h3><h4 id="4-4-1用于创建对象的"><a href="#4-4-1用于创建对象的" class="headerlink" title="4.4.1用于创建对象的"></a>4.4.1用于创建对象的</h4><p>他们的作用就和在XML配置文件中编写一个<bean>标签实现的功能是一样的</bean></p><ul><li><p><strong>Component</strong> :</p><p>​          作用：用于把当前类对象存入spring容器中</p><p>​          属性：</p><ul><li>value：用于指定bean的id。当我们不写时，它的<strong>默认值是当前类名，且首字母改小写</strong>。</li></ul></li><li><p><strong>Controller</strong>：一般用在表现层</p></li><li><p><strong>Service</strong>：一般用在业务层</p></li><li><p><strong>Repository</strong>：一般用在持久层</p></li></ul><p>​              以上三个注解他们的作用和属性与Component是一模一样。</p><p><strong>细节</strong>：如果注解中<strong>有且只有一个</strong>属性要赋值时，且名称是value，<strong>value在赋值是可以不写</strong>。<br>         他们三个是spring框架为我们提供明确的三层使用的注解，使我们的三层对象更加清晰</p><h4 id="4-4-2用于注入数据的"><a href="#4-4-2用于注入数据的" class="headerlink" title="4.4.2用于注入数据的"></a><strong>4.4.2用于注入数据的</strong></h4><p>他们的作用就和在xml配置文件中的bean标签中写一个<property>标签的作用是一样的<br>            相当于：</property></p><pre class=" language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><ul><li><p><strong>Autowired</strong>:</p><ul><li><p>作用：自动按照类型注入。只要容器中有<strong>唯一</strong>的一个bean对象类型和要注入的变量类型匹配，就可以注入成功</p><p>如果ioc容器中没有任何bean的类型和要注入的变量类型匹配，则报错。</p><p>如果Ioc容器中有多个类型匹配时：使用要注入的对象变量名称作为bean的id，在spring容器查找，找到了也可以注入成功。找不到就报错。  </p><ul><li>出现位置：可以是变量上，也可以是方法上</li></ul><ul><li>细节：在使用注解注入时，set方法就不是必须的了。</li></ul></li></ul></li><li><p><strong>Qualifier</strong>:</p><ul><li>作用：在按照类中注入的基础之上再按照名称（Bean的id）注入。它在给类成员注入时<strong>不能单独使用</strong>，必须和@Autowire一起使用。但是在给方法参数注入时可以 </li><li>属性：<ul><li>value：用于指定注入bean的id。</li></ul></li></ul><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">/**     * 用于创建一个QueryRunner对象     * @param dataSource     * @return     */</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"runner"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Scope</span><span class="token punctuation">(</span><span class="token string">"prototype"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> QueryRunner <span class="token function">createQueryRunner</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"ds2"</span><span class="token punctuation">)</span> DataSource dataSource<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">QueryRunner</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre></li><li><p><strong>Resource</strong></p><ul><li>作用：直接按照bean的id注入。它可以独立使用</li><li>属性：<ul><li>name：用于指定bean的id。</li></ul></li></ul><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Resource</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"accountDao2"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> IAccountDao accountDao <span class="token operator">=</span> null<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 账户的持久层实现类,使用上述注解会导入下列bean */</span><span class="token annotation punctuation">@Repository</span><span class="token punctuation">(</span><span class="token string">"accountDao2"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AccountDaoImpl2</span>  <span class="token keyword">implements</span> <span class="token class-name">IAccountDao</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span>  <span class="token keyword">void</span> <span class="token function">saveAccount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"保存了账户2222222222222"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>Tips：以上三个注入都只能注入其他bean类型的数据，而基本类型和String类型无法使用上述注解实现。另外，集合类型的注入只能通过XML来实现。</strong></p></li><li><p><strong>Value</strong></p><ul><li><p>作用：用于注入基本类型和String类型的数据</p></li><li><p>属性：</p><ul><li><p>value：用于指定数据的值。它可以使用spring中SpEL(也就是spring的el表达式）</p><p>​            SpEL的写法：${表达式}</p></li></ul></li></ul></li></ul><h4 id="4-4-3用于改变作用范围的"><a href="#4-4-3用于改变作用范围的" class="headerlink" title="4.4.3用于改变作用范围的"></a>4.4.3用于改变作用范围的</h4><p>他们的作用就和在bean标签中使用scope属性实现的功能是一样的</p><p>相当于：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><ul><li><strong>Scope</strong><ul><li>作用：用于指定bean的作用范围</li><li>属性：<ul><li>value：指定范围的取值。常用取值：singleton prototype</li></ul></li></ul></li></ul><h4 id="4-4-4和生命周期相关-（了解）"><a href="#4-4-4和生命周期相关-（了解）" class="headerlink" title="4.4.4和生命周期相关 （了解）"></a><strong>4.4.4和生命周期相关</strong> （了解）</h4><p>他们的作用就和在bean标签中使用init-method和destroy-methode的作用是一样的</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">init-method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">destroy-method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre><ul><li><strong>PreDestroy</strong><ul><li>作用：用于指定销毁方法</li></ul></li><li><strong>PostConstruct</strong><ul><li>作用：用于指定初始化方法</li></ul></li></ul><h4 id="4-4-5更脱离xml的新注解"><a href="#4-4-5更脱离xml的新注解" class="headerlink" title="4.4.5更脱离xml的新注解"></a>4.4.5更脱离xml的新注解</h4><ul><li><p><strong>Configuration</strong></p><ul><li><p>作用：指定当前类是一个<strong>配置类</strong>,它的作用和bean.xml是一样的.</p><p>获取容器时需要使用<code>AnnotationApplicationContext</code>(有@Configuration注解的类.class)。</p></li><li><p>细节：</p><ul><li>当配置类作为AnnotationConfigApplicationContext对象创建参数时，该注解可以不写</li></ul></li></ul></li></ul><blockquote><p><strong>@Configuration这个注解什么时候必须写，什么时候可以省略</strong></p><ul><li>如果在AnnotationConfigApplicationContext（xxx.class）中指定了该配置文件的字节码对象，就可以省略不写</li><li>没有指定，就要在主配置文件中要写，扫描子配置类，那么子配置类也必须要写，也可以通过@Import（JdbcConfig.class）来指定子配置类，如果使用也可以省略@Configuration</li></ul></blockquote><ul><li><p><strong>ComponentScan</strong></p><ul><li>作用：用于通过注解指定spring在创建容器时要<strong>扫描的包</strong></li><li>属性：<ul><li>value：它和basePackages的作用是一样的，都是用于指定创建容器时要扫描的包。</li></ul></li></ul><p>我们使用此注解就等同于在xml中配置了:</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xxx<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--配置哪些注解不扫描--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>exclude-filter</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>annotation<span class="token punctuation">"</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.stereotype.Controller<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span><span class="token string">"com.xxx"</span><span class="token punctuation">)</span></code></pre></li><li><p><strong>Bean</strong></p><ul><li>作用：该注解<strong>只能写在方法上</strong>，表明使用此方法创建一个对象。用于把当前方法的返回值作为bean对象存入spring的ioc容器中。</li><li>属性:<ul><li>name:用于指定bean的id。当不写时，<strong>默认值是当前方法的名称</strong></li></ul></li><li>细节：当我们使用注解配置方法时，如果方法有参数，spring框架会去容器中查找有没有可用的bean对象。查找的方式和Autowired注解的作用是一样的。</li></ul><pre class=" language-xml"><code class="language-xml">  <span class="token comment" spellcheck="true">&lt;!--配置QueryRunner--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>runner<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.apache.commons.dbutils.QueryRunner<span class="token punctuation">"</span></span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>prototype<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--注入数据源--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ds<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**     * 用于创建一个QueryRunner对象     * @param dataSource     * @return     */</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"runner"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Scope</span><span class="token punctuation">(</span><span class="token string">"prototype"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> QueryRunner <span class="token function">createQueryRunner</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"ds2"</span><span class="token punctuation">)</span> DataSource dataSource<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">QueryRunner</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre></li></ul><ul><li><p><strong>Import</strong></p><ul><li>作用：用于<strong>导入其他的配置类</strong>，建立；两个配置类的联系</li><li>属性：<ul><li>value：用于指定其他配置类的字节码。</li></ul></li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span>JdbcConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span></code></pre><p>当我们使用Import的注解之后，有Import注解的类就父配置类，而导入的都是子配置类</p></li><li><p><strong>PropertySource</strong></p><ul><li>作用：用于指定properties文件的位置</li><li>属性：<ul><li>value：指定文件的名称和路径。<ul><li>关键字：classpath，表示类路径下</li></ul></li></ul></li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@PropertySource</span><span class="token punctuation">(</span><span class="token string">"classpath:jdbcConfig.properties"</span><span class="token punctuation">)</span></code></pre></li></ul><pre class=" language-xml"><code class="language-xml"> <span class="token comment" spellcheck="true">&lt;!-- 配置数据源 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.mchange.v2.c3p0.ComboPooledDataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--连接数据库的必备信息--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driverClass<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.mysql.jdbc.Driver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbcUrl<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbc:mysql://localhost:3306/eesy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1234<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><h4 id="4-4-6-RestController-vs-Controller"><a href="#4-4-6-RestController-vs-Controller" class="headerlink" title="4.4.6@RestController vs @Controller"></a>4.4.6@RestController vs @Controller</h4><ul><li><p><strong><code>Controller</code> 返回一个页面</strong></p><p>单独使用 <code>@Controller</code> 不加 <code>@ResponseBody</code>的话一般使用在要返回一个视图的情况，这种情况属于比较传统的Spring MVC 的应用，对应于前后端不分离的情况。</p></li><li><p><strong><code>@RestController</code> 返回JSON 或 XML 形式数据</strong></p><p>但<code>@RestController</code><strong>只返回对象</strong>，对象数据直接以 JSON 或 XML 形式写入 HTTP 响应(Response)中，这种情况属于 RESTful Web服务，这也是目前日常开发所接触的最常用的情况（前后端分离）。</p><p><strong>tips</strong>：使用该注解时，<code>return "index"</code>,不会跳转至index.html,而会返回一个<code>index</code>字符串显示在页面上。</p></li><li><p><strong><code>@Controller +@ResponseBody</code> 返回JSON 或 XML 形式数据</strong></p><p>如果你需要在Spring4之前开发 RESTful Web服务的话，你需要使用<code>@Controller</code> 并结合<code>@ResponseBody</code>注解，也就是说<code>@Controller</code> +<code>@ResponseBody</code>= <code>@RestController</code>（Spring 4 之后新加的注解）。</p><blockquote><p><code>@ResponseBody</code> 注解的作用是将 <code>Controller</code> 的方法返回的对象通过适当的转换器转换为指定的格式之后，写入到HTTP 响应(Response)对象的 body 中，通常用来返回 JSON 或者 XML 数据，返回 JSON 数据的情况比较多。</p></blockquote></li></ul><h3 id="4-5Spring整合Junit"><a href="#4-5Spring整合Junit" class="headerlink" title="4.5Spring整合Junit"></a>4.5Spring整合Junit</h3><ul><li><p><strong>需求</strong>：我们需要的是程序能自动帮我们创建容器。一旦程序能自动为我们创建spring容器，我们就无须手动创建了，代码冗余问题也就解决了。</p></li><li><p><strong>分析</strong>：junit是无法实现，因为它自己都无法知晓我们是否使用了spring框架，更不用说帮我们创建spring容器了。不过好在，junit给我们暴露了一个注解，可以让我们替换掉它的运行器。 这时，我们需要依靠spring框架，因为它提供了一个运行器，可以读取配置文件（或注解）来创建容器。我们只需要告诉它配置文件在哪就行了。</p></li><li><p><strong>实现</strong></p><ol><li><p>使用Junit提供的一个注解把原有的main方法替换了，替换成spring提供的 @Runwith</p></li><li><p>使用@ContextConfiguration指定spring配置文件的位置</p></li></ol><p>​    <strong>@ContextConfiguration</strong>注解：</p><ul><li>locations属性：用于指定配置文件的位置。如果是类路径下，需要用classpath:表明 </li><li>classes属性：用于指定注解的类。当不使用xml配置时，需要用此属性指定注解类的位置。</li></ul><ol start="3"><li>使用@Autowired给测试类中的变量注入数据</li></ol></li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span>SpringJUnit4ClassRunner<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token annotation punctuation">@ContextConfiguration</span><span class="token punctuation">(</span>locations<span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"classpath:bean.xml"</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AccountServiceTest</span> <span class="token punctuation">{</span>     <span class="token annotation punctuation">@Autowired</span>     <span class="token keyword">private</span> IAccountService as <span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>​    4. 那么为什么不采用配置到xml中的方式呢？</p><p>​     这个原因是这样的：</p><p>​        第一：当我们在xml中配置了一个bean，spring加载配置文件创建容器时，就会创建对象。 </p><p>​        第二：测试类只是我们在测试功能时使用，而在项目中它并不参与程序逻辑，也不会解决需求上的问题，所以创建完了，并没有使用。那么存在容器中就会造成资源的浪费。 所以，基于以上两点，我们不应该把测试配置到xml文件中。</p><h2 id="5-SpringAOP"><a href="#5-SpringAOP" class="headerlink" title="5.SpringAOP"></a>5.SpringAOP</h2><h3 id="5-1AOP概述"><a href="#5-1AOP概述" class="headerlink" title="5.1AOP概述"></a>5.1AOP概述</h3><p>AOP(Aspect-Oriented Programming:面向切面编程)能够将那些与业务无关，<strong>却为业务模块所共同调用的逻辑或责任（例如事务处理、日志管理、权限控制等）封装起来</strong>，便于<strong>减少系统的重复代码</strong>，<strong>降低模块间的耦合度</strong>，并<strong>有利于未来的可拓展性和可维护性</strong>。</p><p><strong>Spring AOP就是基于动态代理的</strong>，如果要代理的对象，实现了某个接口，那么Spring AOP会使用<strong>JDK Proxy</strong>，去创建代理对象，而对于没有实现接口的对象，就无法使用 JDK Proxy 去进行代理了，这时候Spring AOP会使用<strong>Cglib</strong> ，这时候Spring AOP会使用 <strong>Cglib</strong> 生成一个被代理对象的子类来作为代理，如下图所示：</p><p><img src="https://camo.githubusercontent.com/c54f144f88f5e38e1adccfaebf3388eaeb45a333/68747470733a2f2f6d792d626c6f672d746f2d7573652e6f73732d636e2d6265696a696e672e616c6979756e63732e636f6d2f323031392d362f537072696e67414f5050726f636573732e6a7067" alt="SpringAOPProcess"></p><p>当然你也可以使用 AspectJ ,Spring AOP 已经集成了AspectJ ，AspectJ 应该算的上是 Java 生态系统中最完整的 AOP 框架了。</p><p>使用 AOP 之后我们可以把一些通用功能抽象出来，在需要用到的地方直接使用即可，这样大大简化了代码量。我们需要增加新功能时也方便，这样也提高了系统扩展性。日志功能、事务管理等等场景都用到了 AOP 。</p><h4 id="5-1-1Spring-AOP-和-AspectJ-AOP-有什么区别？"><a href="#5-1-1Spring-AOP-和-AspectJ-AOP-有什么区别？" class="headerlink" title="5.1.1Spring AOP 和 AspectJ AOP 有什么区别？"></a>5.1.1Spring AOP 和 AspectJ AOP 有什么区别？</h4><p>​        <strong>Spring AOP 属于运行时增强，而 AspectJ 是编译时增强。</strong> Spring AOP 基于代理(Proxying)，而 AspectJ 基于字节码操作(Bytecode Manipulation)。</p><p>​        Spring AOP 已经集成了 AspectJ 。AspectJ 相比于 Spring AOP 功能更加强大，但是 Spring AOP 相对来说更简单，如果我们的切面比较少，那么两者性能差异不大。但是，当<strong>切面太多</strong>的话，最好选择 AspectJ ，它比Spring AOP 快很多。</p><h3 id="5-2AOP术语"><a href="#5-2AOP术语" class="headerlink" title="5.2AOP术语"></a>5.2AOP术语</h3><ul><li><p><strong>Joinpoint(连接点):</strong></p><p>所谓连接点是指那些被拦截到的点。在 spring 中,这些点指的是方法,因为 spring 只支持方法类型的连接点。</p></li><li><p><strong>Pointcut(切入点):</strong></p><p>所谓切入点是指我们要对哪些 Joinpoint 进行拦截的定义。</p></li><li><p><strong>Advice(通知/增强):</strong></p><p>所谓通知是指拦截到 Joinpoint 之后所要做的事情就是通知。 </p><p>通知的类型：前置通知,后置通知,异常通知,最终通知,环绕通知。</p></li><li><p><strong>Introduction(引介):</strong></p><p>引介是一种特殊的通知在不修改类代码的前提下, Introduction 可以在运行期为类动态地添加一些方法或 Field。</p></li><li><p><strong>Target(目标对象):</strong></p><p>代理的目标对象。</p></li><li><p><strong>Weaving(织入):</strong></p><p>是指把增强应用到目标对象来创建新的代理对象的过程。</p><p>spring 采用动态代理织入，而 AspectJ 采用编译期织入和类装载期织入。</p></li><li><p><strong>Proxy（代理）:</strong></p><p>一个类被 AOP 织入增强后，就产生一个结果代理类。</p></li><li><p><strong>Aspect(切面):</strong></p><p>是切入点和通知（引介）的结合。</p></li></ul><h3 id="5-3基于xml配置"><a href="#5-3基于xml配置" class="headerlink" title="5.3基于xml配置"></a>5.3基于xml配置</h3><h4 id="5-3-1实现思路"><a href="#5-3-1实现思路" class="headerlink" title="5.3.1实现思路"></a>5.3.1实现思路</h4><p>1、把通知Bean也交给spring来管理<br>2、使用aop:config标签表明开始AOP的配置<br>3、使用aop:aspect标签表明配置切面<br>4、在aop:aspect标签的内部使用对应标签来配置通知的类型</p><h4 id="5-3-2标签介绍"><a href="#5-3-2标签介绍" class="headerlink" title="5.3.2标签介绍"></a>5.3.2标签介绍</h4><ul><li><p><strong>aop:config:</strong></p><p>作用：用于声明开始 aop 的配置</p></li></ul><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 配置的代码都写在此处 --></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span></code></pre><ul><li><p><strong>aop:aspect:</strong></p><p>作用：    用于配置切面。</p><p>属性：</p><p>​    id：给切面提供一个唯一标识。</p><p>​    ref：引用配置好的通知类 bean 的 id。</p></li></ul><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>aspect</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>txAdvice<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>txManager<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--配置通知的类型要写在此处--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>aspect</span><span class="token punctuation">></span></span></code></pre><ul><li><p><strong>aop:pointcut：</strong> </p><p>作用：用于配置切入点表达式。就是指定对哪些类的哪些方法进行增强。</p><p>属性：</p><p>expression：用于定义切入点表达式。</p><p>​    id：用于给切入点表达式提供一个唯一标识</p></li></ul><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>pointcut</span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>execution( public void com.itheima.service.impl.AccountServiceImpl.transfer( java.lang.String, java.lang.String, java.lang.Float) )<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pt1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><ul><li><p><strong>aop:before</strong></p><p>作用：用于配置前置通知。指定增强的方法在切入点方法之前执行</p><p>属性：</p><p>​    method:用于指定通知类中的增强方法名称ponitcut-ref：用于指定切入点的表达式的引用</p><p>​    poinitcut：用于指定切入点表达式</p><p>执行时间点：切入点方法执行之前执行</p></li></ul><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>before</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>beginTransaction<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pt1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><ul><li><p><strong>aop:after-returning</strong></p><p>作用：用于配置后置通知</p><p>属性：</p><p>​    method：指定通知中方法的名称。</p><p>​    pointct：定义切入点表达式</p><p>​    pointcut-ref：指定切入点表达式的引用</p><p>执行时间点：切入点方法正常执行之后。它和异常通知只能有一个执行</p></li></ul><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>after-returning</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>commit<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pt1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><ul><li><p><strong>aop:after-throwing</strong></p><p>作用：用于配置异常通知</p><p>属性：</p><p>​    method：指定通知中方法的名称。</p><p>​    pointct：定义切入点表达式</p><p>​    pointcut-ref：指定切入点表达式的引用</p><p>执行时间点：切入点方法执行产生异常后执行。它和后置通知只能执行一个</p></li></ul><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>after-throwing</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>rollback<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pt1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><ul><li><strong>aop:after</strong><br>作用：用于配置最终通知</li></ul><p>属性：</p><p>  ​    method：指定通知中方法的名称。</p><p>​      pointct：定义切入点表达式</p><p>  ​    pointcut-ref：指定切入点表达式的引用</p><p>  执行时间点：无论切入点方法执行时是否有异常，它都会在其后面执行。</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>after</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>release<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pt1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><h4 id="5-3-3Execution表达式"><a href="#5-3-3Execution表达式" class="headerlink" title="5.3.3Execution表达式"></a>5.3.3Execution表达式</h4><ul><li><p>表达式语法：    </p><pre class=" language-java"><code class="language-java"><span class="token function">execution</span><span class="token punctuation">(</span><span class="token punctuation">[</span>修饰符<span class="token punctuation">]</span> 返回值类型 包名<span class="token punctuation">.</span>类名<span class="token punctuation">.</span>方法名<span class="token punctuation">(</span>参数<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre></li><li><p>写法说明：</p></li></ul><p>​        标准的表达式写法：</p><pre class=" language-java"><code class="language-java">  <span class="token keyword">public</span> <span class="token keyword">void</span> com<span class="token punctuation">.</span>xxx<span class="token punctuation">.</span>service<span class="token punctuation">.</span>impl<span class="token punctuation">.</span>AccountServiceImpl<span class="token punctuation">.</span><span class="token function">saveAccount</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>​        访问修饰符可以省略</p><pre class=" language-java"><code class="language-java"><span class="token keyword">void</span> com<span class="token punctuation">.</span>xxx<span class="token punctuation">.</span>service<span class="token punctuation">.</span>impl<span class="token punctuation">.</span>AccountServiceImpl<span class="token punctuation">.</span><span class="token function">saveAccount</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>​        返回值可以使用通配符，表示任意返回值</p><pre class=" language-java"><code class="language-java">     <span class="token operator">*</span>com<span class="token punctuation">.</span>xxx<span class="token punctuation">.</span>service<span class="token punctuation">.</span>impl<span class="token punctuation">.</span>AccountServiceImpl<span class="token punctuation">.</span><span class="token function">saveAccount</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>​        包名可以使用通配符，表示任意包。但是有几级包，就需要写几个*.</p><pre class=" language-java"><code class="language-java">   <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">.</span>*<span class="token punctuation">.</span>*<span class="token punctuation">.</span>*<span class="token punctuation">.</span>AccountServiceImpl<span class="token punctuation">.</span><span class="token function">saveAccount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>​        包名可以使用..表示当前包及其子包</p><pre class=" language-java"><code class="language-java">    <span class="token operator">*</span> <span class="token operator">*</span><span class="token punctuation">.</span><span class="token punctuation">.</span>AccountServiceImpl<span class="token punctuation">.</span><span class="token function">saveAccount</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>​        类名和方法名都可以使用*来实现通配</p><pre class=" language-java"><code class="language-java"> <span class="token operator">*</span> <span class="token operator">*</span><span class="token punctuation">.</span><span class="token punctuation">.</span>*<span class="token punctuation">.</span>*<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><ul><li><p>参数列表：</p><ul><li>可以直接写数据类型：</li></ul><p>​         <strong>基本类型</strong>:直接写名称      int</p></li></ul><p>​                <strong>引用类型</strong>:写包名.类名的方式  java.lang.String</p><ul><li><p>可以使用通配符表示任意类型，但是必须有参数</p><p>可以使用..表示有无参数均可，有参数可以是任意类型</p></li><li><p>全通配写法：</p></li></ul><p>​          * <em>..</em>.*(..)</p><ul><li>实际开发中切入点表达式的通常写法：</li></ul><p>​          切到业务层实现类下的所有方法        </p><pre class=" language-java"><code class="language-java">   <span class="token operator">*</span> com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>service<span class="token punctuation">.</span>impl<span class="token punctuation">.</span>*<span class="token punctuation">.</span>*<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span></code></pre><ul><li><p><strong>aop:around：</strong></p><p><strong>作用：</strong></p><p>用于配置环绕通知</p><p><strong>属性：</strong></p><p>method：指定通知中方法的名称。</p><p>pointct：定义切入点表达式</p><p>pointcut-ref：指定切入点表达式的引用</p><p><strong>说明：</strong></p><p>它是 spring 框架为我们提供的一种可以在代码中手动控制增强代码什么时候执行的方式。</p><p><strong>注意：</strong></p><p>通常情况下，环绕通知都是独立使用的</p></li></ul><h4 id="5-3-4环绕通知及示例"><a href="#5-3-4环绕通知及示例" class="headerlink" title="5.3.4环绕通知及示例"></a>5.3.4环绕通知及示例</h4><p>示意图如下：</p><p><img src="https://raw.githubusercontent.com/black210/images/master/demo/202003/05/151339-129171.jpeg" alt="环绕通知1"></p><p>配置xml：</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 配置srping的Ioc,把service对象配置进来--></span>    <span class="token comment" spellcheck="true">&lt;!--1、把通知Bean也交给spring来管理        2、使用aop:config标签表明开始AOP的配置        3、使用aop:aspect标签表明配置切面         4、在aop:aspect标签的内部使用对应标签来配置通知的类型--></span>      <span class="token comment" spellcheck="true">&lt;!-- 配置srping的Ioc,把service对象配置进来--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>accountService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xxx.service.impl.AccountServiceImpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 配置Logger类 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>logger<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itheima.utils.Logger<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--配置AOP--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 配置切入点表达式 id属性用于指定表达式的唯一标识。expression属性用于指定表达式内容              此标签写在aop:aspect标签内部只能当前切面使用。              它还可以写在aop:aspect外面，此时就变成了所有切面可用，以便后续直接引用          --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>pointcut</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pt1<span class="token punctuation">"</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>execution(* com.itheima.service.impl.*.*(..))<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>pointcut</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--配置切面 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>aspect</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>logAdvice<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>logger<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!-- 配置前置通知：在切入点方法执行之前执行            &lt;aop:before method="beforePrintLog" pointcut-ref="pt1" >&lt;/aop:before>--></span>            <span class="token comment" spellcheck="true">&lt;!-- 配置后置通知：在切入点方法正常执行之后值。它和异常通知永远只能执行一个            &lt;aop:after-returning method="afterReturningPrintLog" pointcut-ref="pt1">&lt;/aop:after-returning>--></span>            <span class="token comment" spellcheck="true">&lt;!-- 配置异常通知：在切入点方法执行产生异常之后执行。它和后置通知永远只能执行一个            &lt;aop:after-throwing method="afterThrowingPrintLog" pointcut-ref="pt1">&lt;/aop:after-throwing>--></span>            <span class="token comment" spellcheck="true">&lt;!-- 配置最终通知：无论切入点方法是否正常执行它都会在其后面执行            &lt;aop:after method="afterPrintLog" pointcut-ref="pt1">&lt;/aop:after>--></span>            <span class="token comment" spellcheck="true">&lt;!-- 配置环绕通知 详细的注释请看Logger类中--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>around</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>aroundPringLog<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pt1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>around</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>aspect</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><p>测试logger类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Logger</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> Object <span class="token function">aroundPringLog</span><span class="token punctuation">(</span>ProceedingJoinPoint pjp<span class="token punctuation">)</span><span class="token punctuation">{</span>        Object rtValue <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span><span class="token punctuation">{</span>            Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token operator">=</span> pjp<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//得到方法执行所需的参数</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Logger类中的aroundPringLog方法开始记录日志了。。。前置"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            rtValue <span class="token operator">=</span> pjp<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//明确调用业务层方法（切入点方法）</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Logger类中的aroundPringLog方法开始记录日志了。。。后置"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> rtValue<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> t<span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Logger类中的aroundPringLog方法开始记录日志了。。。异常"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Logger类中的aroundPringLog方法开始记录日志了。。。最终"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="5-4基于注解配置"><a href="#5-4基于注解配置" class="headerlink" title="5.4基于注解配置"></a>5.4基于注解配置</h3><h4 id="5-4-1常用注解"><a href="#5-4-1常用注解" class="headerlink" title="5.4.1常用注解"></a>5.4.1常用注解</h4><ul><li><p><strong>@Aspect</strong>：把当前类声明为切面类。</p></li><li><p><strong>@Before</strong>：把当前方法看成是前置通知。</p><p>​        属性： value：用于指定切入点表达式，还可以指定切入点表达式的引用。</p></li><li><p><strong>@AfterReturning</strong>：把当前方法看成是后置通知。</p><p>​        属性： value：用于指定切入点表达式，还可以指定切入点表达式的引用</p></li><li><p><strong>@AfterThrowing</strong>：把当前方法看成是异常通知。</p><p>​        属性： value：用于指定切入点表达式，还可以指定切入点表达式的引用</p></li><li><p><strong>@After</strong>：把当前方法看成是最终通知。</p><p>​        属性： value：用于指定切入点表达式，还可以指定切入点表达式的引用</p></li><li><p><strong>@Around</strong>：把当前方法看成是环绕通知。 </p><p>​        属性： value：用于指定切入点表达式，还可以指定切入点表达式的引用。</p></li><li><p><strong>@Pointcut</strong>：指定切入点表达式</p><p>​        属性：value：指定表达式的内容</p></li></ul><h4 id="5-4-2测试logger类的环绕通知"><a href="#5-4-2测试logger类的环绕通知" class="headerlink" title="5.4.2测试logger类的环绕通知"></a>5.4.2测试logger类的环绕通知</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 用于记录日志的工具类，它里面提供了公共的代码 */</span><span class="token annotation punctuation">@Component</span><span class="token punctuation">(</span><span class="token string">"logger"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Aspect</span><span class="token comment" spellcheck="true">//表示当前类是一个切面类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Logger</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">"execution(* com.xxx.service.impl.*.*(..))"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">pt1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 前置通知     */</span><span class="token comment" spellcheck="true">//    @Before("pt1()")</span>    <span class="token keyword">public</span>  <span class="token keyword">void</span> <span class="token function">beforePrintLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"前置通知Logger类中的beforePrintLog方法开始记录日志了。。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 后置通知     */</span><span class="token comment" spellcheck="true">//    @AfterReturning("pt1()")</span>    <span class="token keyword">public</span>  <span class="token keyword">void</span> <span class="token function">afterReturningPrintLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"后置通知Logger类中的afterReturningPrintLog方法开始记录日志了。。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 异常通知     */</span><span class="token comment" spellcheck="true">//    @AfterThrowing("pt1()")</span>    <span class="token keyword">public</span>  <span class="token keyword">void</span> <span class="token function">afterThrowingPrintLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"异常通知Logger类中的afterThrowingPrintLog方法开始记录日志了。。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 最终通知     */</span><span class="token comment" spellcheck="true">//    @After("pt1()")</span>    <span class="token keyword">public</span>  <span class="token keyword">void</span> <span class="token function">afterPrintLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"最终通知Logger类中的afterPrintLog方法开始记录日志了。。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 环绕通知     * 问题：     *      当我们配置了环绕通知之后，切入点方法没有执行，而通知方法执行了。     * 分析：     *      通过对比动态代理中的环绕通知代码，发现动态代理的环绕通知有明确的切入点方法调用，而我们的代码中没有。     * 解决：     *      Spring框架为我们提供了一个接口：ProceedingJoinPoint。该接口有一个方法proceed()，此方法就相当于明确调用切入点方法。     *      该接口可以作为环绕通知的方法参数，在程序执行时，spring框架会为我们提供该接口的实现类供我们使用。     *     * spring中的环绕通知：     *      它是spring框架为我们提供的一种可以在代码中手动控制增强方法何时执行的方式。     */</span>    <span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span><span class="token string">"pt1()"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Object <span class="token function">aroundPringLog</span><span class="token punctuation">(</span>ProceedingJoinPoint pjp<span class="token punctuation">)</span><span class="token punctuation">{</span>        Object rtValue <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span><span class="token punctuation">{</span>            Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token operator">=</span> pjp<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//得到方法执行所需的参数</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Logger类中的aroundPringLog方法开始记录日志了。。。前置"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            rtValue <span class="token operator">=</span> pjp<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//明确调用业务层方法（切入点方法）</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Logger类中的aroundPringLog方法开始记录日志了。。。后置"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> rtValue<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> t<span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Logger类中的aroundPringLog方法开始记录日志了。。。异常"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Logger类中的aroundPringLog方法开始记录日志了。。。最终"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span> <span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>basePackages<span class="token operator">=</span><span class="token string">"com.xxx"</span><span class="token punctuation">)</span> <span class="token annotation punctuation">@EnableAspectJAutoProxy</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringConfiguration</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//配置类，达到完全去掉xml的效果    </span><span class="token punctuation">}</span></code></pre><p>@EnableAspectJAutoProxy 注解等同于配置下列标签</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 开启spring对注解AOP的支持 --></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>aspectj-autoproxy</span><span class="token punctuation">/></span></span></code></pre><h4 id="5-4-3拓展"><a href="#5-4-3拓展" class="headerlink" title="5.4.3拓展"></a>5.4.3拓展</h4><p>测试发现如下问题</p><p><img src="https://raw.githubusercontent.com/black210/images/master/demo/202003/05/151142-677471.png" alt="环绕通知2"></p><p>结论：</p><p><strong>使用<code>注解</code>方式，会出现</strong> <strong>最终与后置通知顺序出现问题，使用环绕通知不会出现该问题</strong></p><h2 id="6-事务"><a href="#6-事务" class="headerlink" title="6.事务"></a>6.事务</h2><h3 id="6-1事务概述"><a href="#6-1事务概述" class="headerlink" title="6.1事务概述"></a>6.1事务概述</h3><h4 id="6-1-1Spring管理事务的方式"><a href="#6-1-1Spring管理事务的方式" class="headerlink" title="6.1.1Spring管理事务的方式"></a>6.1.1Spring管理事务的方式</h4><ol><li><p><strong>编程式事务</strong>，在代码中硬编码。(不推荐使用)</p></li><li><p><strong>声明式事务</strong>，在配置文件中配置（推荐使用）</p><ul><li><p>基于XML的声明式事务</p></li><li><p>基于注解的声明式事务</p></li></ul></li></ol><h4 id="6-1-2PlatformTransactionManager"><a href="#6-1-2PlatformTransactionManager" class="headerlink" title="6.1.2PlatformTransactionManager"></a>6.1.2<strong>PlatformTransactionManager</strong></h4><p>此接口是spring的事务管理器，它里面提供了我们常用的操作事务的方法</p><ul><li><p><strong>获取事务状态信息</strong></p><p>TransactionStatus getTransaction(TransactionDefinition definition)</p></li><li><p><strong>提交事务</strong></p><p>void commit(TransactionStatus status)</p></li><li><p><strong>回滚事务</strong></p><p>void rollback(TransactionStatus status)</p></li><li><p><strong>真正管理事务的对象</strong></p><ul><li><p>org.springframework.jdbc.datasource.<strong>DataSourceTransactionManager</strong></p><p><strong>使用 SpringDBC 或 iBatis 进行持久化数据时使用</strong></p></li><li><p>org.springframework.orm.hibernate5.<strong>HibernateTransactionManager</strong></p><p><strong>使用Hibernate 版本进行持久化数据时使用</strong></p></li></ul></li></ul><h4 id="6-1-3事务的隔离级别"><a href="#6-1-3事务的隔离级别" class="headerlink" title="6.1.3事务的隔离级别"></a>6.1.3事务的隔离级别</h4><p><strong>TransactionDefinition 接口中定义了五个表示隔离级别的常量：</strong>（枚举）</p><ul><li><strong>TransactionDefinition.ISOLATION_DEFAULT:</strong> 使用后端数据库默认的隔离级别，Mysql 默认采用的 REPEATABLE_READ隔离级别 Oracle 默认采用的 READ_COMMITTED隔离级别.</li><li><strong>TransactionDefinition.ISOLATION_READ_UNCOMMITTED:</strong> 最低的隔离级别，允许读取尚未提交的数据变更，<strong>可能会导致脏读、幻读或不可重复读</strong></li><li><strong>TransactionDefinition.ISOLATION_READ_COMMITTED:</strong> 允许读取并发事务已经提交的数据，<strong>可以阻止脏读，但是幻读或不可重复读仍有可能发生</strong></li><li><strong>TransactionDefinition.ISOLATION_REPEATABLE_READ:</strong> 对同一字段的多次读取结果都是一致的，除非数据是被本身事务自己所修改，<strong>可以阻止脏读和不可重复读，但幻读仍有可能发生。</strong></li><li><strong>TransactionDefinition.ISOLATION_SERIALIZABLE:</strong> 最高的隔离级别，完全服从ACID的隔离级别。所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，<strong>该级别可以防止脏读、不可重复读以及幻读</strong>。但是这将严重影响程序的性能。通常情况下也不会用到该级别。</li></ul><h4 id="6-1-4事务传播行为"><a href="#6-1-4事务传播行为" class="headerlink" title="6.1.4事务传播行为"></a>6.1.4事务传播行为</h4><ul><li><p><strong>支持当前事务的情况：</strong></p><ul><li><strong>TransactionDefinition.PROPAGATION_REQUIRED：</strong> 如果当前存在事务，则加入该事务；如果当前没有事务，则创建一个新的事务。</li><li><strong>TransactionDefinition.PROPAGATION_SUPPORTS：</strong> 如果当前存在事务，则加入该事务；如果当前没有事务，则以非事务的方式继续运行。</li><li><strong>TransactionDefinition.PROPAGATION_MANDATORY：</strong> 如果当前存在事务，则加入该事务；如果当前没有事务，则抛出异常。（mandatory：强制性）</li></ul></li><li><p><strong>不支持当前事务的情况：</strong></p><ul><li><strong>TransactionDefinition.PROPAGATION_REQUIRES_NEW：</strong> 创建一个新的事务，如果当前存在事务，则把当前事务挂起。</li><li><strong>TransactionDefinition.PROPAGATION_NOT_SUPPORTED：</strong> 以非事务方式运行，如果当前存在事务，则把当前事务挂起。</li><li><strong>TransactionDefinition.PROPAGATION_NEVER：</strong> 以非事务方式运行，如果当前存在事务，则抛出异常。</li></ul></li><li><p><strong>其他情况：</strong></p><ul><li><p><strong>TransactionDefinition.PROPAGATION_NESTED：</strong> 如果当前存在事务，则创建一个事务作为当前事务</p><p>的嵌套事务来运行；如果当前没有事务，则该取值等价于</p><p>TransactionDefinition.PROPAGATION_REQUIRED。</p></li></ul></li></ul><h4 id="6-1-5TransactionStatus"><a href="#6-1-5TransactionStatus" class="headerlink" title="6.1.5TransactionStatus"></a>6.1.5<strong>TransactionStatus</strong></h4><p>此接口提供事务的具体运行状态，方法如下所示：</p><ul><li><strong>刷新事务</strong><ul><li>void flush()</li></ul></li><li><strong>获取是否 存在存储点</strong><ul><li>boolean hasSavepoint()</li></ul></li><li><strong>获取事务是否完成</strong><ul><li>boolean isCompleted()</li></ul></li><li><strong>获取事务是否为新事务</strong><ul><li>boolean isNewTransaction()</li></ul></li><li><strong>获取事务是否回滚</strong><ul><li>boolean isRollbackOnly()</li></ul></li><li><strong>设置事务回滚</strong> <ul><li>void setRollbackOnly()</li></ul></li></ul><h3 id="6-2基于xml配置事务"><a href="#6-2基于xml配置事务" class="headerlink" title="6.2基于xml配置事务"></a>6.2基于xml配置事务</h3><pre><code>spring中基于XML的声明式事务控制配置步骤1、配置事务管理器2、配置事务的通知        此时我们需要导入事务的约束 tx名称空间和约束，同时也需要aop的        使用tx:advice标签配置事务通知            属性：                id：给事务通知起一个唯一标识                transaction-manager：给事务通知提供一个事务管理器引用3、配置AOP中的通用切入点表达式4、建立事务通知和切入点表达式的对应关系5、配置事务的属性       是在事务的通知tx:advice标签的内部</code></pre><ul><li><strong>配置事务的属性</strong>：<ul><li><strong>isolation</strong>：用于指定事务的隔离级别。默认值是DEFAULT，表示使用数据库的默认隔离级别。</li><li><strong>propagation</strong>：用于指定事务的传播行为。默认值是REQUIRED，表示一定会有事务，增删改的选择。<br>查询方法可以选择SUPPORTS。</li><li><strong>read-only</strong>：用于指定事务是否只读。只有查询方法才能设置为true。默认值是false，表示读写。</li><li><strong>timeout</strong>：用于指定事务的超时时间，默认值是-1，表示永不超时。如果指定了数值，以秒为单位。</li><li><strong>rollback-for</strong>：用于指定一个异常，当产生该异常时，事务回滚，产生其他异常时，事务不回滚。没有默认值。表示任何异常都回滚。</li><li><strong>no-rollback-for</strong>：用于指定一个异常，当产生该异常时，事务不回滚，产生其他异常时事务回滚。没有默认值。表示任何异常都回滚。</li></ul></li></ul><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>aop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/aop<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>tx</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/tx<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>        http://www.springframework.org/schema/beans        http://www.springframework.org/schema/beans/spring-beans.xsd        http://www.springframework.org/schema/tx        http://www.springframework.org/schema/tx/spring-tx.xsd        http://www.springframework.org/schema/aop        http://www.springframework.org/schema/aop/spring-aop.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 配置业务层--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>accountService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xxx.service.impl.AccountServiceImpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>accountDao<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>accountDao<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 配置账户的持久层--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>accountDao<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xxx.dao.impl.AccountDaoImpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 配置数据源--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.jdbc.datasource.DriverManagerDataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driverClassName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.mysql.jdbc.Driver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbc:mysql://localhost:3306/eesy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1234<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- spring中基于XML的声明式事务控制配置步骤        1、配置事务管理器        2、配置事务的通知                此时我们需要导入事务的约束 tx名称空间和约束，同时也需要aop的                使用tx:advice标签配置事务通知                    属性：                        id：给事务通知起一个唯一标识                        transaction-manager：给事务通知提供一个事务管理器引用        3、配置AOP中的通用切入点表达式        4、建立事务通知和切入点表达式的对应关系        5、配置事务的属性               是在事务的通知tx:advice标签的内部     --></span>    <span class="token comment" spellcheck="true">&lt;!-- 配置事务管理器 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.jdbc.datasource.DataSourceTransactionManager<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 配置事务的通知--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>advice</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>txAdvice<span class="token punctuation">"</span></span> <span class="token attr-name">transaction-manager</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 配置事务的属性--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>attributes</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>*<span class="token punctuation">"</span></span> <span class="token attr-name">propagation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>REQUIRED<span class="token punctuation">"</span></span> <span class="token attr-name">read-only</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>find*<span class="token punctuation">"</span></span> <span class="token attr-name">propagation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>SUPPORTS<span class="token punctuation">"</span></span> <span class="token attr-name">read-only</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">tx:</span>method</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">tx:</span>attributes</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">tx:</span>advice</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 配置aop--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 配置切入点表达式--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>pointcut</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pt1<span class="token punctuation">"</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>execution(* com.itheima.service.impl.*.*(..))<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>pointcut</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--建立切入点表达式和事务通知的对应关系 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>advisor</span> <span class="token attr-name">advice-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>txAdvice<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pt1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>advisor</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><p>测试类，往后使用同一个测试类，后面便不贴代码了。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 使用Junit单元测试：测试我们的配置 */</span><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span>SpringJUnit4ClassRunner<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ContextConfiguration</span><span class="token punctuation">(</span>locations <span class="token operator">=</span> <span class="token string">"classpath:bean.xml"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AccountServiceTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span>  IAccountService as<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span>  <span class="token keyword">void</span> <span class="token function">testTransfer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        as<span class="token punctuation">.</span><span class="token function">transfer</span><span class="token punctuation">(</span><span class="token string">"aaa"</span><span class="token punctuation">,</span><span class="token string">"bbb"</span><span class="token punctuation">,</span><span class="token number">100f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="6-3基于注解配置事务"><a href="#6-3基于注解配置事务" class="headerlink" title="6.3基于注解配置事务"></a>6.3基于注解配置事务</h3><pre><code>spring中基于注解 的声明式事务控制配置步骤    1、配置事务管理器    2、开启spring对注解事务的支持    3、在需要事务支持的地方使用@Transactional注解</code></pre><pre class=" language-xml"><code class="language-xml">    <span class="token comment" spellcheck="true">&lt;!-- 这里只展示重要配置标签            配置事务管理器 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.jdbc.datasource.DataSourceTransactionManager<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 开启spring对注解事务的支持--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>annotation-driven</span> <span class="token attr-name">transaction-manager</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">tx:</span>annotation-driven</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 账户的业务层实现类 * * 事务控制应该都是在业务层 */</span><span class="token comment" spellcheck="true">//只读型事务的配置</span><span class="token annotation punctuation">@Service</span><span class="token punctuation">(</span><span class="token string">"accountService"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>propagation<span class="token operator">=</span> Propagation<span class="token punctuation">.</span>SUPPORTS<span class="token punctuation">,</span>readOnly<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AccountServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">IAccountService</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> IAccountDao accountDao<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Account <span class="token function">findAccountById</span><span class="token punctuation">(</span>Integer accountId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> accountDao<span class="token punctuation">.</span><span class="token function">findAccountById</span><span class="token punctuation">(</span>accountId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//需要的是读写型事务配置</span>    <span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>propagation<span class="token operator">=</span> Propagation<span class="token punctuation">.</span>REQUIRED<span class="token punctuation">,</span>readOnly<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">transfer</span><span class="token punctuation">(</span>String sourceName<span class="token punctuation">,</span> String targetName<span class="token punctuation">,</span> Float money<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"transfer...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//2.1根据名称查询转出账户</span>            Account source <span class="token operator">=</span> accountDao<span class="token punctuation">.</span><span class="token function">findAccountByName</span><span class="token punctuation">(</span>sourceName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//2.2根据名称查询转入账户</span>            Account target <span class="token operator">=</span> accountDao<span class="token punctuation">.</span><span class="token function">findAccountByName</span><span class="token punctuation">(</span>targetName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//2.3转出账户减钱</span>            source<span class="token punctuation">.</span><span class="token function">setMoney</span><span class="token punctuation">(</span>source<span class="token punctuation">.</span><span class="token function">getMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>money<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//2.4转入账户加钱</span>            target<span class="token punctuation">.</span><span class="token function">setMoney</span><span class="token punctuation">(</span>target<span class="token punctuation">.</span><span class="token function">getMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span>money<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//2.5更新转出账户</span>            accountDao<span class="token punctuation">.</span><span class="token function">updateAccount</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//2.6更新转入账户</span>            accountDao<span class="token punctuation">.</span><span class="token function">updateAccount</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>想完全去掉xml</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * spring的配置类，相当于bean.xml */</span><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span><span class="token string">"com.itheima"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token punctuation">{</span>JdbcConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>TransactionConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@PropertySource</span><span class="token punctuation">(</span><span class="token string">"jdbcConfig.properties"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@EnableTransactionManagement</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringConfiguration</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 和事务相关的配置类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TransactionConfig</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 用于创建事务管理器对象     * @param dataSource     * @return     */</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"transactionManager"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> PlatformTransactionManager <span class="token function">createTransactionManager</span><span class="token punctuation">(</span>DataSource dataSource<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DataSourceTransactionManager</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 和连接数据库相关的配置类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JdbcConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${jdbc.driver}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String driver<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${jdbc.url}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String url<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${jdbc.username}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String username<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${jdbc.password}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String password<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 创建JdbcTemplate     * @param dataSource     * @return     */</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"jdbcTemplate"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> JdbcTemplate <span class="token function">createJdbcTemplate</span><span class="token punctuation">(</span>DataSource dataSource<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JdbcTemplate</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 创建数据源对象     * @return     */</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"dataSource"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> DataSource <span class="token function">createDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        DriverManagerDataSource ds <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DriverManagerDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ds<span class="token punctuation">.</span><span class="token function">setDriverClassName</span><span class="token punctuation">(</span>driver<span class="token punctuation">)</span><span class="token punctuation">;</span>        ds<span class="token punctuation">.</span><span class="token function">setUrl</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>        ds<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>        ds<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ds<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="拓展："><a href="#拓展：" class="headerlink" title="拓展："></a>拓展：</h4><p><strong>@Transactional(rollbackFor = Exception.class)</strong>注解了解吗？</p><p>我们知道：Exception分为运行时异常RuntimeException和非运行时异常。事务管理对于企业应用来说是至关重要的，即使出现异常情况，它也可以保证数据的一致性。</p><p>当<code>@Transactional</code>注解作用于类上时，该类的所有 public 方法将都具有该类型的事务属性，同时，我们也可以在方法级别使用该标注来覆盖类级别的定义。如果类或者方法加了这个注解，那么这个类里面的方法抛出异常，就会回滚，数据库里面的数据也会回滚。</p><p>在<code>@Transactional</code>注解中如果不配置<code>rollbackFor</code>属性,那么事物只会在遇到<code>RuntimeException</code>的时候才会回滚,加上<code>rollbackFor=Exception.class</code>,可以让事物在遇到非运行时异常时也回滚。</p><p>关于 <code>@Transactional</code>注解推荐阅读的文章：</p><ul><li><a href="https://www.ibm.com/developerworks/cn/java/j-master-spring-transactional-use/index.html" target="_blank" rel="noopener">透彻的掌握 Spring 中@transactional 的使用</a></li></ul><h3 id="6-4编程式配置（不推荐）"><a href="#6-4编程式配置（不推荐）" class="headerlink" title="6.4编程式配置（不推荐）"></a>6.4编程式配置（不推荐）</h3><p>配置文件</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans        http://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 配置业务层--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>accountService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itheima.service.impl.AccountServiceImpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>accountDao<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>accountDao<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>transactionTemplate<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>transactionTemplate<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 配置账户的持久层--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>accountDao<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itheima.dao.impl.AccountDaoImpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 配置数据源--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.jdbc.datasource.DriverManagerDataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driverClassName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.mysql.jdbc.Driver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbc:mysql://localhost:3306/eesy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1234<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 配置事务管理器--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.jdbc.datasource.DataSourceTransactionManager<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--配置事务模板对象--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>transactionTemplate<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.transaction.support.TransactionTemplate<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><p> 业务层</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 账户的业务层实现类 * * 事务控制应该都是在业务层 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AccountServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">IAccountService</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> IAccountDao accountDao<span class="token punctuation">;</span>    <span class="token keyword">private</span> TransactionTemplate transactionTemplate<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setTransactionTemplate</span><span class="token punctuation">(</span>TransactionTemplate transactionTemplate<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>transactionTemplate <span class="token operator">=</span> transactionTemplate<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAccountDao</span><span class="token punctuation">(</span>IAccountDao accountDao<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>accountDao <span class="token operator">=</span> accountDao<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Account <span class="token function">findAccountById</span><span class="token punctuation">(</span>Integer accountId<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span>  transactionTemplate<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TransactionCallback</span><span class="token operator">&lt;</span>Account<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> Account <span class="token function">doInTransaction</span><span class="token punctuation">(</span>TransactionStatus status<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> accountDao<span class="token punctuation">.</span><span class="token function">findAccountById</span><span class="token punctuation">(</span>accountId<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">transfer</span><span class="token punctuation">(</span>String sourceName<span class="token punctuation">,</span> String targetName<span class="token punctuation">,</span> Float money<span class="token punctuation">)</span> <span class="token punctuation">{</span>        transactionTemplate<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TransactionCallback</span><span class="token operator">&lt;</span>Object<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> Object <span class="token function">doInTransaction</span><span class="token punctuation">(</span>TransactionStatus status<span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"transfer...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//2.1根据名称查询转出账户</span>                Account source <span class="token operator">=</span> accountDao<span class="token punctuation">.</span><span class="token function">findAccountByName</span><span class="token punctuation">(</span>sourceName<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//2.2根据名称查询转入账户</span>                Account target <span class="token operator">=</span> accountDao<span class="token punctuation">.</span><span class="token function">findAccountByName</span><span class="token punctuation">(</span>targetName<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//2.3转出账户减钱</span>                source<span class="token punctuation">.</span><span class="token function">setMoney</span><span class="token punctuation">(</span>source<span class="token punctuation">.</span><span class="token function">getMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>money<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//2.4转入账户加钱</span>                target<span class="token punctuation">.</span><span class="token function">setMoney</span><span class="token punctuation">(</span>target<span class="token punctuation">.</span><span class="token function">getMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span>money<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//2.5更新转出账户</span>                accountDao<span class="token punctuation">.</span><span class="token function">updateAccount</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//                int i=1/0;</span>                <span class="token comment" spellcheck="true">//2.6更新转入账户</span>                accountDao<span class="token punctuation">.</span><span class="token function">updateAccount</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> null<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>它并没有给我们开发带来便利，反而增加了重复代码，所以不推荐使用</strong></p><h2 id="7-总结"><a href="#7-总结" class="headerlink" title="7.总结"></a>7.总结</h2><p>在实际开发中，注解带来的便利很大，但是有些情况下，纯注解配置也会显得繁琐，所以需要配合使用。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基础</title>
      <link href="/2020/03/03/ji-chu/"/>
      <url>/2020/03/03/ji-chu/</url>
      
        <content type="html"><![CDATA[<h1 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h1><h2 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h2><h3 id="网络五层结构"><a href="#网络五层结构" class="headerlink" title="网络五层结构"></a>网络五层结构</h3><ul><li><p>应用层：软件获取相关服务</p></li><li><p>传输层：主机间通信</p><ul><li><p>TCP:面向连接与字节，稳定，速度较慢占资源，</p><ul><li><p>三次握手</p><ul><li>客户端向服务器发送SYN</li><li>服务器向客户端发送SYN/ACK</li><li>客户端向服务器发送SYN</li></ul></li><li><p>四次挥手 </p><ul><li>客户端向服务器发送FIN</li><li>服务器向客户端发送ACK</li><li>服务器向客户端发送FIN</li><li>客户端向服务器发送ACK</li></ul></li></ul></li><li><p>套接字：IP+端口号</p></li><li><p>UDP:无连接，速度快，但可能会丢失数据，比如qq视频</p></li></ul></li><li><p>网络层：点对点通信，IP</p><ul><li>URI:统一资源标识符，仅标识，身份id</li><li>URL:统一资源定位符,标识+定位，住址</li></ul></li><li><p>传输链层：数据帧传输</p></li><li><p>物理层：信号转换为二进制</p></li></ul><h3 id="页面打开过程"><a href="#页面打开过程" class="headerlink" title="页面打开过程"></a>页面打开过程</h3><ul><li>DNS解析地址</li><li>浏览器向服务器发送请求</li><li>服务器响应并处理请求</li><li>服务器返回html报文</li><li>浏览器解析并渲染html</li></ul><h3 id="运用协议"><a href="#运用协议" class="headerlink" title="运用协议"></a>运用协议</h3><ul><li>DNS解析IP地址</li><li>服务器端TCP</li><li>网络IP</li><li>路由OPSF 开放式最短路径优先,数据传输</li><li>ARP路由与服务器端通信 把IP转换为MAC</li><li>HTTP，访问网页</li></ul><h3 id="状态码"><a href="#状态码" class="headerlink" title="状态码"></a>状态码</h3><ul><li><p>1XX</p><ul><li>请求处理中</li></ul></li><li><p>2XX </p><ul><li>200成功</li></ul></li><li><p>3XX</p><ul><li>重定向</li></ul></li><li><p>4XX </p><ul><li>404资源未找到类 </li></ul></li><li><p>5XX </p><ul><li>500服务器内部错误</li></ul></li></ul><h2 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h2><h3 id="生命周期（状态）"><a href="#生命周期（状态）" class="headerlink" title="生命周期（状态）"></a>生命周期（状态）</h3><ul><li>New初始状态</li><li>Runnable运行状态</li><li>Blocked阻塞 </li><li>Waiting等待唤醒或中断</li><li>Time_Waiting延时等待</li><li>Terminated终止</li></ul><h3 id="悲观锁与乐观锁"><a href="#悲观锁与乐观锁" class="headerlink" title="悲观锁与乐观锁"></a>悲观锁与乐观锁</h3><ul><li><p>悲观锁</p><p>每次去拿数据的时候都认为别人会修改，所以每次在拿数据的时候都会上锁。共享资源每次只给一个线程使用，其它线程阻塞，用完后再把资源转让给其它线程</p></li><li><p>乐观锁</p><p>每次去拿数据的时候都认为别人不会修改，所以不会上锁，但是在更新的时候会判断一下在此期间别人有没有去更新这个数据</p><ul><li><p>版本号实现</p><p>一般是在数据表中加上一个数据版本号version字段，表示数据被修改的次数，当数据被修改时，version值会加一。当线程A要更新数据值时，在读取数据的同时也会读取version值，在提交更新时，若刚才读取到的version值为当前数据库中的version值相等时才更新，否则重试更新操作，直到更新成功。</p></li><li><p>CAS实现</p><p>即compare and swap（比较与交换），是一种有名的无锁算法。无锁编程，即不使用锁的情况下实现多线程之间的变量同步，也就是在没有线程被阻塞的情况下实现变量的同步，所以也叫非阻塞同步</p></li></ul></li></ul><h3 id="死锁的产生"><a href="#死锁的产生" class="headerlink" title="死锁的产生"></a>死锁的产生</h3><ul><li><p>互斥条件</p><ul><li><p>资源只能由一个进程使用</p><ul><li>无解，同步所需要达到的效果</li></ul></li></ul></li><li><p>请求与保持条件</p><ul><li><p>申请资源阻塞时对原有资源保持占有，不释放</p><ul><li>一次性申请所有资源</li></ul></li></ul></li><li><p>不剥夺条件</p><ul><li><p>进程现有资源无法被其它进程剥夺，自己使用完毕才会释放</p><ul><li>申请阻塞时，释放已拥有资源</li></ul></li></ul></li><li><p>循环等待条件</p><ul><li><p>多线程间形成头尾连接的循环</p><ul><li>设置序列</li></ul></li></ul></li></ul><h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><ul><li><p>start </p><ul><li>开启一个线程，准备完毕后调用run方法</li></ul></li><li><p>run </p><ul><li>直接执行里面的方法</li></ul></li><li><p>wait（等待）</p></li><li><p>notify（唤醒）</p></li><li><p>sleep（休眠）</p></li></ul><h3 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h3><ul><li><p>Synchronized（自动解锁）</p><ul><li><p>代码块</p></li><li><p>方法上 </p><ul><li>静态方法上则等于给类加锁</li></ul></li><li><p>拓展：具体优化</p><p><a href="https://blog.csdn.net/weixin_43213517/article/details/89713899" target="_blank" rel="noopener">https://blog.csdn.net/weixin_43213517/article/details/89713899</a></p></li></ul></li></ul><pre><code>https://blog.csdn.net/Imobama/article/details/81119812</code></pre><ul><li>Lock（手动unlock）</li><li>volatile(保证变量可见性不会堵塞）</li></ul><h3 id="ThreadLocal类（每个线程获取专属的本地变量）"><a href="#ThreadLocal类（每个线程获取专属的本地变量）" class="headerlink" title="ThreadLocal类（每个线程获取专属的本地变量）"></a>ThreadLocal类（每个线程获取专属的本地变量）</h3><h3 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h3><ul><li><p>Excutor框架</p><ul><li><p>任务</p><ul><li><p>Runnable</p></li><li><p>Callable </p><ul><li>有返回值，能异常检查 </li></ul></li></ul></li><li><p>执行Excutor</p><ul><li><p>继承后ExecutorService</p><ul><li><p>实现后ThreadPoolExecutor</p><p>不允许使用 Executors 去创建，而是通过 ThreadPoolExecutor 的方式，这样的处理方式让写的同学更加明确线程池的运行规则，规避资源耗尽的风险</p><ul><li><p>corePoolSize</p><p>核心线程数，线程数定义了最小可以同时运行的线程数量。</p></li><li><p>maximunPoolSize</p><p>最大线程数，当队列中存放的任务达到队列容量的时候，当前可以同时运行的线程数量变为最大线程数。</p></li><li><p>workQueue</p><p>队列容量，当新任务来的时候会先判断当前运行的线程数量是否达到核心线程数，如果达到的话，新任务就会被存放在队列中。</p><ul><li><p>SynchronousQueue</p><p>这是一个内部没有任何容量的阻塞队列，任何一次插入操作的元素都要等待相对的删除/读取操作，否则进行插入操作的线程就要一直等待，反之亦然。</p></li><li><p>LinkedBlockingQueue</p><p>一个由数组支持的有界阻塞队列。此队列按 FIFO（先进先出）原则对元素进行排序。</p></li><li><p>ArrayBlockingQueue</p><p>基于链表结构，无限队列<br>这个容量就是Integer.MAX_VALUE</p></li></ul></li><li><p>keepAliveTime</p><p>等待时间，当线程池中的线程数量大于 corePoolSize 的时候，如果这时没有新的任务提交，核心线程外的线程不会立即销毁，而是会等待，直到等待的时间超过了 keepAliveTime才会被回收销毁；</p></li><li><p>unit</p><p>keepAliveTime 参数的时间单位。</p></li><li><p>threadFactory</p><p>executor 创建新线程的时候会用到。</p></li><li><p>handler</p><p>饱和策略</p><ul><li><p>AbortPolicy</p><p>抛出 RejectedExecutionException来拒绝新任务的处理。</p></li><li><p>CallerRunsPolicy</p><p>调用执行自己的线程运行任务，也就是直接在调用execute方法的线程中运行(run)被拒绝的任务，如果执行程序已关闭，则会丢弃该任务。另外，这个策略喜欢增加队列容量。如果您的应用程序可以承受此延迟并且你不能任务丢弃任何一个任务请求的话，你可以选择这个策略。</p></li><li><p>DiscardPolicy</p><p>不处理新任务，直接丢弃掉。</p></li><li><p>DiscardOldestPolicy</p><p>此策略将丢弃最早的未处理的任务请求</p></li></ul></li></ul></li><li><p>Excutors工具类（不推荐）</p><ul><li><p>FixedThreadPool：返回固定数量线程</p><p>不推荐，使用无界队列LinkedBlockingQueue，超过corePoolSize，会加入队列，而队列是无界的，设置的maximumPoolSize等无效。<br>其次，可能会导致oom</p></li><li><p>SingleThreadExcutor：返回一个线程 </p><p>同不推荐，理由同上</p></li><li><p>CashedThreadPool：按线程数分配，空闲的线程</p><p>CachedThreadPool允许创建的线程数量为 Integer.MAX_VALUE ，可能会创建大量线程，从而导致 OOM。也不推荐</p></li></ul></li></ul></li></ul></li><li><p>异步计算的结果(Future)</p></li><li><p>方法比较</p><ul><li><p>submit</p><ul><li>返回Future对象 </li></ul></li><li><p>excute</p><ul><li>无返回值，没法判断成功状态</li></ul></li><li><p>shutdown</p><ul><li>不会接受新任务，队列中的任务完成后关闭</li></ul></li><li><p>shutDownNow</p><ul><li>stop状态，停止队列中的任务</li></ul></li><li><p>isShutDown</p><ul><li>调用shutDown，返回true</li></ul></li><li><p>isTerminated</p><ul><li>调用shutDown，结束队列任务，返回true</li></ul></li></ul></li><li><p>线程池大小确定 </p><ul><li>CPU 密集型任务(N+1)</li><li>I/O密集型（2N）</li></ul></li></ul></li></ul><h2 id="java内存区"><a href="#java内存区" class="headerlink" title="java内存区"></a>java内存区</h2><h3 id="stack栈"><a href="#stack栈" class="headerlink" title="stack栈"></a>stack栈</h3><ul><li>虚拟机栈，方法调用时，会进栈，结束调用或异常时出栈</li></ul><h3 id="heap堆"><a href="#heap堆" class="headerlink" title="heap堆"></a>heap堆</h3><ul><li><p>新生代（Young Generation）</p></li><li><p>老生代（Old Generation）</p></li><li><p>方法区（永生代permanentGeneration）</p><ul><li><p>永生代受jvm约束，替代为元空间，直接内存，受物理约束</p></li><li><p>运行时常量池</p><ul><li>字面量（数据值）</li><li>符号引用（方法名）</li></ul></li></ul></li></ul><h3 id="线程-1"><a href="#线程-1" class="headerlink" title="线程"></a>线程</h3><ul><li><p>虚拟机栈</p><ul><li>java 方法 （也就是字节码）服务</li></ul></li><li><p>本地方法栈</p><ul><li>Native</li></ul></li><li><p>程序计数器</p></li></ul><h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><ul><li><p>对象的产生</p><ul><li><p>类加载检查</p></li><li><p>分配内存</p><ul><li>指针碰撞：内存规整，以用过与未使用分成两边</li><li>空闲列表：内存不规整，寻找空闲，分配给实例</li></ul></li><li><p>初始化零值</p></li><li><p>设置对象头</p></li><li><p>执行init方法</p></li></ul></li><li><p>对象的内存布局 </p><ul><li><p>对象头</p><ul><li>存储自身的数据</li><li>类型指针：指向对象所属类的地址</li></ul></li><li><p>实例数据  </p></li><li><p>对齐填充： 占位符</p></li></ul></li><li><p>对象的访问定位</p><ul><li><p>句柄</p><p>如果使用句柄的话，那么 Java 堆中将会划分出一块内存来作为句柄池，reference 中存储的就是对象的句柄地址，而句柄中包含了对象实例数据与类型数据各自的具体地址信息；</p></li><li><p>直接指针</p><p>如果使用直接指针访问，那么 Java 堆对象的布局中就必须考虑如何放置访问类型数据的相关信息，而 reference 中存储的直接就是对象的地址。</p></li></ul></li></ul><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><h3 id="Stack栈，先入后出"><a href="#Stack栈，先入后出" class="headerlink" title="Stack栈，先入后出"></a>Stack栈，先入后出</h3><h3 id="queue队列，先入先出"><a href="#queue队列，先入先出" class="headerlink" title="queue队列，先入先出"></a>queue队列，先入先出</h3><h3 id="Array数组，查询快，增删慢"><a href="#Array数组，查询快，增删慢" class="headerlink" title="Array数组，查询快，增删慢"></a>Array数组，查询快，增删慢</h3><h3 id="Linked链表，增删快，查询慢"><a href="#Linked链表，增删快，查询慢" class="headerlink" title="Linked链表，增删快，查询慢"></a>Linked链表，增删快，查询慢</h3><h3 id="B二叉树，特殊（红黑树）"><a href="#B二叉树，特殊（红黑树）" class="headerlink" title="B二叉树，特殊（红黑树）"></a>B二叉树，特殊（红黑树）</h3><h2 id="servlet"><a href="#servlet" class="headerlink" title="servlet"></a>servlet</h2><p>服务器端小程序，是一个接口，定义了java类被浏览器访问到（Tomcat）的规则，非线程安全。</p><h3 id="请求"><a href="#请求" class="headerlink" title="请求"></a>请求</h3><ul><li>get：获取数据</li><li>put：更新数据</li><li>post：创建数据</li></ul><h3 id="jsp"><a href="#jsp" class="headerlink" title="jsp"></a>jsp</h3><p>本质为servlet，先部署后编译，侧重视图解析。<br>servlet侧重逻辑控制。</p><ul><li>九大内置对象</li><li>七大动作</li><li>四种作用域</li><li>三大指令</li></ul><h3 id="转发与重定向"><a href="#转发与重定向" class="headerlink" title="转发与重定向"></a>转发与重定向</h3><ul><li><p>forward</p><p>转发，共享request，用于用户登录后，转发任务，通过request.getRequestDispatcher(地址).forword(req,rsp)</p></li><li><p>redirect</p><p>是利用服务器返回的状态码来实现的.比如302，不能共享数据，用于用户注销后跳转。response.sendRedirect（地址）</p></li><li><p>refresh</p><p>自动刷新，自动刷新不仅可以实现一段时间之后自动跳转到另一个页面，还可以实现一段时间之后自动刷新本页面。Response.setHeader(“Refresh”,”5;URL=地址);</p></li></ul><h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><ul><li>Cookie：客户端</li><li>Session：服务器端</li></ul><h2 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h2><h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3><ul><li>饿汉模式 ，类加载时创建对象</li><li>懒汉模式，使用.getInstance,第一次使用时创建</li></ul><h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><h3 id="Collection"><a href="#Collection" class="headerlink" title="Collection"></a>Collection</h3><ul><li><p>List 有序</p><ul><li>ArrayList</li><li>LinkedList</li></ul></li><li><p>Set不重复</p><ul><li>HashSet</li><li>LinkedHashSet</li><li>TreeSet</li></ul></li></ul><h3 id="Map-键值对"><a href="#Map-键值对" class="headerlink" title="Map 键值对"></a>Map 键值对</h3><ul><li>HashMap</li><li>LinkedHashMap</li><li>HashTable</li></ul><h2 id="Executor框架示意图-jpg"><a href="#Executor框架示意图-jpg" class="headerlink" title="Executor框架示意图.jpg"></a>Executor框架示意图.jpg</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/03/03/hello-world/"/>
      <url>/2020/03/03/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
